<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ohmyhsy</title>
  
  <subtitle>庸人自扰</subtitle>
  <link href="https://8bytes.top/atom.xml" rel="self"/>
  
  <link href="https://8bytes.top/"/>
  <updated>2022-04-11T13:56:02.714Z</updated>
  <id>https://8bytes.top/</id>
  
  <author>
    <name>Box</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode第十四题</title>
    <link href="https://8bytes.top/2022/04/11/leetcodeno14/"/>
    <id>https://8bytes.top/2022/04/11/leetcodeno14/</id>
    <published>2022-04-11T07:58:46.000Z</published>
    <updated>2022-04-11T13:56:02.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续划水做做看</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>string<ul><li>length</li></ul></li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/11/leetcodeno14/000.png" class=""><p>看到这个就想用两个for跑，用一个string变量+&#x3D;。</p><p>初始代码：</p><pre><code class="cpp">class Solution &#123;public:    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;    &#125;&#125;;</code></pre><p>假设第一层for循环跑strs的个数，第二个跑str[i]的长度，那么如果需要比较的话就又得多一层循环，三层其实有点多了，不是很好的办法。</p><p>……想了半天，既然是前缀之间的比较，那么假设循环的长度根据<code>strs[0].length()</code>，那么无论[0]的长度是最长还是最短，无非就三个结果，要么正好是他，要么是其中几个，要么都不是。</p><pre><code class="cpp">for(int i = 0; i &lt; strs[0].length(); i++)&#123;      //用str[0]作为对象与后面的比较    for(int j = 1; j &lt; strs.size(); j++)&#123;        if()                &#125;&#125;</code></pre><p>replace那些用起来比较麻烦的感觉，创建一个新的string变量，找到公共的就+&#x3D;进去是暴力解法的第一步。<br>然后就是if的问题，我该怎么去判断，是和不是又该怎么处理。<br>如果说直接比较</p><pre><code class="cpp">if(strs[0][i] == strs[j][i])    s += strs[0][i];</code></pre><p>若是相等，直接让变量s+&#x3D;strs[0][i],乍一看还是很合理的，让我们找个示例测试一下：</p><img src="/2022/04/11/leetcodeno14/001.png" class=""><p>好家伙。。比strs[0]都长了。。逆天</p><p>整理了一下，问题在于s+&#x3D;不应该在if里面，因为相等的时候，i还没有变，j倒是自增了，就导致重复+i的情况。</p><p>那也就是说s+的过程应该放在内循环外面</p><pre><code class="cpp">for(int i = 0; i &lt; strs[0].length(); i++)&#123;      //用str[0]作为对象与后面的比较    for(int j = 1; j &lt; strs.size(); j++)&#123;        if(strs[0][i] == strs[j][i])                &#125;    s += strs[0][i];&#125;</code></pre><p>那么if如果&#x3D;&#x3D;我们可以让他break掉，但是&#x3D;&#x3D; 反而break，好像给别人看起来就会很怪异，那么就干脆修改成!&#x3D;,这样应该就比较合理了。</p><pre><code class="cpp">for(int i = 0; i &lt; strs[0].length(); i++)&#123;      //用str[0]作为对象与后面的比较    for(int j = 1; j &lt; strs.size(); j++)&#123;        if(strs[0][i] != strs[j][i])            break;    &#125;    s += strs[0][i];&#125;</code></pre><p>再测试一下：</p><img src="/2022/04/11/leetcodeno14/002.png" class=""><p>额，好像strs[1]比strs[0]要短哦，if好像还应该判断i有没有到达<code>strs[j].lenght()</code>，如果已经到达了后者，那么前面也没必要在判断了，或者说后者比前者大时，i如果没到达<code>strs[j].lenght()</code>，也不用着急停止。意味着我们的if应该是：</p><pre><code class="cpp">if(strs[0][i] != strs[j][i] &amp;&amp; i != strs[j].length())    break;</code></pre><p>在测试了一下发现结果还是一样的</p><img src="/2022/04/11/leetcodeno14/002.png" class=""><p>拿去debug了一下。想起来break只是结束了内循环，s+还是生效了，所以如果符合if的条件时，我们应该让整个for都结束。能够达到这一类效果的应该就是直接return s;了</p><pre><code class="cpp">class Solution &#123;public:    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;        string s = &quot;&quot;;        for(int i = 0; i &lt; strs[0].length(); i++)&#123;                  for(int j = 1; j &lt; strs.size(); j++)&#123;                if(strs[0][i] != strs[j][i] &amp;&amp; i != strs[j].length())                    return s;            &#125;            s += strs[0][i];        &#125;        return s;    &#125;&#125;;</code></pre><p>测试了两个示例结果都正常的，提交看看。</p><img src="/2022/04/11/leetcodeno14/003.png" class=""><p>额小尴尬，解答错误了。</p><p>……又想了一圈，if里面应该是用或的，要么达到<code>strs[j].length()</code>,要么就是两个不相等，所噶所噶。。今天脑子有点不好使。<br>把解答错误的案例塞进去试了一下：</p><img src="/2022/04/11/leetcodeno14/004.png" class=""><p>。。。。。。坏事</p><p>哦哦哦。。应该是要么俩不相等，要么<code>i==strs[j].lenght()</code>;表示它走到头了该断了。</p><pre><code class="cpp">if(strs[0][i] != strs[j][i] || i == strs[j].length())</code></pre><img src="/2022/04/11/leetcodeno14/005.png" class=""><p>再次提交：</p><img src="/2022/04/11/leetcodeno14/006.png" class=""><p>总算是过了。</p><p>最后修正：</p><pre><code class="cpp">class Solution &#123;public:    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123;        string s = &quot;&quot;;        for(int i = 0; i &lt; strs[0].length(); i++)&#123;                 for(int j = 1; j &lt; strs.size(); j++)&#123;                if(strs[0][i] != strs[j][i] || i == strs[j].length())                    return s;            &#125;            s += strs[0][i];        &#125;        return s;    &#125;&#125;;</code></pre><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>…简单的题目就挺折腾的了，而且c++有段时间不看，就忘了一些函数的用法了。。得回头补补了</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;继续划水做做看&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://8bytes.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode第十三题</title>
    <link href="https://8bytes.top/2022/04/10/leetcodeno13/"/>
    <id>https://8bytes.top/2022/04/10/leetcodeno13/</id>
    <published>2022-04-10T06:19:31.000Z</published>
    <updated>2022-04-10T14:30:40.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>额想了个把小时都没有很好的主意去处理六个特殊情况。</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>switch</li><li>string</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/10/leetcodeno13/000.png" class=""><p>提示：</p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li></ul><blockquote><p>好处是罗马数字就七种字符，坏处有特殊的组合<br>且字符串s长度不超过15，转换后的整数范围不超过3999，这样倒是不用担心越界了。</p></blockquote><p>初始代码：</p><pre><code class="cpp">class Solution &#123;public:    int romanToInt(string s) &#123;    &#125;&#125;;</code></pre><p>最后返回转换的罗马数字即可。</p><hr><h2 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h2><p>因为就7个字符，感觉可以用switch直接套，不然用map再套一层好像增加空间了。</p><pre><code class="cpp">class Solution &#123;public:    int romanToInt(string s) &#123;            &#125;    int getCsetV(char c)&#123;        switch(c)&#123;            case &#39;I&#39; : return 1; break;            case &#39;V&#39; : return 5; break;            case &#39;X&#39; : return 10; break;            case &#39;L&#39; : return 50; break;            case &#39;C&#39; : return 100; break;            case &#39;D&#39; : return 500; break;            case &#39;M&#39; : return 1000; break;            default: return 0; break;        &#125;    &#125;&#125;;</code></pre><blockquote><p>就先封装一个函数，但是问题就在于那几个特殊组合的情况。</p></blockquote><pre><code class="cpp">class Solution &#123;public:    int romanToInt(string s) &#123;        int n = 0;        for(int i = 0; i &lt; s.length(); i++)&#123;            if(s[i] &lt; s[i+1])&#123;                n += getCsetV(s[i+1]) - getCsetV(s[i]);            &#125;else&#123;                n += getCsetV(s[i]);            &#125;        &#125;    &#125;    int getCsetV(char c)&#123;        switch(c)&#123;            case &#39;I&#39; : return 1; break;            case &#39;V&#39; : return 5; break;            case &#39;X&#39; : return 10; break;            case &#39;L&#39; : return 50; break;            case &#39;C&#39; : return 100; break;            case &#39;D&#39; : return 500; break;            case &#39;M&#39; : return 1000; break;            default: return 0; break;        &#125;    &#125;&#125;;</code></pre><blockquote><p>遍历一遍是肯定要的，但是如果判断的是字符相不相等，再使其控制<code>n += </code>的情况，又有点不对头，因为i到了字符串末尾的时候，i+1就越界了不说。。单纯的s[i]返回的是字符，也不能作为比较的条件，那么就要创建两个变量或者是if的时候就要把s[i]放到getCsetV里面。</p></blockquote><pre><code class="cpp">for(int i = 0; i &lt; s.length(); i++)&#123;    if(getCsetV(s[i]) &lt; getCsetV(s[i+1]))&#123;        n += getCsetV(s[i+1]) - getCsetV(s[i]);    &#125;else&#123;        n += getCsetV(s[i]);    &#125;&#125;</code></pre><p>这样修改后，测试的时候就会发现问题了，比如”IV”：</p><img src="/2022/04/10/leetcodeno13/001.png" class=""><p>貌似多了个5。。其实原因就是i&lt;的是s.length();<br>两个字符的时候，0 和 0+1已经判断过了，就没必要让i在自增了，<del>解决办法就是<code>i &lt; s.length()-1</code>;</del></p><p>-1方法不可取，之前脑子又陷进去了,为什么这么说呢，因为IV是特殊组合，它不需要像正常那样从左+到右，它是一组固定的值，如果我-1了，那个字符串正好是”LVIII“的话，最后的i就被舍弃了。</p><img src="/2022/04/10/leetcodeno13/002.png" class=""><p>debug了一圈，抓到是n+的问题。如果后者大于前者，n+&#x3D;后者-前者，但是最后还是要额外+一个后者。<br>所以应该是后者大于前者时，n -&#x3D; 前者，n此时为负数，然后就是正常情况下n +&#x3D; 后者。</p><pre><code class="cpp">if(getCsetV(s[i]) &lt; getCsetV(s[i+1]))&#123;    n -= getCsetV(s[i]);&#125;else&#123;    n += getCsetV(s[i]);&#125;</code></pre><p>最后又测了几个示例，应该是差不多了，提交一下：</p><img src="/2022/04/10/leetcodeno13/003.png" class=""><p>完整代码：</p><pre><code class="cpp">class Solution &#123;public:    int romanToInt(string s) &#123;        int n = 0;        for(int i = 0; i &lt; s.length(); i++)&#123;            if(getCsetV(s[i]) &lt; getCsetV(s[i+1]))&#123;                n -= getCsetV(s[i]);            &#125;else&#123;                n += getCsetV(s[i]);            &#125;        &#125;        return n;    &#125;    int getCsetV(char c)&#123;        switch(c)&#123;            case &#39;I&#39; : return 1; break;            case &#39;V&#39; : return 5; break;            case &#39;X&#39; : return 10; break;            case &#39;L&#39; : return 50; break;            case &#39;C&#39; : return 100; break;            case &#39;D&#39; : return 500; break;            case &#39;M&#39; : return 1000; break;            default: return 0; break;        &#125;    &#125;&#125;;</code></pre><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>好像没有特别能优化的地方，唯一想优化的就是对那几组特殊组合，能有什么办法不用循环判断就好了，直接循环累加。<br>map在我的想法里用起来也挺麻烦的感觉。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>然后就是翻阅评论了，精选第一条其实就是解释了一个思想。</p><img src="/2022/04/10/leetcodeno13/004.png" class=""><p>不过他用的hashmap，我是想如果能不额外增加变量那最好，虽然不知道hashmap的效率会不会更高。</p><p>然后就是一个秀儿的代码：</p><img src="/2022/04/10/leetcodeno13/005.png" class=""><p>雀食有点意思啊，直接把字符串s替换一下，把那六个组合替换成别的代替的字符，然后switch的时候分别对应六个值，这样for循环雀食省了if，只管累加就行。。。确实优秀</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;额想了个把小时都没有很好的主意去处理六个特殊情况。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://8bytes.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode第九题</title>
    <link href="https://8bytes.top/2022/04/08/leetcodeno9/"/>
    <id>https://8bytes.top/2022/04/08/leetcodeno9/</id>
    <published>2022-04-08T14:55:39.000Z</published>
    <updated>2022-04-10T09:24:42.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先按难度往下走，因为数据结构还没理清。</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><del>c++ string：</del></p><ul><li><del>length —— 返回字符串长度</del></li><li><del>size —— 返回字符串长度</del></li></ul><p><del><strong>注意：strlen是以char*去计算字符串长度直到‘\0’结束，本题用不到。</strong></del></p><p>c++ vector:</p><ul><li>size —— 获取vector容器元素个数</li><li>operator[] —— 类似数组根据下标返回元素值</li></ul><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><img src="/2022/04/08/leetcodeno9/000.png" class=""><p>c++给到的代码框架：</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;    &#125;&#125;;</code></pre><blockquote><p>bool型函数，返回true或false即可</p></blockquote><p>根据现有条件可以排除x&lt;10的情况，因为个位数不可能存在回文现象，而两位数的10也不存在，负数更不用说，多了个-号；故此首先判断x&lt;10，如果成立直接返回false；</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        if(x &lt; 10)&#123;            return false;        &#125;else&#123;                    &#125;    &#125;&#125;;</code></pre><p>接下来就是要拆开x去判断是否为回文数字,题目进阶思想是不使用将整数转换成字符串。先用最低级暴力去解题试试看。</p><hr><h3 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h3><p>字符串这里肯定不能用char了，因为不知道长度，所以得用str接着，让x每次%10，然后让str+&#x3D;x%10;</p><p><strong>注意：这里有个问题就是，int类型无法直接+&#x3D;给string类型，网上是有一些不同版本特性诞生的函数可以操作，但是这样对于算法的鲁棒性就很差了</strong><br>所以字符串应该是不可取的，至于题目进阶反而提示的是不使用整数转换成字符串我就不是很了解了，等我做完看看评论大哥怎么做的。</p><p>在上述不考虑string的情况下，我们如何让一个int类型还能做到拆分成像数组一样呢？其实就是老朋友vector了。</p><p>我们可以通过while转换:</p><pre><code class="cpp">vector&lt;int&gt; v;while(x &gt; 0)&#123;    v.push_back(x%10);    x /= 10;&#125;</code></pre><blockquote><p>即x倒置了一遍</p></blockquote><p>然后根据vector自带的size方法，先获取元素个数</p><pre><code class="cpp">int len = v.size();</code></pre><p>然后首尾之间判断肯定是通过两个for循环了，但是需要统计一下，为什么这么说呢，因为我是把长度&#x2F;2来算，一个i从&#x3D;0 &lt; len&#x2F;2; 一个j &#x3D; len-1 &gt; len&#x2F;2; 这样首尾一判断也还行。故此代码： </p><pre><code class="cpp">int num = 0;for(int i = 0; i &lt; len/2; i++)&#123;    for(int j = len-1; j &gt; len/2; j--)&#123;        if(v[i] == v[j])            num++;    &#125;&#125;</code></pre><p>然后最后在判断一些num是否&#x3D;len&#x2F;2，这样就证明了有几组数字是相同的。</p><p>提一嘴的就是，leetcode是要求函数必须返回一个值，所以我们直接在if完之后的return还不行。要定义一个bool flag；</p><p>在东拼西凑之后，代码如下：</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;         if( x &lt; 10)&#123;            flag = false;        &#125;else&#123;            vector&lt;int&gt; v;            int num = 0;            while(x &gt; 0)&#123;                v.push_back(x%10);                x /= 10;            &#125;            int len= v.size();            for(int i = 0; i &lt; len/2; i++)&#123;                for(int j = len-1; j &gt; len/2; j--)&#123;                    if(v[i] == v[j])                        num++;                &#125;            &#125;            if(num == len/2)                flag = true;         &#125;           return flag;    &#125;&#125;;</code></pre><p>测试了几个案例之后我们提交一下看看：</p><img src="/2022/04/08/leetcodeno9/001.png" class=""><p>我直呼好家伙！！！！！<br>0居然算回文啊，那个位数其实都算了吧？<br>我直呼好家伙！！！！！<br>这么重要的东西不在示例里面。。靠，不过没事，</p><p>我们修改一下<code>if(x &lt; 0)</code>就可以了：</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;         if( x &lt; 0)&#123;            flag = false;        &#125;else&#123;            vector&lt;int&gt; v;            int num = 0;            while(x &gt; 0)&#123;                v.push_back(x%10);                x /= 10;            &#125;            int len= v.size();            for(int i = 0; i &lt; len/2; i++)&#123;                for(int j = len-1; j &gt; len/2; j--)&#123;                    if(v[i] == v[j])                        num++;                &#125;            &#125;            if(num == len/2)                flag = true;         &#125;           return flag;    &#125;&#125;;</code></pre><p>再提交一次：</p><img src="/2022/04/08/leetcodeno9/002.png" class=""><p>额，这就很尴尬了，简单测试了一下，发现是我的思路出问题了，因为我拆成两份算的时候考虑的是这个数是奇数位数而不是偶数位数……<br>调整的时候注意到一个问题。。预期对半算，不如直接i和len算</p><pre><code class="cpp">for(int i = 0; i &lt; len; i++)&#123;    if(v[i] == v[len-i])        num++;&#125;</code></pre><p>先测试一下。。发现还是有点问题，就是因为len是元素个数，但是实际上vector[]重载跟数组一下都是从0开始，这就导致len得先-1，放在循环里反而不合适了。所以对上面的len&#x3D;size的时候就-1，这代码就跟屎山一样现在堆积在一起。测了一下，0不起作用，其他都行了，因为我while的时候判断条件就是x&gt;0，所以就很扯淡。这里直接用elseif套过去先，看看能不能通过。合并之后的代码：</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;         if( x &lt; 0)&#123;            flag = false;        &#125;else if( x == 0 )&#123;            flag = true;        &#125;else&#123;            vector&lt;int&gt; v;            int num = 0;            while(x &gt; 0)&#123;                v.push_back(x%10);                x /= 10;            &#125;            int len= v.size()-1;            for(int i = 0; i &lt; len; i++)&#123;                if(v[i] == v[len-i])                    num++;            &#125;            if(num == len)                flag = true;         &#125;           return flag;    &#125;&#125;;</code></pre><img src="/2022/04/08/leetcodeno9/003.png" class=""><blockquote><p>通过是通过了，但是这个时间和空间效率真的惨不忍睹，这大概就是陷进去了。不过在用while拆解x的时候突然想到一个点。在后面优化一下看看。</p></blockquote><hr><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>回望屎山，满目鄙夷之色。。。。hhh,真的是人太菜。</p><p>回归正题，在将x不断%10拆解的时候，我那会就在想，如果用一个变量&#x3D;<code>x%10+变量*10</code>，这样的话，例如x&#x3D;121的时候，我创建一个变量n；</p><blockquote><p>n &#x3D; 121%10 + n*10，此时n &#x3D; 1;<br>然后将x&#x2F;10，再重复上步骤,<br>n &#x3D; 12%10 + n*10; 这个时候n &#x3D; 12;<br>在x&#x2F;10重复,<br>n &#x3D; 1%10 + n*10; n &#x3D; 121;</p></blockquote><p>这样直接if(n &#x3D;&#x3D; x)好像就完事了。</p><p>0-9结果都一样，也不用再加什么elseif了。</p><p>浓缩后的代码：</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;        int n = 0;        while(x &gt; 0)&#123;            n = x%10 + n*10;            x /= 10;        &#125;        if(x == n)            flag = true;        return flag;    &#125;&#125;;</code></pre><p>然后测试了一下。。发现好像就0是对的，又看了几遍看出了点门道。。我的x被我一直&#x2F;10，后面变成0了。。。。难怪<code>if(x == n)</code>怎么没变化。。，</p><p>找个变量先复制x的值就行了。</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;        int n = 0;        int y = x;        while(x &gt; 0)&#123;            n = x%10 + n*10;            x /= 10;        &#125;        if(y == n)            flag = true;        return flag;    &#125;&#125;;</code></pre><p>决定命运的时刻来了，提交看看：</p><img src="/2022/04/08/leetcodeno9/004.png" class=""><p>额，真是坎坷啊，它提示好像溢出了，也是哦，题目提示的范围是-2<sup>31</sup> &lt;&#x3D; x &lt;&#x3D; 2<sup>31</sup> - 1,<br>那也就是说要把n的类型改成long int应该就行了。</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        bool flag = false;        long int n = 0;        int y = x;        while(x &gt; 0)&#123;            n = x%10 + n*10;            x /= 10;        &#125;        if(y == n)            flag = true;        return flag;    &#125;&#125;;</code></pre><p>最后执行效率：</p><img src="/2022/04/08/leetcodeno9/005.png" class=""><p>时间好像挺叼的了，空间拉不满应该是我用了long int的问题，不过最后还是取决与服务器之间的联系吧，多测一下好像最好的内存占用也是5.6mb，然后时间会从0ms-12ms浮动，不知道是不是网络波动的问题。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>不得不感慨。。有的时候屎山写着写着找到金子了好像。。</p><p>去看了看评论。第一条就是对题目的批评：</p><img src="/2022/04/08/leetcodeno9/006.png" class=""><p>也难怪。。毕竟这个回文数没想到会这么大。。利用*10往上推是会出现这样的问题。</p><p>然后就是感觉能稍微优化一下空间和省略一个if哎，评论里大多都是直接return n&#x3D;&#x3D;x这样，这样雀食省了我定义一个bool变量。</p><pre><code class="cpp">class Solution &#123;public:    bool isPalindrome(int x) &#123;        long int n = 0;        int y = x;        while(x &gt; 0)&#123;            n = x%10 + n*10;            x /= 10;        &#125;        return y == n;    &#125;&#125;;</code></pre><p>几轮刷新提交最好情况内存也就是5.6MB，好像没有太大区别，时间反而除了第一次的0ms，其他最好表现都是4ms了，不过问题不大。</p><p>同样的也看到了之前用string的，也就是我开头说的一个问题，int转换成string的函数是带来的新特性还是标准库函数，但是我个人还是不赞成去用这种方法。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先按难度往下走，因为数据结构还没理清。&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://8bytes.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode第一题</title>
    <link href="https://8bytes.top/2022/04/06/leetcodeno1/"/>
    <id>https://8bytes.top/2022/04/06/leetcodeno1/</id>
    <published>2022-04-06T13:22:16.000Z</published>
    <updated>2022-04-10T09:25:17.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="/2022/04/06/leetcodeno1/000.png" class=""><p>有人相爱，有人夜里开车看海，有人连leetcode第一题都做不出来。—— 摘自评论</p><span id="more"></span><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>没啥参考的，用到啥函数了就回头看看。毕竟记得不是很清楚。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><img src="/2022/04/06/leetcodeno1/001.png" class=""><p>从题目要求里看形式就像输入一个数组和一个目标数，求数组中哪两个成员能组合成这个目标数。</p><p>默认给的模板是：</p><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;    &#125;&#125;;</code></pre><blockquote><p>估计是因为c++ 有stl思想，所以不用数组，而使用容器vector</p></blockquote><h2 id="初解"><a href="#初解" class="headerlink" title="初解"></a>初解</h2><p>暴力解法我们肯定想到的是两层for循环直接挨个if过来<br>实现：<br>时间复杂度按照这样说好像就是<code>T(n)=O(n^2)</code>;</p><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        vector&lt;int&gt; n;        for(int i=0;i&lt;nums.size();i++)&#123;            for(int j=1;j&lt;nums.size();j++)&#123;                if(nums[i]+nums[j]==target)&#123;                    n.push_back(i);                    n.push_back(j);                    return n; //或者直接break结束循环，反正最后都要返回。                &#125;            &#125;        &#125;        return n;    &#125;&#125;;</code></pre><blockquote><p>最初的时候想创建一个数组返回的，但是题目用的好像是vector，也就凑合用了，后面看了下评论，发现return居然能返回{}，这样的一组数据，就感觉很新奇也很离谱。。毕竟传统概念return都是返回一个变量或者值</p></blockquote><h3 id="的解释"><a href="#的解释" class="headerlink" title="{}的解释"></a>{}的解释</h3><p>后面多看了几个评论，发现类似传递的规则，应该是默认将{}转换成这个函数类型相符的了，比如java的可能是public int[] twoSum，那么return的是，默认就是return int[] {i,j}.</p><p>至于为什么这么说呢，因我自己试了一下：</p><img src="/2022/04/06/leetcodeno1/007.png" class=""><p>是可以通过测试，并且提交也是正确的，那么ok就不用管这么多了，<strong>虽然感觉在实际的面试中应该出的题目会和这个不太一样，如果有需要开辟就开辟下新的空间用吧。</strong></p><hr><h2 id="调试初解"><a href="#调试初解" class="headerlink" title="调试初解"></a>调试初解</h2><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        for(int i = 0; i &lt; nums.size(); i++)&#123;            for(int j = 0; j &lt; nums.size(); j++)&#123;                if(nums[i] + nums[j] == target)&#123;                    return &#123;i,j&#125;;                &#125;            &#125;        &#125;        return &#123;&#125;;    &#125;&#125;;</code></pre><blockquote><p>故此这里开始都使用{}的方法，这样雀食省了空间，但是还没搞懂为什么能这么用，看后续能不能看到</p></blockquote><p>运行代码的时候发现输出和预期结果不一样：</p><img src="/2022/04/06/leetcodeno1/002.png" class=""><p>看了一下发现j不应该也从0开始，浪费了，那么把j的初始化设置为1；</p><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        for(int i = 0; i &lt; nums.size(); i++)&#123;            for(int j = 1; j &lt; nums.size(); j++)&#123;                if(nums[i] + nums[j] == target)&#123;                    return &#123;i,j&#125;;                &#125;            &#125;        &#125;        return &#123;&#125;;    &#125;&#125;;</code></pre><p>再次执行测试：</p><img src="/2022/04/06/leetcodeno1/003.png" class=""><p>哎发现可以了，提交看看</p><p>哎然后，然后就报错了。。</p><img src="/2022/04/06/leetcodeno1/004.png" class=""><p>又看了一下题目:<strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</strong><br>原来是不允许重复啊。那么在if里面在判断一次i！&#x3D; j即可</p><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        for(int i = 0; i &lt; nums.size(); i++)&#123;            for(int j = 1; j &lt; nums.size(); j++)&#123;                if(nums[i] + nums[j] == target &amp;&amp; i != j)&#123;                    return &#123;i,j&#125;;                &#125;            &#125;        &#125;        return &#123;&#125;;    &#125;&#125;;</code></pre><p>提交代码：<img src="/2022/04/06/leetcodeno1/005.png" class=""><br>ok通过了。。但是这个执行用时才击败了5.12%的用户也太搞了。。不得不感慨人和人之间的差距。</p><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>又看了下我的代码，看看哪能优化一丢丢，想了想，在i和j那里可以做做手脚。<br>比如测试样例是nums&#x3D;[2,5,5,11],target&#x3D;10;<br>我i肯定是从0开始，但是j呢，从1开始是没啥问题，但是如果</p><ul><li>第一次i&#x3D;0，j就从1-end。</li><li>第二次i&#x3D;1，j还是从1-end。</li><li>第三次i&#x3D;2，j还是从1-end。</li></ul><p>这样以来就能简单的看出问题所在之处了。</p><p>所以我们的j应该是&#x3D;1+i，这样一来</p><ul><li>第一次i&#x3D;0，j&#x3D;1+0 —— end</li><li>第二次i&#x3D;1，j&#x3D;1+1 —— end</li><li>第三次i&#x3D;2，j&#x3D;1+2 —— end</li></ul><p>这样可以说大小省略掉一半的时间了。</p><p>简单修改一下代码：</p><pre><code class="cpp">class Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        for(int i = 0; i &lt; nums.size(); i++)&#123;            for(int j = i + 1; j &lt; nums.size(); j++)&#123;                if(nums[i] + nums[j] == target &amp;&amp; i != j)&#123;                    return &#123;i,j&#125;;                &#125;            &#125;        &#125;        return &#123;&#125;;    &#125;&#125;;</code></pre><p>再次提交：<img src="/2022/04/06/leetcodeno1/006.png" class=""></p><p>果然时间效率优化了不少，内存依旧是在9.8和9.9徘徊是正常的。</p><hr><h2 id="在优化——load"><a href="#在优化——load" class="headerlink" title="在优化——load"></a>在优化——load</h2><p>目前好像还没想到小于O(n^2)的办法，等哪天想到了再来改一下，因为怎么样都是要都举一遍</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>leetcode的测试感觉。。还得顺带看看服务器心情哈哈哈</p><img src="/2022/04/06/leetcodeno1/008.png" class=""><p>一样的的代码，结果每次都不相同哈哈哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;img src=&quot;/2022/04/06/leetcodeno1/000.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;有人相爱，有人夜里开车看海，有人连leetcode第一题都做不出来。—— 摘自评论&lt;/p&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://8bytes.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>初级软考-程序员</title>
    <link href="https://8bytes.top/2022/03/29/%E5%88%9D%E7%BA%A7%E8%BD%AF%E8%80%83-%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>https://8bytes.top/2022/03/29/%E5%88%9D%E7%BA%A7%E8%BD%AF%E8%80%83-%E7%A8%8B%E5%BA%8F%E5%91%98/</id>
    <published>2022-03-29T14:27:52.000Z</published>
    <updated>2022-04-10T09:24:54.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>带专快毕业了，找工作前总得找点有用的证书，手头就一个没啥用的二级C语言，上半年就先报了初级软考-程序员。别问为什么不莽中级，当送钱童子。高级就更不用说了，还要写个1500的小论文，没经验干不动！</p><hr><span id="more"></span><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>b站搜索<code>浙江省软件考试程序员</code>,第一个就是希赛的，那么就参考这个了。</p><blockquote><p>没有推广，瞎玩瞎闹</p></blockquote><hr><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>没有结尾，考完才知道。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;带专快毕业了，找工作前总得找点有用的证书，手头就一个没啥用的二级C语言，上半年就先报了初级软考-程序员。别问为什么不莽中级，当送钱童子。高级就更不用说了，还要写个1500的小论文，没经验干不动！&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="exam" scheme="https://8bytes.top/tags/exam/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法</title>
    <link href="https://8bytes.top/2022/03/27/Markdown/"/>
    <id>https://8bytes.top/2022/03/27/Markdown/</id>
    <published>2022-03-27T05:56:09.000Z</published>
    <updated>2022-04-10T11:41:13.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录markdown常用语法-做个备忘录"><a href="#记录markdown常用语法-做个备忘录" class="headerlink" title="记录markdown常用语法,做个备忘录"></a>记录markdown常用语法,做个备忘录</h1><span id="more"></span><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>标题的等级由#构成，#号越多对应的标题大小越小，就是类似html语法的h1-h6</p><pre><code class="bash"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><blockquote><p>值得注意的是，#号后面建议跟个空格，某些平台可能不用</p></blockquote><p>效果如下<code>(主题可能重写过，所以效果可能与其他平台略有差异)</code>：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><p>常用修饰方法就是，粗体和斜体，然后两者结合粗斜体<br>markdown中，<code>-</code>和<code>*</code>的用法差不多</p><pre><code class="bash">*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><p>效果如下：<br><em>斜体文本</em><br><em>斜体文本</em></p><p><strong>粗体文本</strong><br><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><p><em><strong>粗斜体文本</strong></em></p><p>有的时候有点抽风效果可以看图：</p><img src="/2022/03/27/Markdown/001.png" class=""><hr><h2 id="3-段落"><a href="#3-段落" class="headerlink" title="3.段落"></a>3.段落</h2><p>段落没啥特殊的，一段话写完回车就行，想看着空一点就空一行再写</p><pre><code class="bash">这是一个段落这也是一个段落</code></pre><pre><code class="bash">这是一个段落这也是一个段落</code></pre><p>效果1：<br>这是一个段落<br>这也是一个段落</p><p>效果2：<br>这是一个段落</p><p>这也是一个段落</p><hr><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><p>本文的分割线是因为主题关系所以显示为虚线</p><p><code>*</code>和<code>-</code>的组合，多少好像问题不大，但是三个最基本的需求就够了</p><pre><code class="txt">***---* * *- - ------------</code></pre><p>效果如下：</p><hr><hr><hr><hr><hr><p>over！</p><hr><h2 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h2><p>删除线跟加粗类似，使用两组<code>~~</code>组合</p><pre><code class="bash">~~删除线~~</code></pre><p>效果如下：<br><del>删除线</del></p><hr><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><p>引用使用<code>&gt;</code>表示，可以嵌套，例如：</p><pre><code class="txt">&gt;1&gt;&gt;2&gt;&gt;&gt;3&gt;&gt;&gt;&gt;4</code></pre><p>效果如下：</p><blockquote><p>1</p><blockquote><p>2</p><blockquote><p>3</p><blockquote><p>4</p></blockquote></blockquote></blockquote></blockquote><h2 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h2><p>脚注用的相对少一点，就相当于对一个词拎出来单独描述，注解的说法。</p><p>例如：</p><pre><code class="txt">他说[^秋天]到了。[^秋天]:四季之一，进入秋季，意味着降雨、湿度等趋于下降或减少，在自然界中万物开始从繁茂成长趋向萧索成熟。</code></pre><p>效果如图：</p><img src="/2022/03/27/Markdown/000.png" class=""><p>不知道是主题修改了什么，在这个主题下没法显示，但是markdown预览是能看到的</p><hr><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><p>列表分为有序和无序<br>无序可以使用<code>*</code>，<code>+</code>，<code>-</code>三种符号作为标记</p><pre><code class="txt">* 1* 2* 3+ 1+ 2+ 3- 1- 2- 3</code></pre><p>效果如下：</p><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><p>而有序列表则通过特定的开头+上<code>.</code>并空一格实现</p><pre><code class="txt">1. 12. 23. 3</code></pre><p>效果如下：</p><ol><li>1</li><li>2</li><li>3</li></ol><p>嵌套列表自然是有序和无序的结合，或者是有序之间的叠加</p><pre><code>1. a    * aa2. b    * bb3. c    * cc1. a    1. aa2. b    2. bb3. c    3. cc</code></pre><p>效果如下：</p><ol><li>a<ul><li>aa</li></ul></li><li>b<ul><li>bb</li></ul></li><li>c<ul><li>cc</li></ul></li></ol><p>!</p><ol><li>a<ol><li>aa</li></ol></li><li>b<ol start="2"><li>bb</li></ol></li><li>c<ol start="3"><li>cc</li></ol></li></ol><blockquote><p>这里可以看到有序之间的嵌套会使得里面的产生变化</p></blockquote><hr><h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9.代码"></a>9.代码</h2><p>这个我感觉比较适合突出一个东西，类似加粗的效果，加粗是给文本变得厚重，代码函数或者片段更适合用修改背景色来突出。</p><p>此处使用两个反引号&#96;</p><pre><code>`hh`</code></pre><p>效果如下：<br><code>hh</code></p><h2 id="10-链接"><a href="#10-链接" class="headerlink" title="10.链接"></a>10.链接</h2><p>图片和超链接的用法都差不多:</p><pre><code>[这是一个指向百度的超链接](www.baidu.com)虽然有的地方好像在图片用法的前面加了一个!![这是一张图片](链接使用绝对路径还是相对路径取决于你自己)</code></pre><p>但是总体来讲区别不大，效果如下：<br><a href="www.baidu.com">这是一个指向百度的超链接</a><br><img src="/./source/../../images/logo.jpg" alt="这是一张图片"></p><hr><h2 id="11-表格"><a href="#11-表格" class="headerlink" title="11.表格"></a>11.表格</h2><p>markdown的表格由<code>|</code>来分隔单元格，由<code>-</code>分隔表头和其他行。</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><p>效果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>此外还有表格内文本对齐方式设置：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><p>效果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>markdown的语法其实可以和html混用，但是根据不同浏览器和他的内核版本上，显示的效果可能存在差异，所以尽量少用</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录markdown常用语法-做个备忘录&quot;&gt;&lt;a href=&quot;#记录markdown常用语法-做个备忘录&quot; class=&quot;headerlink&quot; title=&quot;记录markdown常用语法,做个备忘录&quot;&gt;&lt;/a&gt;记录markdown常用语法,做个备忘录&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://8bytes.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>vscode c/c++ run+debug</title>
    <link href="https://8bytes.top/2022/03/23/vscode-c-c-configure/"/>
    <id>https://8bytes.top/2022/03/23/vscode-c-c-configure/</id>
    <published>2022-03-23T12:47:07.000Z</published>
    <updated>2022-04-10T09:25:35.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在大型项目开发面前，有clion，visual studio 20xx系列的产品存在，但是相对于基础学习，这些大型开发环境的占用和安装流程可能会稍微麻烦点。</p><span id="more"></span><p>在大学常规学习C语言时，我们常用的软件有：</p><ol><li><p>dev c++</p></li><li><p>visual c++ 6.0</p></li><li><p>code:blocks</p></li><li><p>c-free</p></li></ol><p>等常规软件，他们界面相对简单体积小，能满足基本学习要求。故相对而言，这些软件大部分都没什么更新了所以更固定。</p><blockquote><p>如果对对其他不做要求且需要高版本的gcc，那么你可以下载更高版本，去修改编译器使用的gcc即可。</p></blockquote><p>但是如果你和作者一样也喜欢折腾，也对编辑器的外观有一定的追求，那么本文或许能够帮到你。</p><blockquote><p>注意！配置可能稍显麻烦，不喜欢折腾的千万别勉强</p></blockquote><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><blockquote><p>正文须知:很多软件的发布都是基于海外服务器，国内或有转载的，但是本文基于官网操作。懂科学之力的自然会得心应手。</p></blockquote><h2 id="0-本文所使用的环境"><a href="#0-本文所使用的环境" class="headerlink" title="0.本文所使用的环境"></a>0.本文所使用的环境</h2><ol><li>windows 11</li><li>vscode 1.65.2</li><li>gcc 9.2</li></ol><h2 id="1-vsocde"><a href="#1-vsocde" class="headerlink" title="1.vsocde"></a>1.vsocde</h2><p>首先我们需要进入官网下载一个vsocode，<a href="https://code.visualstudio.com/">戳此处</a>，这里稍微注意下微软在国内的下载速度有点慢，有能力的朋友可以使用科学之力。</p><img src="/2022/03/23/vscode-c-c-configure/000.png" class=""><p>下载完之后打开vscode，默认是英文环境，按图操作：</p><img src="/2022/03/23/vscode-c-c-configure/001.png" class="">点击安装，完成后右下角会提示重启软件以应用设置。<h2 id="2-mingw"><a href="#2-mingw" class="headerlink" title="2.mingw"></a>2.mingw</h2><h3 id="2-1-gcc安装"><a href="#2-1-gcc安装" class="headerlink" title="2.1 gcc安装"></a>2.1 gcc安装</h3><p>然后我们需要下载gcc，因为code本身只作为一个编辑器，编译以及debug的功能还是需要依赖gcc。<a href="https://sourceforge.net/projects/mingw/">戳此处跳转mingw</a>，还是老话这玩意下的比较慢。</p><img src="/2022/03/23/vscode-c-c-configure/003.png" class=""><p>下载完成后打开.exe程序</p><img src="/2022/03/23/vscode-c-c-configure/004.png" class=""><p>点击install，会进入到</p><img src="/2022/03/23/vscode-c-c-configure/005.png" class=""><p>在此处你可以修改下载的路径，全部下载大概需要五百多兆的内存，老电脑如果c盘不够大建议放置其他盘，新电脑则问题不大，看到<img src="/2022/03/23/vscode-c-c-configure/006.png" class="">后等待下载完点击continue</p><img src="/2022/03/23/vscode-c-c-configure/007.png" class="">,然后轮到我们选择需要安装的组件了:<img src="/2022/03/23/vscode-c-c-configure/008.png" class="">,之前百度的其实也不明不白的，所以直接快刀斩乱麻，全都下载，每行右击选择mark for installation之后点击左上角<img src="/2022/03/23/vscode-c-c-configure/009.png" class=""><p>静候安装，完成后找到你所安装的文件夹目录，进入bin目录，往下滑能看到gcc、g++、gdb则表示基本无误</p><img src="/2022/03/23/vscode-c-c-configure/010.png" class=""><h3 id="2-2-添加到path"><a href="#2-2-添加到path" class="headerlink" title="2.2 添加到path"></a>2.2 添加到path</h3><blockquote><p>右击此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/011.png" class=""><blockquote><p>然后找到系统变量里的path打开</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/012.png" class=""><blockquote><p>点击新建，将你mingw安装目录copy进来，记住要带上bin，如图所示</p></blockquote><img src="/2022/03/23/vscode-c-c-configure/013.png" class=""><p>完成后我们打开cmd或powershell进行验证</p><pre><code class="bash">gcc -vg++ -v</code></pre><img src="/2022/03/23/vscode-c-c-configure/014.png" class=""><p>得到如图提示即可</p><blockquote><p>可以的话先重启下电脑，以免vsocde抽风没识别到gcc已经添加到系统环境变量中了。</p></blockquote><p><strong>当然尝鲜的话你可以使用dev c++的gcc使用，只存在版本的差异而已。路径应该是你所安装的盘符&#x2F;dev c++&#x2F;bin目录下。但同时也要注意是否添加入变量环境中！</strong></p><h3 id="2-3-hello-world"><a href="#2-3-hello-world" class="headerlink" title="2.3 hello world"></a>2.3 hello world</h3><p>同样的我们在拓展商店中先下载一个基础从c&#x2F;c++拓展</p><img src="/2022/03/23/vscode-c-c-configure/002.png" class=""><p>建议先创建一个文件夹用来专门存放.c文件</p><img src="/2022/03/23/vscode-c-c-configure/015.png" class=""><p>我们新建一个hello.c文件<img src="/2022/03/23/vscode-c-c-configure/016.png" class=""></p><p>编写第一个程序：</p><pre><code class="c">#include&lt;stdio.h&gt;int main()&#123;    printf(&quot;hello world!\n&quot;);    return 0;&#125;</code></pre><p>f5或者点击运行-&gt;启动调试会弹出一个选择配置</p><img src="/2022/03/23/vscode-c-c-configure/017.png" class=""><p>这里我们直接选择第一个gdb即可，以前用过第二个，但是配置不够完整…..导致程序只能编译运行不能debug，所以也很苦恼，最后将两者结合了一下就差不多行了。</p><img src="/2022/03/23/vscode-c-c-configure/018.png" class=""><p>我们选择gcc.exe之后，我们会发现文件夹下多了一个.vscode，里面有两个文件分别是launch.json和tasks.json。并且都是存在内容的，但是你会发现程序并没有运行，所以直接套用我这里的模板。</p><blockquote><p>需要注意几点就是我的mingw路径是在d盘的，我会在launch.json和tasks.json中指出，希望你能仔细阅读</p></blockquote><pre><code class="json">&#123;    //launch.json    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;gcc.exe - 生成和调试活动文件&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;C:\\Windows\\system32\\cmd.exe&quot;,            &quot;args&quot;: [&quot;/C&quot;,&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,&quot;&amp;&quot;,&quot;pause&quot;],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: true,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;miDebuggerPath&quot;: &quot;D:\\MinGW\\bin\\gdb.exe&quot;,//这里需要修改            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;,                &#123;                    &quot;description&quot;: &quot;将反汇编风格设置为 Intel&quot;,                    &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ],            &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;debug&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,            &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: true,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;miDebuggerPath&quot;: &quot;D:\\MinGW\\bin\\gdb.exe&quot;,    //这里需要修改            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;,                &#123;                    &quot;description&quot;: &quot;将反汇编风格设置为 Intel&quot;,                    &quot;text&quot;: &quot;-gdb-set disassembly-flavor intel&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ],            &quot;preLaunchTask&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;        &#125;    ]&#125;</code></pre><pre><code class="json">&#123;    //tasks.json    &quot;tasks&quot;: [        &#123;            &quot;type&quot;: &quot;cppbuild&quot;,            &quot;label&quot;: &quot;C/C++: gcc.exe 生成活动文件&quot;,            &quot;command&quot;: &quot;D:\\MinGW\\bin\\gcc.exe&quot;,   //这里需要修改            &quot;args&quot;: [                &quot;-fdiagnostics-color=always&quot;,                &quot;-g&quot;,                &quot;$&#123;file&#125;&quot;,                &quot;-o&quot;,                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;            ],            &quot;options&quot;: &#123;                &quot;cwd&quot;: &quot;D:\\MinGW\\bin&quot; //这里需要修改            &#125;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ],            &quot;group&quot;: &#123;                &quot;kind&quot;: &quot;build&quot;,                &quot;isDefault&quot;: true            &#125;,            &quot;detail&quot;: &quot;调试器生成的任务。&quot;        &#125;    ],    &quot;version&quot;: &quot;2.0.0&quot;&#125;</code></pre><blockquote><p>如果是c++的配置，记得将tasks.json的command程序改成g++.exe，至于label和prelaunchtask这两个要是愿意也可以把gcc.exe 改成g++.exe</p></blockquote><p>使用模板之后，我们发现程序成功在cmd跑起来了</p><img src="/2022/03/23/vscode-c-c-configure/019.png" class=""><blockquote><p>因为win11特性，cmd和powershell打开都是通过windows terminal打开的，这样我感觉挺好的</p></blockquote><p>然后我们只需要注意launch配置中多了一块，那个就是我们需要用到的debug部分。如何使用如下：<br>首先创建一个断点，<img src="/2022/03/23/vscode-c-c-configure/020.png" class=""><br>就是鼠标放在语句前面出现红点，鼠标单击即可。</p><img src="/2022/03/23/vscode-c-c-configure/021.png" class=""><p>将任务调至debug</p><img src="/2022/03/23/vscode-c-c-configure/022.png" class=""><p>然后f5启动调试，我们会看到<img src="/2022/03/23/vscode-c-c-configure/023.png" class=""><br>程序停在了print函数中，右边可以看到变量i现在的值为0，cmd也没有输出，我们点击上面<img src="/2022/03/23/vscode-c-c-configure/024.png" class="">也就是单步调试，进行下一步操作的意思，我们会看到箭头跑到了for循环上，cmd也打印了一个0。</p><img src="/2022/03/23/vscode-c-c-configure/025.png" class="">在下一步可以看到i的变量变成了1<img src="/2022/03/23/vscode-c-c-configure/026.png" class=""><blockquote><p>至此，基本的程序运行和debug就解决了<br>要说vscode的缺点肯定是有的，有些很刁钻奇怪的问题他不一定会提示错误，但是就是无法运行，这点在vs 20xx系列上面就能对比出来，不过基本够用了。</p></blockquote><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>当然vscode还有一点不好，其实也是归根在微软身上，windows操作系统有个很不好的点就是系统的编码是根据地区设置来的。</p><p>那么是什么意思呢，就是简单来说，cmd的字符编码是gb2312还是啥来着，也就是在cmd中输入chcp，系统回执是936，而真正的项目开发一般都采用utf-8环境，也就是所说的65001。</p><p>所以你会发现中文，通常在cmd中都会乱码，可能网上有方法是教你文件改成ansi啊，或者gb2312的，但是这些都是治标不治本的，微软还在地区选项中有一个beta模式，可以强制系统编码为65001，但是下场很凄凉，到了别人936的环境中，你的文件所包含的中文全部是乱码的。</p><p>目前看来是没有什么办法能够根治的，因为即便你能永久修改了powershell或者cmd的字符集，但是老的windows软件可能用的还是那套字符，多少会存在差异，这也是为什么有些项目都会放在linux上开发。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在大型项目开发面前，有clion，visual studio 20xx系列的产品存在，但是相对于基础学习，这些大型开发环境的占用和安装流程可能会稍微麻烦点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="vscode" scheme="https://8bytes.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>关于个人博客创建过程</title>
    <link href="https://8bytes.top/2022/03/20/first-blog/"/>
    <id>https://8bytes.top/2022/03/20/first-blog/</id>
    <published>2022-03-20T08:43:58.000Z</published>
    <updated>2022-04-10T09:25:07.746Z</updated>
    
    <content type="html"><![CDATA[<p>其实最基础的博客就跟日记一样，但是写日记这种事情似乎停留在了小学还得是作业的情况下，自初中以后便抛诸脑后。有的时候记录一下一些未知的bug以便日后解决也不失为一种好办法，在了解了一些基础的知识后。找到了由GitHub作为博客的仓库，在本地由hexo+git+node.js为基础实现简易版个人博客</p><hr><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="22-03-26-新增搜索功能"><a href="#22-03-26-新增搜索功能" class="headerlink" title="22.03.26 新增搜索功能"></a>22.03.26 新增搜索功能</h3><h3 id="22-03-26-新增域名绑定"><a href="#22-03-26-新增域名绑定" class="headerlink" title="22.03.26 新增域名绑定"></a>22.03.26 新增域名绑定</h3><h3 id="22-03-27-新增评论功能"><a href="#22-03-27-新增评论功能" class="headerlink" title="22.03.27 新增评论功能"></a>22.03.27 新增评论功能</h3><h3 id="22-03-29-修改评论系统"><a href="#22-03-29-修改评论系统" class="headerlink" title="22.03.29 修改评论系统"></a>22.03.29 修改评论系统</h3><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ul><li>GitHub账号</li><li>windows 11</li><li>git          —<a href="https://git-scm.com/">https://git-scm.com/</a></li><li>node.js      —<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li></ul></blockquote><p><strong>建议先下载git工具，下载完后先注销或者重启，不然可能出现git bash无法检索到nodejs的命令。</strong><br>然后打开git bash，bash是linux终端所使用的一种，如果你对linux有一定基础相信不用多做解释，没基础也没事，基础命令都可以通过tab补齐或者copy</p><p>不放心不确定的童鞋可以在<code>git bash</code>中输入</p><pre><code class="bash">$ git --version#和$ node -v</code></pre><p>正常回显版本则表示安装正确</p><p>然后安装hexo</p><pre><code class="bash">$ npm install hexo -g</code></pre><p>安装完后测试:</p><pre><code class="bash">$ hexo -v #有正常输出且看到hexo即可</code></pre><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>进入<a href="https://github.com/">github</a></p><img src="/2022/03/20/first-blog/0.png" class=""><p>创建一个新的仓库，仓库名为你的<strong>github用户名.github.io</strong></p><blockquote><p>例如用户名为test，则仓库名为test.github.io</p></blockquote><img src="/2022/03/20/first-blog/001.png" class=""><blockquote><p>此处报错是因为我已经创建过了，可以忽略</p></blockquote><p>需要注意的是：</p><blockquote><ol><li>切记是用户名而不是昵称，昵称可以随便改，用户名则是固定防止冲突的。</li><li>其次就是github访问速度正常都会比较慢，所以创建好后也别着急，可能需要等一会</li><li>最后就是因为这个仓库是以用户名为根本，所以可见每个用户只能创建一个这样的仓库</li></ol></blockquote><p>创建成功后先不用管，等会通过hexo上传仓库</p><hr><h2 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2.配置ssh key"></a>2.配置ssh key</h2><p><strong>配置ssh key的目的是为了每次上传时不需要输入账号和密码</strong><br>在<code>git bash</code>中:</p><pre><code class="bash">$ cd ~/.ssh</code></pre><p><strong>error:no such file or directory表示这台电脑是一次使用git</strong></p><p>输入</p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></pre><p>连续三次回车，会在用户目录下生成一个.ssh文件夹，打开文件夹里面会有一个id_rsa.pub文件<br>看不到.ssh的童鞋可能是没有打开显示隐藏文件夹</p><img src="/2022/03/20/first-blog/003.png" class=""><p>用记事本打开id_rsa.pub文件，将其内容复制粘贴到github主页的ssh and gpg keys里</p><img src="/2022/03/20/first-blog/004.png" class=""><p>点击new ssh key，tiele随便起，内容粘贴到key里面，最后点击add ssh key</p><p>测试是否成功:</p><pre><code class="bash">$ ssh -T git@github.com # 注意邮箱地址不用改</code></pre><p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</p><blockquote><p>Hi 你的用户名! You’ve successfully authenticated, but GitHub does not provide shell access.<br>到这里表示ssh配置成功</p></blockquote><p>然后我们添加github用户名和注册邮箱即</p><pre><code class="bash">$ git config --global user.name &quot;username&quot; #你的github用户名$ git config --global user.email &quot;xxx@qq.com&quot; #填写你的github注册邮箱,qq,网易都一样</code></pre><hr><h2 id="3-搭建博客"><a href="#3-搭建博客" class="headerlink" title="3.搭建博客"></a>3.搭建博客</h2><p>再次之前先介绍hexo基本命令</p><pre><code class="bash">$ hexo new &quot;postName&quot; #新建文章$ hexo new page &quot;pageName&quot; #新建页面$ hexo generate #生成静态页面至public目录$ hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）$ hexo deploy #部署到GitHub$ hexo help  # 查看帮助$ hexo version  #查看Hexo的版本</code></pre><p>实际上我们常用的就几条:</p><pre><code class="bash">$ hexo clean #generate其实也会覆盖public文件夹，所以clean用不用都差不多$ hexo generate &gt;&gt; 缩写为 $ hexo g$ hexo server &gt;&gt; 缩写为 $ hexo s$ hexo deploy &gt;&gt; 缩写为 $ hexo d</code></pre><blockquote><p>然后选择博客放到那个文件夹，c盘d盘都可以<br>用<code>git bash</code><br>cd filename进去就行</p></blockquote><pre><code class="bash">$ pwd #查看当前所在目录,一般就是在c/users/xxx，直接在里面创建也行$ cd /d #表示切换到d盘，e盘同理$ mkdir blog #文件名无所谓，都行，此处以blog为例$ cd blog$ hexo init #初始化博客</code></pre><p>文件夹里面会出现很多内容</p><pre><code class="bash">$ hexo g #生成静态文件至public文件夹$ hexo s #预览博客</code></pre><p>浏览器url里面输入<code>localhost:4000</code>即可在浏览器中预览，如果4000端口被占用了可以尝试用其他端口</p><p>默认的主题就在&#x2F;thems 文件夹中，叫landscape，比较简单吧。</p><hr><h2 id="4-修改主题"><a href="#4-修改主题" class="headerlink" title="4.修改主题"></a>4.修改主题</h2><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 这是官方主题网址，总的来讲数量不多，如果修改需要一定知识储备，或者作者开源有附上教程</p><p>我这里用的主题是：<a href="https://github.com/lh1me/hexo-theme-aomori">https://github.com/lh1me/hexo-theme-aomori</a><br>预览：<a href="https://linhong.me/">https://linhong.me/</a></p><p>界面比较简洁，功能添加也比较方便</p><p>下载有两种方式</p><ol><li>就是git clone 仓库的https链接<br>git clone <a href="https://github.com/lh1me/hexo-theme-aomori.git">https://github.com/lh1me/hexo-theme-aomori.git</a> thems&#x2F;aomori</li><li>或者直接下载作者打包好的文件,作者主题网站置顶中有写</li></ol><p>二者的差别就是clone的会有.git的一些信息，具体用处不知道</p><p>下载完之后我们在blog文件夹中找到<code>_config.yml</code><br>划到最下面看到</p><blockquote><p>themes: landscape</p></blockquote><p>修改后面的内容，如果你是参照我第一种下载方式，那么因为我创建的文件夹名称为aomori，所以此处也使用aomori，如果是第二种方法下载zip压缩包解压，那么根据对应的文件夹为hexo-theme-aomori，切记不要弄错</p><p>原作者在后面标准了关掉hexo默认的highlight代码高亮，那么使用这个主题也就去关了<br>在<code>_config.yml</code>文件中找到</p><pre><code class="bash">highlight:  enable: false</code></pre><p>将其修改为false</p><p>然后在<code>git bash</code>中清除静态文件夹重新生成并预览</p><pre><code class="bash">$ hexo clean$ hexo g$ hexo s</code></pre><blockquote><p>如果没有生成index.html 则可能是你删除了source文件夹中的hello-world.md文件<br>要么重新hexo init，或者直接hexo n 一个新的文件写博客，在hexo g生成，hexo s预览</p></blockquote><p>至此本地上已经没有什么问题了</p><hr><h2 id="5-上传仓库"><a href="#5-上传仓库" class="headerlink" title="5.上传仓库"></a>5.上传仓库</h2><p>还是<code>_config.yml</code>文件中，最后片段关于deploy的部分。</p><p>正确写法：</p><pre><code class="bash">deploy:  type: git  repository: git@github.com:8bytes-code/8bytes-code.github.io.git  branch: main</code></pre><p>错误写法：</p><pre><code class="bash">deploy:  type: git  repository: https://github.com/8bytes-code/8bytes-code.github.io.git  branch: main</code></pre><blockquote><p>还有一点需要注意：branch，按照我的方法分支就是main，如果你的分支是master，那么branch就修改成master。</p></blockquote><p>具体如图</p><img src="/2022/03/20/first-blog/005.jpg" class=""><p>然后我们直接执行<code>hexo d</code>的时候应该是会报错的：</p><pre><code class="bash">Deployer not found: github 或者 Deployer not found: git</code></pre><p>就是少了个插件安装一下就行了</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><p>然后我们在<code>hexo d</code>提交代码，有改动会跑一段挺长的，没改动就没啥变化，结尾就是info deploy done：git</p><p><strong>hexo d是覆盖操作，所以仓库的代码每次都会被覆盖，如果有需要自己找个地方保存一下，能力强的或许还有git clone仓库下来，然后每次提交形成分支</strong></p><hr><h2 id="6-注意的地方"><a href="#6-注意的地方" class="headerlink" title="6.注意的地方"></a>6.注意的地方</h2><h3 id="1-hexo-n-一个文件的时候"><a href="#1-hexo-n-一个文件的时候" class="headerlink" title="1.hexo n 一个文件的时候"></a>1.hexo n 一个文件的时候</h3><p>其中</p><pre><code class="bash">---title: name #文章显示的名称date:       #默认根据创建的时候生成，一般不做修改tags:       #文章标签，如果所用主题有文章分类功能，可以为其添加---下面才是写正文的地方如果需要设置文章不显示全部内容，使用 &lt;!--more--&gt;的时候注意上下都空两行，否则可能不起效果，具体原因未知，有的时候好像不会被占用，好像会和上下文字所使用的标题什么的有影响保险起见多空几行的了</code></pre><h3 id="2-图片的设置"><a href="#2-图片的设置" class="headerlink" title="2.图片的设置"></a>2.图片的设置</h3><img src="/2022/03/20/first-blog/005.png" class=""><p>在首页中文章所示图片是根据作者文档中描述的属性</p><img src="/2022/03/20/first-blog/006.png" class=""><blockquote><p>即添加在.md文件的头部— xxxx —之中<br>至于路径设置我是在source文件夹下新建了一个images文件夹，然后设置</p></blockquote><img src="/2022/03/20/first-blog/007.png" class=""><p>至于文章中的图片，以后如果文章写的多了，图片都在一个文件夹不利于管理，而且命名也麻烦<br>于是参考官方文档<a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></p><img src="/2022/03/20/first-blog/008.png" class=""><p>修改<code>_config.yml</code>的post_asset_folder属性之后，hexo n 一个新的文件都会附带一个一样名称的文件夹，我们把那篇文章需要用到的图片放到文件夹里即可，引用方法也如标红所示:</p><pre><code class="bash">&#123;%asset_img filename.jpg/png  %&#125;</code></pre><p>当然markdown的原生引用图片方法也没问题，但是图片存放路径都是建议放在<code>source</code>目录下<br>使用的时候也是通过</p><pre><code>![描述](./source/)建议还是相对路径</code></pre><blockquote><p>后面的描述可有可无</p></blockquote><p>最后就是作者写的教程：<a href="https://aomori.linhong.me/v/chinese/getting-started/intro">https://aomori.linhong.me/v/chinese/getting-started/intro</a><br>自己在慢慢做调整吧，开源是美德，但没有义务一直帮你，大家慢慢凭借文档修改吧。</p><blockquote><p>遇到bug可以上github提交issues。</p></blockquote><h3 id="3-README-md"><a href="#3-README-md" class="headerlink" title="3.README.md"></a>3.README.md</h3><p>默认情况下，hexo会把source里面的所有.md类型文件都转换成.html类型，所以导致仓库的README.md文件显得很蛋疼，解决方法在<code>_config.yml</code>下找到并修改即可：</p><pre><code class="bash">skip_render: README.md</code></pre><p>还有就是，关于为什么README.md下图片不能显示的问题，估计看了下，存储资源的地址是在<code>raw.githubusercontent.com</code>下，而这个域名恰好有个问题就是dns污染，导致资源不一定会被正确访问，即使你通过修改本机hosts文件去指定，但是访问速度还是太慢了，所以办法就是要么视而不见，要么上科学道具去访问就能看到了。</p><hr><h2 id="7-新增搜索功能"><a href="#7-新增搜索功能" class="headerlink" title="7.新增搜索功能"></a>7.新增搜索功能</h2><img src="/2022/03/20/first-blog/009.png" class=""><p>如文档所示，先访问<a href="https://www.algolia.com/">Algolia</a>, 创建账号或者使用github登录</p><img src="/2022/03/20/first-blog/018.png" class=""><blockquote><p>这里弄得太快忘了，如果你的index没有，那么就new一个，名字后面会用到</p></blockquote><p>然后点击settings,点击api keys,new一个 api key，indices选之前新建的index名字，acl权限就按照我这个几个先给了</p><img src="/2022/03/20/first-blog/017.png" class=""><p>你还需要在<code>git bash</code>安装这个拓展</p><pre><code class="bash">$ npm install --save hexo-algolia</code></pre><p>并且在全局配置文件<code>_config.yml</code>下填入配置，这些都是在api keys的your api keys里面套</p><pre><code class="bash">algolia:  applicationID: &#39;applicationID&#39;  apiKey: &#39;apiKey&#39;  indexName: &#39;...&#39;</code></pre><p>然后在<code>git bash</code>下输入命令</p><pre><code class="bash">$ export HEXO_ALGOLIA_INDEXING_KEY=#这个key就是刚才创建的api的key，默认的就一个搜索功能在使用hexo algolia是会报下面的错#ERROR [hexo-algolia] Not enough rights to update an object near line:1 column:785$ hexo clean$ hexo algolia</code></pre><p>成功会返回<img src="/2022/03/20/first-blog/019.png" class=""></p><p>最后在站点启用搜索功能</p><pre><code class="bash">aomori_search_algolia: true</code></pre><p><strong>注意：以后发布文章都需要运行hexo algolia，否则新文章没有创建记录，无法被检索</strong></p><blockquote><p>ERROR [hexo-algolia] Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing.<br>ERROR &gt;&gt; Read <a href="https://npmjs.com/hexo-algolia#api-key">https://npmjs.com/hexo-algolia#api-key</a> for more informations.<br>后续如果使用hexo algolia报此错误，那么请重新输入上面export HEXO_ALGOLIA_INDEXING_KEY，具体原因出在哪不知道，好像隔段时间就没记忆了，所以建议你将自建权限的key以注释的方法存在_config.yml下，以方便后期重新更新使用。</p></blockquote><p><strong>注意</strong></p><p>如果搜索跳转时网址显示<code>http://example.com</code>开头，在algolia记录里可以看到：<img src="/2022/03/20/first-blog/023.png" class=""><br>那么请注意你的<code>_config.yml</code>配置中找到<img src="/2022/03/20/first-blog/024.png" class=""><br>将url修改为你github page的地址，或者你购买了域名就改成域名，上述注释是清楚描述了这个问题。<br>修改完之后在<code>git bash</code>执行hexo algolia重新生成即可。</p><hr><h2 id="8-新增域名绑定"><a href="#8-新增域名绑定" class="headerlink" title="8.新增域名绑定"></a>8.新增域名绑定</h2><p><strong>不是打广告</strong>，阿里云和腾讯云都行，万网好像是被阿里收购了，所以都差不多，目前购买域名需要实名认证，不要打马虎眼。</p><p>此处以阿里云举例：<a href="https://wanwang.aliyun.com/domain?spm=5176.21213303.J_6704733920.9.300953c9w7wqdp&scm=20140722.S_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@999997._.ID_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@999997-RL_%E5%9F%9F%E5%90%8D-LOC_main-OR_ser-V_2-P0_1">戳此处</a></p><img src="/2022/03/20/first-blog/010.png" class=""><p>首先搜索你需要的域名，此处以hhh为例，点击查询可以看到</p><img src="/2022/03/20/first-blog/011.png" class=""><p>大概是简短或者商用价值比较高的域名价格都比较贵，其次按照域名的等级<br>买家可以买一年也可以一次性买十年，这个都随便，至于检索速度还是要看各搜索引擎了。我买的是.top的</p><p>买完之后去工作台，找到域名服务，管理你的域名;<strong>刚买完需要审核1-2日，但是实际上还是比较快的用不了几分钟</strong></p><img src="/2022/03/20/first-blog/012.png" class=""><p>你进去的页面可能是在审核中，但是没关系，我们点击后面的解析，他会跳转到一个页面</p><img src="/2022/03/20/first-blog/013.png" class=""><p>在此处我们需要添加两条记录，这个其实相当于dns的解析，如果学过一点的会知道，dns有正向和逆向的，说白了就是从域名翻译成服务器ip地址，从服务器ip地址翻译成域名这两条记录</p><blockquote><p>此处需要注意ip地址可能要添加两条记录，一条ipv4和一条ipv6</p></blockquote><p>如何查看IP地址，win+r 输入cmd 回车，当然<strong>ping 你用户名.github.io</strong>是最简单的，但是现在可能返回的都是ipv6了<br>或者直接github看文档吧<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">戳此处</a></p><p><del>划到第五步，此处我不确定提示的ip是每个人都相同还是不相同就先打码了</del><br><del>虽然感觉应该是一样的，毕竟github总不能你建一个仓库他单独给你一个ip地址，ipv4早用光了</del></p><img src="/2022/03/20/first-blog/014.png" class=""><blockquote><p>按照第五步显示的两块ip，各取相同一行的一条记录，添加到域名解析里面的记录值</p></blockquote><img src="/2022/03/20/first-blog/015.png" class=""><blockquote><p>a对应ipv4，aaaa对应ipv6。且这两条主机记录为@。地址再次强调就是第五步显示的<br>用户名.github.io 那条的主机类型为www，记录类型为CNAME。</p></blockquote><p>然后进入你github博客仓库，找到设置，找到pages，将域名填入custom domain之中，看他是否打勾</p><img src="/2022/03/20/first-blog/016.png" class=""><p>此处他还会花一点时间安装tsl证书还是啥，估摸着应该是和ssl证书差不多的东西吧，因为https是在http基础上增加了ssl证书获得一个加密性。等待一段时间即可，至于下面的强制https，开不开都行，https自然是会安全一点的。</p><p>然后在博客文件夹目录下的<code>source</code>下，新建一个CNAME的文件，记住没有拓展名，打开后输入你买的域名，不需要加https，就单纯的域名.com啥的</p><p>完成后，在浏览器url中输入你的域名，即可跳转到个人博客！</p><blockquote><p>然后就是印证猜想了，通过百度了几个人用github搭建的博客绑定域名过程中我看到他们ping的结果都是跟文档里的那几个一样的。<br>所以我们在url里面输入ping测试返回的ip地址是不会跳转到我们的博客的，但是用户名.github.io会跳转。至于为什么还要增加我就不清楚了，本文重在使用。</p></blockquote><hr><h2 id="9-新增评论功能"><a href="#9-新增评论功能" class="headerlink" title="9.新增评论功能"></a>9.新增评论功能</h2><p>看了下作者主题用的是remark42，那么也就去摸索一下remark42，但是看了下好像需要后端服务器或者通过docker跑，这倒是感觉不太适合我这种单纯建在github的用户，或者是我哪里看漏了。<br>gitalk和giscus好像都是基于github的issue开发的，好处就是直接调用仓库的评论，缺点是开<br>项目不确定什么时候就倒台了或者出现大范围更新，导入导出都不方便。<br>围观了几圈之后，就选了作者支持的<code>Valine</code>,使用方法也有<a href="https://valine.js.org/">官方文档</a><br>好处是什么呢，就是我们无需在网页中增加js代码，只需要在<code>_config.yml</code>中增加：</p><pre><code>aomori_valine:  enable: true  appId: &#39;&#39;  appKey: &#39;&#39;</code></pre><img src="/2022/03/20/first-blog/020.png" class=""><p>根据提示我们先去注册一个<code>LeanCloud</code>国际版,<a href="https://console.leancloud.app/">戳此处</a></p><blockquote><p>需要实名认证，短信验证，邮箱验证</p></blockquote><p>进入之后我们创建一个应用，名称和描述随便。选择开发版就行了。<img src="/2022/03/20/first-blog/021.png" class=""><br>找到我们的appid和appkey，将其复制到我们刚才在<code>_config.yml</code>中的那两行即可。<img src="/2022/03/20/first-blog/022.png" class=""></p><p>后面的配置不用管。</p><hr><h2 id="10-评论系统修改waline"><a href="#10-评论系统修改waline" class="headerlink" title="10.评论系统修改waline"></a>10.评论系统修改waline</h2><p>因为感觉到valine有点原始，但是胜在配置简单，作者也对其写好了功能，只需要填入id和key即可，但是我个人搜了一下，valine还是存在一些缺点的——具体百度都搜得到不细说了，加上remark42是需要部署在私人服务器上的，我博客都是搭建在github所以更没机会弄。<br>至于步骤不方便教，因为是我自己瞎改的，所以会在所有博客下显示，原本的评论开关就没用了。不符合主题原意，有需要还是等原作者更新吧。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><del>花了点时间自己做了下调整，有空去把评论功能加上，毕竟比较骚气。</del><br><del>还有就是域名绑定问题，暂时没这个钱，都是通过username.github.io访问的，github都知道会被墙，响应速度不好说。如果你担心这个问题，可以去百度用gitee搭建的博客，码云是国内的服务器，响应会比github快点。</del></p><p>上述操作均为自己尝试过的，不同环境可能会产生差异，欢迎评论交流。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实最基础的博客就跟日记一样，但是写日记这种事情似乎停留在了小学还得是作业的情况下，自初中以后便抛诸脑后。有的时候记录一下一些未知的bug以便日后解决也不失为一种好办法，在了解了一些基础的知识后。找到了由GitHub作为博客的仓库，在本地由hexo+git+node.js为基础实现简易版个人博客&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://8bytes.top/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-终端改zsh使用powerlevel10k</title>
    <link href="https://8bytes.top/2021/07/07/ubuntu-terminal/"/>
    <id>https://8bytes.top/2021/07/07/ubuntu-terminal/</id>
    <published>2021-07-07T14:22:23.000Z</published>
    <updated>2022-04-10T11:43:12.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章是描写对与terminal中对zsh的美化插件过程,适用于ubuntu18.04、20.04，均为自己试验过。</p><hr><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-zsh-x2F-ohmyzsh"><a href="#1-zsh-x2F-ohmyzsh" class="headerlink" title="1. zsh&#x2F;ohmyzsh"></a>1. zsh&#x2F;ohmyzsh</h2><p>首先打开terminal，安装<code>zsh</code></p><pre><code class="bash">$ sudo apt install zsh  #18.04以后apt可以不带-get了</code></pre><p>然后你可以先切换到zsh或者直接安装ohmyzsh作为基础都行，因为安装了ohmyzsh之后默认会改成zsh</p><pre><code class="bash">#curl$ sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;#wget$ sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></pre><p>上述两者为常用项，没有安装可以<code>apt install</code>安装一下。<br>然后就碰到了一个问题，由于<code>raw.githubusercontent.com</code>存在dns污染，很有可能找不到目标。<br>故此我们通过<a href="https://www.ipaddress.com/">ipaddress</a>,输入域名，获取到返回的四个ip。</p><blockquote><p>没记错的话是四个</p></blockquote><p>此处就直接列出来了</p><pre><code>185.199.108.133 raw.githubusercontent.com185.199.109.133 raw.githubusercontent.com185.199.110.133 raw.githubusercontent.com185.199.111.133 raw.githubusercontent.com</code></pre><p>将其写入hosts文件，Linux下路径为<code>/etc/hosts</code>:</p><pre><code class="bash">$ sudo vim /etc/hosts#如果没有vim，请先apt install vim使用</code></pre><p>修改完之后重复之前的命令，能够正确下载并执行即可。到底终端已经变成ohmyzsh为主题，如果没有可以尝试注销或重启。</p><hr><h2 id="2-powerlevel10k"><a href="#2-powerlevel10k" class="headerlink" title="2. powerlevel10k"></a>2. powerlevel10k</h2><p>然后是比较花里胡哨的主题<code>powerlevle10k</code><br>默认情况下terminal是不支持花里胡哨的字体的，有科学道具的可以上github访问<a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k">powerlevel10k</a>,找到font那块，去下载一个完整的字体包。没有条件的可以先安装一个简单：</p><pre><code class="bash">$ sudo apt install fonts-powerline</code></pre><p>然后根据步骤下面<code>git clone</code>文件，没有安装的也先apt install git。</p><pre><code class="bash">$ git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k$ echo &#39;source ~/powerlevel10k/powerlevel10k.zsh-theme&#39; &gt;&gt;~/.zshrc#此处copy的国内gitee，会快很多$ git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</code></pre><blockquote><p>到此基本没啥问题了，在选择p10k的主题时注意选择unicode编码，不然无法显示特殊字体</p></blockquote><hr><h2 id="3-插件"><a href="#3-插件" class="headerlink" title="3.插件"></a>3.插件</h2><p>个人觉得这个插件用处还是挺大的，功能就是会记忆以前输过的指令，以灰色字样，你可以tab快速对齐。</p><pre><code class="bash">$ git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></pre><p>将文件下载到ohmyzsh目录下后，需修改<code>~/.zshrc</code>已启用。</p><pre><code class="bash">#编辑~/.zshrc   $ vim ~/.zshrc   #-------------------------------------# 在plugins后括号里添加安装的插件名字plugins=( git           zsh-autosuggestions             )# :wq保存并退出# 最后刷新$ source ~/.zshrc  </code></pre><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>按照步骤正常一般无问题，如果zsh先装了p10k再装ohmyzsh的话，可能默认的插件功能会没下过来<br>原文是我在csdn上写的，因为自己开博客了搬回来用。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文章是描写对与terminal中对zsh的美化插件过程,适用于ubuntu18.04、20.04，均为自己试验过。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="ubuntu" scheme="https://8bytes.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>数据结构c语言</title>
    <link href="https://8bytes.top/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/"/>
    <id>https://8bytes.top/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/</id>
    <published>2021-03-30T06:29:10.000Z</published>
    <updated>2022-04-05T13:45:31.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>青岛大学 王卓老师的数据结构和算法基础</li></ul><hr><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数学底子一般，可能没有这么灵性的想法。<br>文章会存在照抄ppt的形式，理解情况可写可不写，毕竟有些东西能解释就行不需要全背。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容:"></a>课程内容:</h2><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/000.png" class="" title="课程内容"><hr><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>问题分析就是能够将具体问题抽象成一个数学模型，从而分化，提取出可以操作的对象，找到对象之间的关联性，最后用数学语言去表达，用计算机语言编程调试。</p><p>最早的计算机通常用于数值计算，现代计算机则越来越多的用于非数值的计算。</p><p>比如：学生信息管理系统，好比一个数据库，对象是学生的各种信息，你能使用的操作算法就是增删查改。对象之间的信息一环接一环，类似于线性结构。——表</p><p>又比如：围棋对弈，高手通常能往后推很多步，每落一子，对手的变化也是有很多种，像这种有点类似树根盘根错节的结构就类似于树形结构，或非线性结构。类似的还有文件系统，一个文件只有一个父目录，但是会有同级目录和子级目录，如此散开。——树</p><p>同样的，根据地图导航，建筑成了节点，建筑之间的路成了连接节点之间的线，最短路径由节点之间的线相加比较之后得出，像这样的结构成为网状结构。——图</p><blockquote><p>这些问题的共性是无法直接用数学公式描述，而是具有一定逻辑关系的数据处理</p></blockquote><hr><h2 id="数据、元素、项、对象"><a href="#数据、元素、项、对象" class="headerlink" title="数据、元素、项、对象"></a>数据、元素、项、对象</h2><ul><li>数据（Data）</li><li>数据元素（Data Element）</li><li>数据项（Data Item）</li><li>数据对象（Data Object）</li></ul><hr><h3 id="数据（Data）"><a href="#数据（Data）" class="headerlink" title="数据（Data）"></a>数据（Data）</h3><p>数据是指能够输入计算机且被计算机处理的集合。</p><ul><li>数值型</li><li>非数值型（影音媒体等）</li></ul><h3 id="数据元素（Data-Element）"><a href="#数据元素（Data-Element）" class="headerlink" title="数据元素（Data Element）"></a>数据元素（Data Element）</h3><p>数据类型是指一些联系比较紧密的数据，通常使用时会作为一个整体处理。</p><ul><li>是数据的基本单位</li><li>也可以简称元素、记录、结点、顶点</li><li>可以由若干数据项组成</li></ul><p>例如学生表：</p><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">性别</th><th align="center">出生日期</th><th align="center">政治面貌</th></tr></thead><tbody><tr><td align="center">000001</td><td align="center">张三</td><td align="center">男</td><td align="center">19860902</td><td align="center">群众</td></tr><tr><td align="center">000002</td><td align="center">李四</td><td align="center">女</td><td align="center">19851225</td><td align="center">团员</td></tr></tbody></table><h3 id="数据项（Data-Item）"><a href="#数据项（Data-Item）" class="headerlink" title="数据项（Data Item）"></a>数据项（Data Item）</h3><ul><li>构成数据元素的不可分割的最小单位</li></ul><p>前者对象关系：数据 &gt; 数据元素 &gt; 数据项<br>例如：学生表 &gt; 个人纪录 &gt; 学号、姓名……</p><h3 id="数据对象（Data-Object）"><a href="#数据对象（Data-Object）" class="headerlink" title="数据对象（Data Object）"></a>数据对象（Data Object）</h3><ul><li>是性质相同的数据元素的集合，是数据的一个子集。</li></ul><p>例如:<br>整数对象集合N&#x3D;{0,1,2,3….}<br>字符对象集合C&#x3D;{‘A’,’B’,’C’……}</p><h3 id="数据元素和数据对象"><a href="#数据元素和数据对象" class="headerlink" title="数据元素和数据对象"></a>数据元素和数据对象</h3><p>可以把数据元素看作表格里的行，行内标签代表了不同的属性；而数据对象可以看做表格里的列，它代表这个类型的所有数据。</p><hr><h2 id="数据结构（Data-Structure）"><a href="#数据结构（Data-Structure）" class="headerlink" title="数据结构（Data Structure）"></a>数据结构（Data Structure）</h2><ul><li><p>数据结构</p><ul><li>数据元素不是孤立存在，它们之间存在某种关系，而这些数据元素之间的关系成为结构（Structure）</li><li>指数据相互之间存在一种或多种特定关系</li></ul></li><li><p>数据结构包括三个方面</p><ol><li>数据元素之间的逻辑关系，也称<code>逻辑结构</code></li><li>数据元素及其关系在计算机内存中的表示（又称为映像），被称为数据的<code>物理结构</code>或者数据的<code>存储结构</code> </li><li>数据的运算和实现，及对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现</li></ol></li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>用以描述数据元素之间的逻辑关系</li><li>与数据的存储无关，独立于计算机</li><li>是抽象出来的数学模型</li></ul><h3 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h3><ul><li>数据元素及其关系在计算机存储器中的结构</li><li>是数据结构在计算机中的表示</li></ul><hr><h3 id="两者的关系"><a href="#两者的关系" class="headerlink" title="两者的关系"></a>两者的关系</h3><ul><li>存储结构是逻辑关系的映像与元素本身的映像——元素存在逻辑关系但不一定按照逻辑关系存储在内存上</li><li>逻辑结构是数据结构的抽象，存储结构是数据结构的实现——在已有数据结构上找到一种或多种特定规律可以当作逻辑结构，但实际上该怎么存储到内存上就怎么存储上去</li><li>两者综合起来建立了数据元素之间的结构关系</li></ul><blockquote><p>比如1abc2345fiojsg09890<br>在存储结构上就按照先后顺序正常写入<br>逻辑上，数字类型可以有关联，字符类型可以有关联</p></blockquote><hr><h3 id="逻辑结构的种类"><a href="#逻辑结构的种类" class="headerlink" title="逻辑结构的种类"></a>逻辑结构的种类</h3><ol><li>线性结构<br>有且只有一个开始和一个终端节点，规律为直接前驱或直接后继。<br>例如：线性表、栈、队列、串，说人话就跟糖葫芦一样，开头和结尾都只有一个，按照顺序直线排序</li><li>非线性结构<br> 一个节点可能有多个直接前驱和直接后继<br> 例如：树、图，说人话就是一个节点规律一点散开就跟树根一样，图相对更绕</li></ol><p>另一种按照四类基本逻辑结构划分：</p><ol><li>集合结构——元素除了同属于一个集合不存在额外的关系</li><li>线性结构——数据元素参照一对一的线性关系</li><li>树形结构——数据元素参照一对多的层次关系</li><li>图状或网状结构——数据元素存在多对多的任意关系</li></ol><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/001.png" class=""><hr><h3 id="存储结构的种类"><a href="#存储结构的种类" class="headerlink" title="存储结构的种类"></a>存储结构的种类</h3><ul><li>顺序存储</li><li>链式存储</li><li>索引存储</li><li>散列存储</li></ul><hr><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p>c语言中用数组实现，有C语言基础的就不用额外说明了</p><ul><li>线性</li><li>连续</li></ul><hr><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p>C语言中用指针实现</p><ul><li>线性</li><li>非连续</li></ul><blockquote><p>可以用链表的思维,数据除了自身存储地址之外还保留下一个元素的地址</p></blockquote><hr><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>在存储节点信息的同时，还额外建立了一个附加的<code>索引表</code>。<br>以通讯录为例，手机联系人默认都是按照备注的字母顺序排序，本身既包含联系人姓名电话住址信息，又有排序的索引表</p><hr><h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><ul><li>根据节点的关键字直接计算出节点的存储地址</li></ul><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/002.png" class=""><blockquote><p>这个有点抽象，以往好像没有什么类似例子，后续看有没有额外说明</p></blockquote><hr><h2 id="数据类型和抽象的数据类型"><a href="#数据类型和抽象的数据类型" class="headerlink" title="数据类型和抽象的数据类型"></a>数据类型和抽象的数据类型</h2><p>在讲数据类型之前，我认为有必要说明一下强语言和弱语言的区别。<br>强语言如c&#x2F;c++…他们的共性就是数据类型是必须严格指定的，而弱语言如php、JavaScript等，他们声明变量时，没有特别指定变量的数据类型。</p><pre><code class="c">//C语言int a = 10; //因为是整型只能是赋值整型数值</code></pre><pre><code class="php">//php$a = &quot;xxxx&quot;; //而弱语言不强硬指定，所以变量会根据用户赋予的初值调整</code></pre><blockquote><p>另外,“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的!” 安全问题的本身不是语言，而是使用者。</p></blockquote><p>C语言常用的基本数据类型有int、char、float、double，数组、结构体，枚举等构造数据类型，指针和void另说。最后就是typedef自定义数据类型。</p><p>数据类型的作用：</p><ol><li>约束变量或常量的取值范围</li><li>约束变量或者常量的操作，像%运算只有整型可以用</li></ol><p>至于抽象数据类型（Abstract Data Type），老师用圆做例子，圆形是本质，而从中找出圆点，画出半径，这样就可以用数据去描述一个圆了，所以圆心和半径就是抽象出来的。</p><blockquote><p>抽象就是抽象。。。</p></blockquote><h3 id="抽象数据类型的形式定义："><a href="#抽象数据类型的形式定义：" class="headerlink" title="抽象数据类型的形式定义："></a>抽象数据类型的形式定义：</h3><ul><li>D-数据对象</li><li>S-D上的关系集</li><li>P-是对D的基本操作集</li></ul><pre><code class="txt">//伪代码ADT name&#123;    数据对象:&lt;对象的定义&gt;    数据关系:&lt;关系的定义&gt;    基本操作:&lt;操作的定义&gt;&#125;ADT name</code></pre><blockquote><p>视频中介绍的参数表、初始条件、操作结果这些就跟正常编程一样，自定义函数，初始化变量，调用执行调试。这个就还能大概感觉到一点</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/003.png" class=""><p>这个就跟高级语言的面向对象思想很像了</p><pre><code class="cpp">#define PI 3.14class circle&#123;    public:        int R;        circle(int r)&#123;            R = r;        &#125;        double mj()&#123;            return R*R*PI;        &#125;        double zc()&#123;            return 2*R*PI;        &#125;&#125;</code></pre><p>这里就随便举个例子。构建一个类，内置zc，mj方法。传个参数半径就行。当然c语言因为是面向过程的，你说struct结构体肯定是搞不了这个了。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/004.png" class=""><blockquote><p>预测的结果和老师写的差不多，如果你有一点面向对象的基础，那么这个还是很好理解的</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/005.png" class=""><blockquote><p>虽然老师用的是类c方式，但是这种写法和面向对象思想比较还是能看得出来的</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/006.png" class=""><p>复合类型使用<code>typedef</code>定义，方法通过自定义函数实现。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/007.png" class=""><h3 id="用了一个新的例子："><a href="#用了一个新的例子：" class="headerlink" title="用了一个新的例子："></a>用了一个新的例子：</h3><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/008.png" class=""><blockquote><p>add是加法运算，multiple是算法。需要注意的是divide是安全除法，因为普通除法分母为0会报错</p></blockquote><hr><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><strong>算法的定义：</strong></p><ul><li>对特定问题的<strong>求解方法和步骤</strong>的一种描述，它是指令的有限序列，其中每一个指令表示一个或多个操作。</li></ul><p><strong>算法的描述：</strong></p><ul><li>自然语言：中文，英语…</li><li>流程图：传统流程图、NS流程图</li><li>伪代码：类语言：类C语言</li><li>程序代码：c、c++、java…</li></ul><p><strong>算法和程序：</strong></p><ul><li>算法是解决问题的一种方法或一个过程，考虑如何由输入转为输出，一个问题可以有多种算法</li><li>程序是某种程序设计语言对算法的具体实现</li></ul><blockquote><p>程序 &#x3D; 数据结构 + 算法<br>数据结构通过算法实现操作<br>算法根据数据结构设计程序</p></blockquote><p><strong>算法特性：</strong> 一个合格的算法必须具备五个重要特性</p><ol><li>有穷性：一个算法必须在执行有穷步后结束，且每一步都在有穷时间内完成</li><li>确定性：算法中的每一条指令必须有确切含义，没有二义性，任何条件下，只有唯一的执行路径，及对于相同的输入只能得到相同的结果</li><li>可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现</li><li>输入 一个算法有零个或多个输入</li><li>输出 一个算法至少有一个输出或多个输出</li></ol><blockquote><p>理论有点多。。名词记住能解释个大概就差不多了</p></blockquote><p><strong>算法设计的要求：</strong></p><ul><li>正确性（Correctness）</li><li>可读性（Readability）</li><li>健壮性[鲁棒性]（Robustness）</li><li>高效性（Efficiency）</li></ul><p><strong>算法分析：</strong><br>一个算法在满足了上述要求之后，我们评判一个算法的优良，就要通过算法的效率。<br>算法效率主要由两个方面考虑：</p><ol><li>时间效率</li><li>空间效率<blockquote><p>但有的时候往往时间和空间是矛盾的，要有取舍</p></blockquote></li></ol><p>对于时间的度量</p><ul><li>事前分析——通过基础数学做一个估算分析</li><li>事后统计——实现算法，测算时间和空间开销</li></ul><p><code>算法运行时间=一个简单操作所需时间*简单操作次数</code><br>简单操作(赋值、比较等)，即<br><code>算法运行时间=每条语句的执行次数*该语句执行一次所耗费的时间</code></p><blockquote><p>语句执行一次消耗的时间其实会和机器有关，老的机器毕竟没有新的好，所以通常将语句执行一次的时间设置为一个固定量，即算法运行时间&#x3D;每条语句执行次数*n</p></blockquote><p>假设一个n*n的矩阵算法：</p><pre><code class="c">for(int i = 1; i &lt;= n; i++)&#123;            //n+1    for(int j = 1; j &lt;= n; j++)&#123;        //n(n+1)        a[i][j] = 0;                    //n*n        for(int k = 0; k &lt; n; k++)      //n*n*(n+1)            a[i][j] = a[i][j] + b[i][k] * c[k][j]; //n*n*n    &#125;&#125;</code></pre><blockquote><p>一个循环需要一个n级别的时间，循环之中还有判断，是为n+1<br>第二个循环在第一个循环的基础上又多了一层，也包含判断，是为n(n+1),为啥只有+一个1呢，应该是上一层只管循环<br>赋值的时间估计消耗不计了，就是n*n<br>第三个循环以前两个推，后面的赋值参照前面的赋值</p></blockquote><p>算法所耗费的时间定义为<strong>该算法中每条语句的频度之和</strong>，则上述算法的时间消耗为T(n) &#x3D; 2n^3 + 3n^2 + 2n + 1</p><ul><li>为了便于比较不同算法的时间效率，我们只比较它们的数量级：<br>例如：两个不同算法，时间消耗分别为为：<br>  T1(n) &#x3D; 10n^2 and T2(n) &#x3D; 5n^3</li><li>若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)&#x2F;f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)&#x3D;O(f(n))，称O(f(n))为算法的渐进时间复杂度(O是数量级的符号)，简称时间复杂度。</li></ul><p>以之前的T(n) &#x3D; 2n^3 + 3n^2 + 2n + 1举例：<br>当n -&gt; &amp;infin; T(n)&#x2F;n^3 -&gt; 2,这表示n充分大时，T(n)与n^3是同阶或同数量级，引入大“O”记号，则<code>T(n) = O(n^3)</code></p><blockquote><p>也就是看最高指数项<br>弹幕有一条总结比较好的：<br>1.常数1取代运行时间中的加法常数.<br>2.只保留最高阶项<br>3.如果最高阶项存在且系数不为1，则去除该项的系数 得到的结果就是大0阶</p></blockquote><p><strong>一般情况下，不必计算所有操作的执行次数，而只考虑算法中基本操作执行的次数，它是问题规模n的某个函数，用T(n)表示</strong></p><p>故此算法时间复杂度的定义就是说，算法中基本语句重复执行的次数是问题规模n的某个函数f(n)，算法的时间量度记作：<code>T(n) = O(f(n))</code>;</p><ul><li>排序：n为记录数</li><li>矩阵：n为矩阵的阶数</li><li>多项式：n为多项式的项数</li><li>集合：n为元素个数</li><li>树：n为树的结点个数</li><li>图：n为图的顶点数或边数</li></ul><pre><code>他表示随着n的增大，算法执行的时间的增长率和f(n)的增长率相同，成为渐进时间复杂度</code></pre><p>若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)&#x2F;f(n)的极限值为不等于零的常熟，则称f(n)是T(n)的同数量级函数，记作T(n)&#x3D;O(f(n))<br>称O(f(n))为<strong>算法的渐进时间复杂度</strong>（O是数量级的符号），简称<strong>时间复杂度</strong>。</p><blockquote><p>这里的概念性问题有点多，比较绕，个人感觉的话就是考虑时间复杂度的时候一般不计算所有操作的次数，而去考虑基本次数，也就是问题规模n的某个函数用T(n)表示，其实也就是看最高项是什么</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/009.png" class=""><blockquote><p>这也是老师给的一则定理，看一则多项式，我们只保留含有最高项的指数项，然后指数前面的系数也可以去掉，图里也就是T(n)&#x3D;O(n^m)</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/010.png" class=""><p>然后对照这个，其实一眼就看出来了，T(n)&#x3D;O(n^2)<br>过程就是<img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/011.png" class=""><br>同理转换就是根据T(n)&#x3D;O(f(n))，这里的f(n)&#x3D;n(n+1)，然后常数抛掉，就得到T(n)&#x3D;O(n^2)。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/012.png" class=""><p>后续再看一题，其实跟上题差不多，都是n^2</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/013.png" class=""><p>也就是验证时间复杂度是由嵌套最深语句的频度决定的。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/014.png" class=""><p>第二个实例，因为循环中条件不全是&lt;&#x3D;n了，所以在计算语句频度之上的方法有点区别，但是最终还是n^3</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/015.png" class=""><blockquote><p>看到这玩意还是咯噔了一下，但是说是最后不考究以什么为底的对数，就是简单说明这个程序的时间复杂度达到了对数级别。</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/016.png" class=""><p>考虑算法复杂度时：</p><ul><li>最坏时间复杂度：最坏情况下算法的时间复杂度</li><li>平均时间复杂度：在输入实例等概率出现的情况下，算法所达到期望的运行时间。</li><li>最好时间复杂度：指在最好情况下，算法的时间复杂度。</li></ul><p>实际上最多考虑的也就是最坏时间了，平均时间有的时候也不好求。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/017.png" class=""><blockquote><p>这个看着有点迷糊，先记住有加法和乘法吧</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/018.png" class=""><p>分别对应常数、对数、幂、指数、阶、以及不断增多的阶乘.<br>按照ppt的排序则为<img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/019.png" class=""><br>也就是说在合理需求内一个算法尽量保持在对数阶左右，立方阶次要，k次方和指数是非常不合理的算法了。</p><blockquote><p>时间复杂度由程序换算最高项决定</p></blockquote><hr><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>空间复杂度：即算法所需的存储空间的度量，记作：<br>S(n)&#x3D;O(f(n)),其中n为问题的规模<blockquote><p>时间time，空间space。。还挺直观的</p></blockquote></li></ul><p>算法要占据的空间除了本身，还要考虑输入&#x2F;输出，指令，常数，变量等</p><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p>将一个一维数组a中的第n个数逆序存放到原数组</p><pre><code class="c">//算法一for(i = 0; i &lt; n/2; i++)&#123;    t = a[i];    a[i] = a[n-i-1];    a[n-i-1] = t;&#125;</code></pre><pre><code class="c">//算法二for(i = 0; i &lt; n; i++)    b[i] = a[n-i-1];for(i = 0; i &lt; n; i++)    a[i] = b[i];</code></pre><blockquote><p>其实从第二种算法中出现数组b，就能看出算法二的空间占用会高一点</p></blockquote><p>算法一因为只额外用了一个变量t，故S(n)&#x3D;O(1);<br>算法二因为多生成了一个数组，且长度肯定也要跟n一样，故S(n)&#x3D;O(n);</p><blockquote><p>不得不感慨对于空间的概念雀食描述很少，这简单的一个举例就完事了。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/020.png" class=""><blockquote><p>对于时间而言，考虑的会更多，概念也更多，而空间的概念会少很多，就是纯看程序所涉及到那些变量的占用空间。</p><p>对于一个算法，其时间复杂度和空间复杂度往往是相互影响的。当追求一个较好的时间复杂度时，可能会使空间复杂度的性能变差，即可能导致占用较多的存储空间；反之，当追求一个较好的空间复杂度时，可能会使时间复杂度的性能变差，即可能导致占用较长的运行时间。另外，算法的所有性能之间都存在着或多或少的相互影响。因此，当设计一个算法(特别是大型算法)时，要综合考虑算法的各项性能，算法的使用频率，算法处理的数据量的大小，算法描述语言的特性，算法运行的机器系统环境等各方面因素，才能够设计出比较好的算法。算法的时间复杂度和空间复杂度合称为算法的复杂度。—— 摘自百度</p></blockquote><hr><p>回顾：</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/021.png" class=""><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是具有相同特性的数据元素的一个有限序列。</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/022.png" class=""><blockquote><p>直接抽象上看就跟一维数组一样，有头有尾有下标，但是如果要考虑到每个元素带前驱和后继，就会增加一项指针，用来指向前驱成员的位置和后驱成员的位置</p></blockquote><p>线性表（Linear List）</p><ul><li>其中数据元素的个数n定义为表的长度</li><li>当n&#x3D;0时称为空表</li><li>将非空的线性表(n&gt;0)记作：(a1,a2……an)</li><li>这里的数据元素只是抽象的符号，具体含义根据不同情况而定</li></ul><blockquote><p>根据这样的介绍，线性表相当于拆成三块</p></blockquote><p>在非空的情况下：</p><ul><li>开始节点，不存在前驱，只存在后继成员</li><li>终端节点，不存在后继，只存在前驱成员</li><li>中间节点：既有前驱又有后继</li></ul><p>案例：</p><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/023.png" class=""><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/024.png" class=""><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/025.png" class=""><blockquote><p>由于数组在开辟时就需要声明有多少成员，以至于不使用在此处场景，毕竟你不能确定到底需要多大的空间，于是还是由链式存储结构更为合适。</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/026.png" class=""><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/027.png" class=""><blockquote><p>这里一块三个成员，其实就对应链表的一个节点，不过不同的是此处的链表可以说是双向的，但不循环，因为头尾节点并没有相互指向的指针域</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/028.png" class=""><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/029.png" class=""><blockquote><p>图书顺序表其实就跟结构体一样，里面包含序号，书名，价格，链表当然也可以</p></blockquote><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/030.png" class=""><p>这玩意换成c的话估计是：</p><pre><code class="c">struct List&#123;    char ch[10];    //xxxxx&#125;;void InitList(struct List *l)&#123;&#125;void DestroyList(struct List *l)&#123;&#125;void Listnsert(struct List *l,int i,e)&#123;&#125;void ListDelete(struct List *l,int i,*e)&#123;&#125;</code></pre><p>代码肯定是不能运行的，只是大致的才想，毕竟不是c++，那么能用到的就是类似这样的写法。</p><ul><li>InitList：构造一个空的线性表，也就是初始化</li><li>DestroyList：若存在表，则其销毁掉</li><li>ClearList：若存在表，则重置清空表</li><li>ListEmpty：判断线性表是否为空，应是bool型，或者返回0或1</li><li>ListLength：统计线性表元素个数</li><li>GetElem：表存在前提，根据输入的变量返回线性表中该位置的值</li><li>LocateElem：返回第一个找到满足要求的数据元素的位序</li></ul><img src="/2021/03/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84c/031.png" class=""><blockquote><p>这俩说实在。。还没感受到有啥意义</p></blockquote><ul><li>ListInsert：在线性表的第i个位置插入新的数据，表长度+1</li><li>ListDelect：删除线性表的第i个元素，表长度-1</li><li></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;青岛大学 王卓老师的数据结构和算法基础&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="c" scheme="https://8bytes.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://8bytes.top/2021/01/01/hello-world/"/>
    <id>https://8bytes.top/2021/01/01/hello-world/</id>
    <published>2021-01-01T13:01:01.000Z</published>
    <updated>2022-03-29T15:04:58.121Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a></p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
